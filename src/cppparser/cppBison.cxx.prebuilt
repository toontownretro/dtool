/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs

/* First part of user prologue.  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 274 "built/tmp/cppBison.yxx.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "cppBison.yxx.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_REAL = 3,                       /* REAL  */
  YYSYMBOL_INTEGER = 4,                    /* INTEGER  */
  YYSYMBOL_CHAR_TOK = 5,                   /* CHAR_TOK  */
  YYSYMBOL_SIMPLE_STRING = 6,              /* SIMPLE_STRING  */
  YYSYMBOL_SIMPLE_IDENTIFIER = 7,          /* SIMPLE_IDENTIFIER  */
  YYSYMBOL_STRING_LITERAL = 8,             /* STRING_LITERAL  */
  YYSYMBOL_CUSTOM_LITERAL = 9,             /* CUSTOM_LITERAL  */
  YYSYMBOL_IDENTIFIER = 10,                /* IDENTIFIER  */
  YYSYMBOL_TYPENAME_IDENTIFIER = 11,       /* TYPENAME_IDENTIFIER  */
  YYSYMBOL_TYPEPACK_IDENTIFIER = 12,       /* TYPEPACK_IDENTIFIER  */
  YYSYMBOL_SCOPING = 13,                   /* SCOPING  */
  YYSYMBOL_TYPEDEFNAME = 14,               /* TYPEDEFNAME  */
  YYSYMBOL_ELLIPSIS = 15,                  /* ELLIPSIS  */
  YYSYMBOL_OROR = 16,                      /* OROR  */
  YYSYMBOL_ANDAND = 17,                    /* ANDAND  */
  YYSYMBOL_EQCOMPARE = 18,                 /* EQCOMPARE  */
  YYSYMBOL_NECOMPARE = 19,                 /* NECOMPARE  */
  YYSYMBOL_LECOMPARE = 20,                 /* LECOMPARE  */
  YYSYMBOL_GECOMPARE = 21,                 /* GECOMPARE  */
  YYSYMBOL_LSHIFT = 22,                    /* LSHIFT  */
  YYSYMBOL_RSHIFT = 23,                    /* RSHIFT  */
  YYSYMBOL_POINTSAT_STAR = 24,             /* POINTSAT_STAR  */
  YYSYMBOL_DOT_STAR = 25,                  /* DOT_STAR  */
  YYSYMBOL_UNARY = 26,                     /* UNARY  */
  YYSYMBOL_UNARY_NOT = 27,                 /* UNARY_NOT  */
  YYSYMBOL_UNARY_NEGATE = 28,              /* UNARY_NEGATE  */
  YYSYMBOL_UNARY_MINUS = 29,               /* UNARY_MINUS  */
  YYSYMBOL_UNARY_PLUS = 30,                /* UNARY_PLUS  */
  YYSYMBOL_UNARY_STAR = 31,                /* UNARY_STAR  */
  YYSYMBOL_UNARY_REF = 32,                 /* UNARY_REF  */
  YYSYMBOL_POINTSAT = 33,                  /* POINTSAT  */
  YYSYMBOL_SCOPE = 34,                     /* SCOPE  */
  YYSYMBOL_PLUSPLUS = 35,                  /* PLUSPLUS  */
  YYSYMBOL_MINUSMINUS = 36,                /* MINUSMINUS  */
  YYSYMBOL_TIMESEQUAL = 37,                /* TIMESEQUAL  */
  YYSYMBOL_DIVIDEEQUAL = 38,               /* DIVIDEEQUAL  */
  YYSYMBOL_MODEQUAL = 39,                  /* MODEQUAL  */
  YYSYMBOL_PLUSEQUAL = 40,                 /* PLUSEQUAL  */
  YYSYMBOL_MINUSEQUAL = 41,                /* MINUSEQUAL  */
  YYSYMBOL_OREQUAL = 42,                   /* OREQUAL  */
  YYSYMBOL_ANDEQUAL = 43,                  /* ANDEQUAL  */
  YYSYMBOL_XOREQUAL = 44,                  /* XOREQUAL  */
  YYSYMBOL_LSHIFTEQUAL = 45,               /* LSHIFTEQUAL  */
  YYSYMBOL_RSHIFTEQUAL = 46,               /* RSHIFTEQUAL  */
  YYSYMBOL_ATTR_LEFT = 47,                 /* ATTR_LEFT  */
  YYSYMBOL_ATTR_RIGHT = 48,                /* ATTR_RIGHT  */
  YYSYMBOL_KW_ALIGNAS = 49,                /* KW_ALIGNAS  */
  YYSYMBOL_KW_ALIGNOF = 50,                /* KW_ALIGNOF  */
  YYSYMBOL_KW_AUTO = 51,                   /* KW_AUTO  */
  YYSYMBOL_KW_BEGIN_PUBLISH = 52,          /* KW_BEGIN_PUBLISH  */
  YYSYMBOL_KW_BLOCKING = 53,               /* KW_BLOCKING  */
  YYSYMBOL_KW_BOOL = 54,                   /* KW_BOOL  */
  YYSYMBOL_KW_CATCH = 55,                  /* KW_CATCH  */
  YYSYMBOL_KW_CHAR = 56,                   /* KW_CHAR  */
  YYSYMBOL_KW_CHAR16_T = 57,               /* KW_CHAR16_T  */
  YYSYMBOL_KW_CHAR32_T = 58,               /* KW_CHAR32_T  */
  YYSYMBOL_KW_CLASS = 59,                  /* KW_CLASS  */
  YYSYMBOL_KW_CONST = 60,                  /* KW_CONST  */
  YYSYMBOL_KW_CONSTEXPR = 61,              /* KW_CONSTEXPR  */
  YYSYMBOL_KW_CONST_CAST = 62,             /* KW_CONST_CAST  */
  YYSYMBOL_KW_DECLTYPE = 63,               /* KW_DECLTYPE  */
  YYSYMBOL_KW_DEFAULT = 64,                /* KW_DEFAULT  */
  YYSYMBOL_KW_DELETE = 65,                 /* KW_DELETE  */
  YYSYMBOL_KW_DOUBLE = 66,                 /* KW_DOUBLE  */
  YYSYMBOL_KW_DYNAMIC_CAST = 67,           /* KW_DYNAMIC_CAST  */
  YYSYMBOL_KW_ELSE = 68,                   /* KW_ELSE  */
  YYSYMBOL_KW_END_PUBLISH = 69,            /* KW_END_PUBLISH  */
  YYSYMBOL_KW_ENUM = 70,                   /* KW_ENUM  */
  YYSYMBOL_KW_EXTENSION = 71,              /* KW_EXTENSION  */
  YYSYMBOL_KW_EXTERN = 72,                 /* KW_EXTERN  */
  YYSYMBOL_KW_EXPLICIT = 73,               /* KW_EXPLICIT  */
  YYSYMBOL_KW_PUBLISHED = 74,              /* KW_PUBLISHED  */
  YYSYMBOL_KW_FALSE = 75,                  /* KW_FALSE  */
  YYSYMBOL_KW_FINAL = 76,                  /* KW_FINAL  */
  YYSYMBOL_KW_FLOAT = 77,                  /* KW_FLOAT  */
  YYSYMBOL_KW_FRIEND = 78,                 /* KW_FRIEND  */
  YYSYMBOL_KW_FOR = 79,                    /* KW_FOR  */
  YYSYMBOL_KW_GOTO = 80,                   /* KW_GOTO  */
  YYSYMBOL_KW_HAS_VIRTUAL_DESTRUCTOR = 81, /* KW_HAS_VIRTUAL_DESTRUCTOR  */
  YYSYMBOL_KW_IF = 82,                     /* KW_IF  */
  YYSYMBOL_KW_INLINE = 83,                 /* KW_INLINE  */
  YYSYMBOL_KW_INT = 84,                    /* KW_INT  */
  YYSYMBOL_KW_IS_ABSTRACT = 85,            /* KW_IS_ABSTRACT  */
  YYSYMBOL_KW_IS_BASE_OF = 86,             /* KW_IS_BASE_OF  */
  YYSYMBOL_KW_IS_CLASS = 87,               /* KW_IS_CLASS  */
  YYSYMBOL_KW_IS_CONSTRUCTIBLE = 88,       /* KW_IS_CONSTRUCTIBLE  */
  YYSYMBOL_KW_IS_CONVERTIBLE_TO = 89,      /* KW_IS_CONVERTIBLE_TO  */
  YYSYMBOL_KW_IS_DESTRUCTIBLE = 90,        /* KW_IS_DESTRUCTIBLE  */
  YYSYMBOL_KW_IS_EMPTY = 91,               /* KW_IS_EMPTY  */
  YYSYMBOL_KW_IS_ENUM = 92,                /* KW_IS_ENUM  */
  YYSYMBOL_KW_IS_FINAL = 93,               /* KW_IS_FINAL  */
  YYSYMBOL_KW_IS_FUNDAMENTAL = 94,         /* KW_IS_FUNDAMENTAL  */
  YYSYMBOL_KW_IS_POD = 95,                 /* KW_IS_POD  */
  YYSYMBOL_KW_IS_POLYMORPHIC = 96,         /* KW_IS_POLYMORPHIC  */
  YYSYMBOL_KW_IS_STANDARD_LAYOUT = 97,     /* KW_IS_STANDARD_LAYOUT  */
  YYSYMBOL_KW_IS_TRIVIAL = 98,             /* KW_IS_TRIVIAL  */
  YYSYMBOL_KW_IS_UNION = 99,               /* KW_IS_UNION  */
  YYSYMBOL_KW_LONG = 100,                  /* KW_LONG  */
  YYSYMBOL_KW_MAKE_MAP_KEYS_SEQ = 101,     /* KW_MAKE_MAP_KEYS_SEQ  */
  YYSYMBOL_KW_MAKE_MAP_PROPERTY = 102,     /* KW_MAKE_MAP_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY = 103,         /* KW_MAKE_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY2 = 104,        /* KW_MAKE_PROPERTY2  */
  YYSYMBOL_KW_MAKE_SEQ = 105,              /* KW_MAKE_SEQ  */
  YYSYMBOL_KW_MAKE_SEQ_PROPERTY = 106,     /* KW_MAKE_SEQ_PROPERTY  */
  YYSYMBOL_KW_MUTABLE = 107,               /* KW_MUTABLE  */
  YYSYMBOL_KW_NAMESPACE = 108,             /* KW_NAMESPACE  */
  YYSYMBOL_KW_NEW = 109,                   /* KW_NEW  */
  YYSYMBOL_KW_NOEXCEPT = 110,              /* KW_NOEXCEPT  */
  YYSYMBOL_KW_NULLPTR = 111,               /* KW_NULLPTR  */
  YYSYMBOL_KW_OPERATOR = 112,              /* KW_OPERATOR  */
  YYSYMBOL_KW_OVERRIDE = 113,              /* KW_OVERRIDE  */
  YYSYMBOL_KW_PRIVATE = 114,               /* KW_PRIVATE  */
  YYSYMBOL_KW_PROTECTED = 115,             /* KW_PROTECTED  */
  YYSYMBOL_KW_PUBLIC = 116,                /* KW_PUBLIC  */
  YYSYMBOL_KW_REGISTER = 117,              /* KW_REGISTER  */
  YYSYMBOL_KW_REINTERPRET_CAST = 118,      /* KW_REINTERPRET_CAST  */
  YYSYMBOL_KW_RETURN = 119,                /* KW_RETURN  */
  YYSYMBOL_KW_SHORT = 120,                 /* KW_SHORT  */
  YYSYMBOL_KW_SIGNED = 121,                /* KW_SIGNED  */
  YYSYMBOL_KW_SIZEOF = 122,                /* KW_SIZEOF  */
  YYSYMBOL_KW_STATIC = 123,                /* KW_STATIC  */
  YYSYMBOL_KW_STATIC_ASSERT = 124,         /* KW_STATIC_ASSERT  */
  YYSYMBOL_KW_STATIC_CAST = 125,           /* KW_STATIC_CAST  */
  YYSYMBOL_KW_STRUCT = 126,                /* KW_STRUCT  */
  YYSYMBOL_KW_TEMPLATE = 127,              /* KW_TEMPLATE  */
  YYSYMBOL_KW_THREAD_LOCAL = 128,          /* KW_THREAD_LOCAL  */
  YYSYMBOL_KW_THROW = 129,                 /* KW_THROW  */
  YYSYMBOL_KW_TRUE = 130,                  /* KW_TRUE  */
  YYSYMBOL_KW_TRY = 131,                   /* KW_TRY  */
  YYSYMBOL_KW_TYPEDEF = 132,               /* KW_TYPEDEF  */
  YYSYMBOL_KW_TYPEID = 133,                /* KW_TYPEID  */
  YYSYMBOL_KW_TYPENAME = 134,              /* KW_TYPENAME  */
  YYSYMBOL_KW_UNDERLYING_TYPE = 135,       /* KW_UNDERLYING_TYPE  */
  YYSYMBOL_KW_UNION = 136,                 /* KW_UNION  */
  YYSYMBOL_KW_UNSIGNED = 137,              /* KW_UNSIGNED  */
  YYSYMBOL_KW_USING = 138,                 /* KW_USING  */
  YYSYMBOL_KW_VIRTUAL = 139,               /* KW_VIRTUAL  */
  YYSYMBOL_KW_VOID = 140,                  /* KW_VOID  */
  YYSYMBOL_KW_VOLATILE = 141,              /* KW_VOLATILE  */
  YYSYMBOL_KW_WCHAR_T = 142,               /* KW_WCHAR_T  */
  YYSYMBOL_KW_WHILE = 143,                 /* KW_WHILE  */
  YYSYMBOL_START_CPP = 144,                /* START_CPP  */
  YYSYMBOL_START_CONST_EXPR = 145,         /* START_CONST_EXPR  */
  YYSYMBOL_START_TYPE = 146,               /* START_TYPE  */
  YYSYMBOL_147_ = 147,                     /* '{'  */
  YYSYMBOL_148_ = 148,                     /* ','  */
  YYSYMBOL_149_ = 149,                     /* ';'  */
  YYSYMBOL_150_ = 150,                     /* ':'  */
  YYSYMBOL_151_ = 151,                     /* '='  */
  YYSYMBOL_152_ = 152,                     /* '?'  */
  YYSYMBOL_153_ = 153,                     /* '|'  */
  YYSYMBOL_154_ = 154,                     /* '^'  */
  YYSYMBOL_155_ = 155,                     /* '&'  */
  YYSYMBOL_156_ = 156,                     /* '<'  */
  YYSYMBOL_157_ = 157,                     /* '>'  */
  YYSYMBOL_158_ = 158,                     /* '+'  */
  YYSYMBOL_159_ = 159,                     /* '-'  */
  YYSYMBOL_160_ = 160,                     /* '*'  */
  YYSYMBOL_161_ = 161,                     /* '/'  */
  YYSYMBOL_162_ = 162,                     /* '%'  */
  YYSYMBOL_163_ = 163,                     /* '~'  */
  YYSYMBOL_164_ = 164,                     /* '.'  */
  YYSYMBOL_165_ = 165,                     /* '('  */
  YYSYMBOL_166_ = 166,                     /* '['  */
  YYSYMBOL_167_ = 167,                     /* ')'  */
  YYSYMBOL_168_ = 168,                     /* '}'  */
  YYSYMBOL_169_ = 169,                     /* '!'  */
  YYSYMBOL_170_ = 170,                     /* ']'  */
  YYSYMBOL_YYACCEPT = 171,                 /* $accept  */
  YYSYMBOL_grammar = 172,                  /* grammar  */
  YYSYMBOL_cpp = 173,                      /* cpp  */
  YYSYMBOL_constructor_inits = 174,        /* constructor_inits  */
  YYSYMBOL_constructor_init = 175,         /* constructor_init  */
  YYSYMBOL_extern_c = 176,                 /* extern_c  */
  YYSYMBOL_177_1 = 177,                    /* $@1  */
  YYSYMBOL_declaration = 178,              /* declaration  */
  YYSYMBOL_friend_declaration = 179,       /* friend_declaration  */
  YYSYMBOL_180_2 = 180,                    /* $@2  */
  YYSYMBOL_storage_class = 181,            /* storage_class  */
  YYSYMBOL_optional_attributes = 182,      /* optional_attributes  */
  YYSYMBOL_attribute_specifiers = 183,     /* attribute_specifiers  */
  YYSYMBOL_attribute_specifier = 184,      /* attribute_specifier  */
  YYSYMBOL_type_like_declaration = 185,    /* type_like_declaration  */
  YYSYMBOL_186_3 = 186,                    /* $@3  */
  YYSYMBOL_187_4 = 187,                    /* $@4  */
  YYSYMBOL_multiple_instance_identifiers = 188, /* multiple_instance_identifiers  */
  YYSYMBOL_typedef_declaration = 189,      /* typedef_declaration  */
  YYSYMBOL_190_5 = 190,                    /* $@5  */
  YYSYMBOL_typedef_instance_identifiers = 191, /* typedef_instance_identifiers  */
  YYSYMBOL_constructor_prototype = 192,    /* constructor_prototype  */
  YYSYMBOL_193_6 = 193,                    /* $@6  */
  YYSYMBOL_194_7 = 194,                    /* $@7  */
  YYSYMBOL_195_8 = 195,                    /* $@8  */
  YYSYMBOL_function_prototype = 196,       /* function_prototype  */
  YYSYMBOL_197_9 = 197,                    /* $@9  */
  YYSYMBOL_198_10 = 198,                   /* $@10  */
  YYSYMBOL_199_11 = 199,                   /* $@11  */
  YYSYMBOL_200_12 = 200,                   /* $@12  */
  YYSYMBOL_201_13 = 201,                   /* $@13  */
  YYSYMBOL_function_post = 202,            /* function_post  */
  YYSYMBOL_function_operator = 203,        /* function_operator  */
  YYSYMBOL_more_template_declaration = 204, /* more_template_declaration  */
  YYSYMBOL_template_declaration = 205,     /* template_declaration  */
  YYSYMBOL_206_14 = 206,                   /* $@14  */
  YYSYMBOL_template_formal_parameters = 207, /* template_formal_parameters  */
  YYSYMBOL_template_nonempty_formal_parameters = 208, /* template_nonempty_formal_parameters  */
  YYSYMBOL_typename_keyword = 209,         /* typename_keyword  */
  YYSYMBOL_template_formal_parameter = 210, /* template_formal_parameter  */
  YYSYMBOL_template_formal_parameter_type = 211, /* template_formal_parameter_type  */
  YYSYMBOL_instance_identifier = 212,      /* instance_identifier  */
  YYSYMBOL_213_15 = 213,                   /* $@15  */
  YYSYMBOL_instance_identifier_and_maybe_trailing_return_type = 214, /* instance_identifier_and_maybe_trailing_return_type  */
  YYSYMBOL_maybe_trailing_return_type = 215, /* maybe_trailing_return_type  */
  YYSYMBOL_maybe_comma_identifier = 216,   /* maybe_comma_identifier  */
  YYSYMBOL_function_parameter_list = 217,  /* function_parameter_list  */
  YYSYMBOL_function_parameters = 218,      /* function_parameters  */
  YYSYMBOL_formal_parameter_list = 219,    /* formal_parameter_list  */
  YYSYMBOL_formal_parameters = 220,        /* formal_parameters  */
  YYSYMBOL_template_parameter_maybe_initialize = 221, /* template_parameter_maybe_initialize  */
  YYSYMBOL_maybe_initialize = 222,         /* maybe_initialize  */
  YYSYMBOL_maybe_initialize_or_constructor_body = 223, /* maybe_initialize_or_constructor_body  */
  YYSYMBOL_maybe_initialize_or_function_body = 224, /* maybe_initialize_or_function_body  */
  YYSYMBOL_structure_init = 225,           /* structure_init  */
  YYSYMBOL_structure_init_body = 226,      /* structure_init_body  */
  YYSYMBOL_function_parameter = 227,       /* function_parameter  */
  YYSYMBOL_formal_parameter = 228,         /* formal_parameter  */
  YYSYMBOL_not_paren_formal_parameter_identifier = 229, /* not_paren_formal_parameter_identifier  */
  YYSYMBOL_formal_parameter_identifier = 230, /* formal_parameter_identifier  */
  YYSYMBOL_parameter_pack_identifier = 231, /* parameter_pack_identifier  */
  YYSYMBOL_not_paren_empty_instance_identifier = 232, /* not_paren_empty_instance_identifier  */
  YYSYMBOL_empty_instance_identifier = 233, /* empty_instance_identifier  */
  YYSYMBOL_type = 234,                     /* type  */
  YYSYMBOL_type_pack = 235,                /* type_pack  */
  YYSYMBOL_type_decl = 236,                /* type_decl  */
  YYSYMBOL_predefined_type = 237,          /* predefined_type  */
  YYSYMBOL_var_type_decl = 238,            /* var_type_decl  */
  YYSYMBOL_full_type = 239,                /* full_type  */
  YYSYMBOL_struct_attributes = 240,        /* struct_attributes  */
  YYSYMBOL_anonymous_struct = 241,         /* anonymous_struct  */
  YYSYMBOL_242_16 = 242,                   /* $@16  */
  YYSYMBOL_named_struct = 243,             /* named_struct  */
  YYSYMBOL_244_17 = 244,                   /* $@17  */
  YYSYMBOL_maybe_final = 245,              /* maybe_final  */
  YYSYMBOL_maybe_class_derivation = 246,   /* maybe_class_derivation  */
  YYSYMBOL_class_derivation = 247,         /* class_derivation  */
  YYSYMBOL_base_specification = 248,       /* base_specification  */
  YYSYMBOL_enum = 249,                     /* enum  */
  YYSYMBOL_250_18 = 250,                   /* $@18  */
  YYSYMBOL_enum_decl = 251,                /* enum_decl  */
  YYSYMBOL_enum_element_type = 252,        /* enum_element_type  */
  YYSYMBOL_enum_body_trailing_comma = 253, /* enum_body_trailing_comma  */
  YYSYMBOL_enum_body = 254,                /* enum_body  */
  YYSYMBOL_enum_keyword = 255,             /* enum_keyword  */
  YYSYMBOL_struct_keyword = 256,           /* struct_keyword  */
  YYSYMBOL_namespace_declaration = 257,    /* namespace_declaration  */
  YYSYMBOL_258_19 = 258,                   /* $@19  */
  YYSYMBOL_259_20 = 259,                   /* $@20  */
  YYSYMBOL_using_declaration = 260,        /* using_declaration  */
  YYSYMBOL_simple_type = 261,              /* simple_type  */
  YYSYMBOL_simple_int_type = 262,          /* simple_int_type  */
  YYSYMBOL_simple_float_type = 263,        /* simple_float_type  */
  YYSYMBOL_simple_void_type = 264,         /* simple_void_type  */
  YYSYMBOL_code = 265,                     /* code  */
  YYSYMBOL_266_21 = 266,                   /* $@21  */
  YYSYMBOL_code_block = 267,               /* code_block  */
  YYSYMBOL_element = 268,                  /* element  */
  YYSYMBOL_optional_const_expr = 269,      /* optional_const_expr  */
  YYSYMBOL_optional_const_expr_comma = 270, /* optional_const_expr_comma  */
  YYSYMBOL_const_expr_comma = 271,         /* const_expr_comma  */
  YYSYMBOL_no_angle_bracket_const_expr = 272, /* no_angle_bracket_const_expr  */
  YYSYMBOL_const_expr = 273,               /* const_expr  */
  YYSYMBOL_const_operand = 274,            /* const_operand  */
  YYSYMBOL_formal_const_expr = 275,        /* formal_const_expr  */
  YYSYMBOL_formal_const_operand = 276,     /* formal_const_operand  */
  YYSYMBOL_capture_list = 277,             /* capture_list  */
  YYSYMBOL_capture = 278,                  /* capture  */
  YYSYMBOL_class_derivation_name = 279,    /* class_derivation_name  */
  YYSYMBOL_name = 280,                     /* name  */
  YYSYMBOL_name_no_final = 281,            /* name_no_final  */
  YYSYMBOL_string_literal = 282,           /* string_literal  */
  YYSYMBOL_empty = 283                     /* empty  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  104
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7671

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  171
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  113
/* YYNRULES -- Number of rules.  */
#define YYNRULES  770
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1633

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   401


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   169,     2,     2,     2,   162,   155,     2,
     165,   167,   160,   158,   148,   159,   164,   161,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   150,   149,
     156,   151,   157,   152,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   166,     2,   170,   154,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   147,   153,   168,   163,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   452,   452,   453,   457,   464,   465,   466,   470,   471,
     475,   479,   483,   496,   495,   507,   508,   509,   510,   511,
     512,   513,   526,   535,   539,   547,   551,   555,   576,   603,
     624,   653,   689,   732,   744,   765,   801,   835,   857,   893,
     915,   926,   940,   939,   954,   958,   963,   967,   978,   982,
     986,   990,   994,   998,  1002,  1006,  1010,  1014,  1018,  1022,
    1027,  1031,  1038,  1039,  1040,  1041,  1045,  1046,  1050,  1051,
    1052,  1057,  1056,  1072,  1082,  1081,  1098,  1106,  1114,  1125,
    1141,  1140,  1155,  1170,  1179,  1194,  1193,  1233,  1232,  1260,
    1259,  1296,  1295,  1326,  1325,  1344,  1343,  1364,  1363,  1395,
    1394,  1420,  1433,  1437,  1441,  1445,  1458,  1462,  1466,  1470,
    1474,  1479,  1484,  1488,  1492,  1496,  1503,  1507,  1511,  1515,
    1519,  1523,  1527,  1531,  1535,  1539,  1543,  1547,  1551,  1555,
    1559,  1563,  1567,  1571,  1575,  1579,  1583,  1587,  1591,  1595,
    1599,  1603,  1607,  1611,  1615,  1619,  1623,  1627,  1631,  1635,
    1639,  1643,  1647,  1651,  1655,  1662,  1663,  1664,  1668,  1670,
    1669,  1677,  1678,  1682,  1683,  1687,  1693,  1702,  1703,  1707,
    1711,  1715,  1719,  1725,  1731,  1737,  1744,  1749,  1758,  1762,
    1767,  1775,  1787,  1791,  1805,  1820,  1825,  1830,  1835,  1840,
    1845,  1850,  1855,  1861,  1860,  1891,  1901,  1911,  1915,  1919,
    1928,  1932,  1940,  1944,  1949,  1953,  1958,  1966,  1971,  1979,
    1983,  1988,  1992,  1997,  2005,  2010,  2018,  2022,  2029,  2033,
    2040,  2044,  2048,  2052,  2056,  2063,  2067,  2071,  2075,  2079,
    2083,  2090,  2091,  2092,  2096,  2099,  2100,  2101,  2105,  2110,
    2116,  2122,  2127,  2133,  2139,  2143,  2154,  2158,  2168,  2172,
    2176,  2181,  2186,  2191,  2196,  2201,  2206,  2214,  2218,  2222,
    2227,  2232,  2237,  2242,  2247,  2252,  2257,  2263,  2271,  2276,
    2281,  2286,  2291,  2296,  2301,  2306,  2311,  2316,  2322,  2330,
    2334,  2339,  2344,  2349,  2354,  2359,  2364,  2369,  2374,  2382,
    2386,  2391,  2396,  2401,  2406,  2411,  2416,  2421,  2426,  2431,
    2437,  2444,  2451,  2461,  2465,  2473,  2477,  2481,  2485,  2489,
    2505,  2521,  2530,  2534,  2544,  2551,  2562,  2566,  2574,  2578,
    2582,  2586,  2590,  2606,  2622,  2640,  2649,  2653,  2663,  2670,
    2674,  2682,  2686,  2702,  2718,  2727,  2737,  2744,  2748,  2756,
    2760,  2765,  2769,  2777,  2778,  2779,  2780,  2785,  2784,  2809,
    2808,  2838,  2839,  2846,  2847,  2851,  2852,  2856,  2860,  2864,
    2868,  2872,  2876,  2880,  2884,  2888,  2892,  2900,  2899,  2916,
    2920,  2924,  2929,  2937,  2941,  2948,  2949,  2954,  2961,  2962,
    2967,  2975,  2979,  2983,  2990,  2994,  2998,  3006,  3005,  3028,
    3027,  3050,  3051,  3055,  3061,  3068,  3077,  3078,  3079,  3083,
    3087,  3091,  3095,  3099,  3103,  3108,  3113,  3118,  3123,  3127,
    3132,  3141,  3146,  3154,  3158,  3162,  3170,  3180,  3180,  3190,
    3191,  3195,  3196,  3197,  3198,  3199,  3200,  3201,  3202,  3203,
    3204,  3205,  3206,  3206,  3206,  3207,  3207,  3207,  3207,  3208,
    3208,  3208,  3208,  3208,  3209,  3209,  3209,  3210,  3210,  3210,
    3210,  3210,  3211,  3211,  3211,  3211,  3211,  3212,  3212,  3213,
    3213,  3213,  3213,  3213,  3214,  3214,  3214,  3214,  3214,  3215,
    3215,  3215,  3215,  3216,  3216,  3216,  3216,  3216,  3217,  3217,
    3217,  3217,  3217,  3218,  3218,  3218,  3218,  3218,  3218,  3219,
    3219,  3219,  3219,  3219,  3220,  3220,  3220,  3220,  3221,  3221,
    3221,  3221,  3222,  3222,  3222,  3222,  3222,  3223,  3223,  3223,
    3223,  3224,  3224,  3224,  3224,  3224,  3225,  3225,  3225,  3225,
    3226,  3226,  3226,  3226,  3226,  3227,  3227,  3230,  3230,  3230,
    3230,  3230,  3230,  3230,  3230,  3230,  3230,  3230,  3231,  3231,
    3231,  3231,  3231,  3231,  3231,  3231,  3231,  3231,  3232,  3232,
    3236,  3240,  3247,  3251,  3258,  3262,  3269,  3273,  3277,  3281,
    3285,  3289,  3293,  3297,  3301,  3305,  3309,  3313,  3317,  3321,
    3325,  3329,  3333,  3337,  3341,  3345,  3349,  3353,  3357,  3361,
    3365,  3369,  3373,  3377,  3381,  3385,  3389,  3393,  3397,  3401,
    3405,  3409,  3413,  3417,  3421,  3429,  3433,  3437,  3441,  3445,
    3449,  3453,  3463,  3473,  3479,  3485,  3491,  3497,  3503,  3509,
    3516,  3523,  3530,  3537,  3543,  3549,  3553,  3557,  3561,  3565,
    3569,  3573,  3584,  3595,  3599,  3603,  3607,  3611,  3615,  3619,
    3623,  3627,  3631,  3635,  3639,  3643,  3647,  3651,  3655,  3659,
    3663,  3667,  3671,  3675,  3679,  3683,  3687,  3691,  3695,  3699,
    3703,  3707,  3711,  3715,  3722,  3726,  3730,  3734,  3738,  3742,
    3746,  3750,  3754,  3760,  3766,  3770,  3776,  3783,  3787,  3791,
    3795,  3799,  3803,  3807,  3811,  3815,  3819,  3823,  3827,  3831,
    3835,  3839,  3843,  3847,  3861,  3865,  3869,  3873,  3877,  3881,
    3885,  3889,  3893,  3897,  3901,  3905,  3909,  3920,  3931,  3935,
    3939,  3943,  3947,  3951,  3955,  3959,  3963,  3967,  3971,  3975,
    3979,  3983,  3987,  3991,  3995,  3999,  4003,  4007,  4011,  4015,
    4019,  4023,  4027,  4031,  4035,  4039,  4043,  4047,  4054,  4058,
    4062,  4066,  4070,  4074,  4078,  4082,  4086,  4092,  4098,  4106,
    4110,  4114,  4118,  4125,  4135,  4141,  4147,  4157,  4169,  4177,
    4181,  4211,  4215,  4219,  4223,  4227,  4231,  4237,  4241,  4245,
    4249,  4253,  4264,  4268,  4272,  4276,  4284,  4288,  4292,  4298,
    4309
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "REAL", "INTEGER",
  "CHAR_TOK", "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL",
  "CUSTOM_LITERAL", "IDENTIFIER", "TYPENAME_IDENTIFIER",
  "TYPEPACK_IDENTIFIER", "SCOPING", "TYPEDEFNAME", "ELLIPSIS", "OROR",
  "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE", "GECOMPARE", "LSHIFT",
  "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY", "UNARY_NOT",
  "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR", "UNARY_REF",
  "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "ATTR_LEFT",
  "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH",
  "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR", "KW_CHAR16_T",
  "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_CONSTEXPR", "KW_CONST_CAST",
  "KW_DECLTYPE", "KW_DEFAULT", "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST",
  "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM", "KW_EXTENSION", "KW_EXTERN",
  "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE", "KW_FINAL", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF",
  "KW_INLINE", "KW_INT", "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS",
  "KW_IS_CONSTRUCTIBLE", "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE",
  "KW_IS_EMPTY", "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL",
  "KW_IS_POD", "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT",
  "KW_IS_TRIVIAL", "KW_IS_UNION", "KW_LONG", "KW_MAKE_MAP_KEYS_SEQ",
  "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY", "KW_MAKE_PROPERTY2",
  "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_NOEXCEPT", "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE",
  "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_REGISTER",
  "KW_REINTERPRET_CAST", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_ASSERT", "KW_STATIC_CAST", "KW_STRUCT",
  "KW_TEMPLATE", "KW_THREAD_LOCAL", "KW_THROW", "KW_TRUE", "KW_TRY",
  "KW_TYPEDEF", "KW_TYPEID", "KW_TYPENAME", "KW_UNDERLYING_TYPE",
  "KW_UNION", "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID",
  "KW_VOLATILE", "KW_WCHAR_T", "KW_WHILE", "START_CPP", "START_CONST_EXPR",
  "START_TYPE", "'{'", "','", "';'", "':'", "'='", "'?'", "'|'", "'^'",
  "'&'", "'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'.'",
  "'('", "'['", "')'", "'}'", "'!'", "']'", "$accept", "grammar", "cpp",
  "constructor_inits", "constructor_init", "extern_c", "$@1",
  "declaration", "friend_declaration", "$@2", "storage_class",
  "optional_attributes", "attribute_specifiers", "attribute_specifier",
  "type_like_declaration", "$@3", "$@4", "multiple_instance_identifiers",
  "typedef_declaration", "$@5", "typedef_instance_identifiers",
  "constructor_prototype", "$@6", "$@7", "$@8", "function_prototype",
  "$@9", "$@10", "$@11", "$@12", "$@13", "function_post",
  "function_operator", "more_template_declaration", "template_declaration",
  "$@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "typename_keyword",
  "template_formal_parameter", "template_formal_parameter_type",
  "instance_identifier", "$@15",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "struct_attributes",
  "anonymous_struct", "$@16", "named_struct", "$@17", "maybe_final",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "enum", "$@18", "enum_decl", "enum_element_type",
  "enum_body_trailing_comma", "enum_body", "enum_keyword",
  "struct_keyword", "namespace_declaration", "$@19", "$@20",
  "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@21", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-937)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-766)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     300,  -937,  4486,  6316,    60,  5787,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -125,   -88,   -71,   -60,   -50,   -19,
     -86,   -11,    12,  -937,  -937,    41,    80,    92,   114,   118,
     125,   143,   166,   169,   172,   208,   211,   214,   226,   231,
     240,   242,   247,   252,  6567,  -937,  -937,    21,   266,   272,
    3406,    68,  -937,   291,   297,   306,  4486,  4486,  4486,  4486,
    4486,  2385,   771,  4486,  5624,  -937,   207,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  6427,   309,  -937,    -8,  -937,
    -937,  2514,  1397,  1397,  -937,  6003,   315,  -937,  1397,  -937,
    -937,   204,   204,  -937,  -937,  -937,  -937,  -937,    76,  -937,
    -937,  -937,  -937,  -937,  -937,  5421,   321,  -937,  7530,  7530,
    7530,  -937,  7530,  5959,  7530,   -69,  -937,  7481,   329,   335,
     338,   354,   357,   359,  7530,  2545,   205,   238,   277,  7530,
    7530,   362,  7350,  7530,  7530,  5886,  7530,  7530,  -937,  -937,
    -937,  -937,  1296,  -937,  -937,  -937,  -937,  -937,  4486,  4486,
    6316,  4486,  4486,  4486,  4486,  6316,  4486,  6316,  4486,  6316,
    4486,  6316,  6316,  6316,  6316,  6316,  6316,  6316,  6316,  6316,
    6316,  6316,  6316,  6316,  6316,  6316,  4486,  -937,  -937,   366,
    6003,   369,   379,  6003,  -937,  -937,  6316,  4486,  4486,   390,
    2385,    46,  6316,  2385,  4486,  4486,    46,    46,    46,    46,
      46,  -125,   -71,   -60,   -50,   -19,   -11,    41,    92,  6038,
    6128,  6715,  7239,   306,   126,   -95,  5624,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  6003,
    6003,  -124,   405,  -937,  -937,    46,  4486,  4486,  4486,  4486,
    4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,
    4486,  4486,  4486,  4486,  4486,  4486,  6003,  3541,  4486,  -937,
    -937,   204,   204,  3676,  -937,  -937,  -937,  1397,  -937,  -937,
    -937,  -937,  6316,  -937,   403,   412,   262,   204,   204,   262,
     262,  5901,   400,  -937,   401,  -937,   422,  -937,  -937,  -937,
    -937,  1172,   420,  2453,  -937,  6003,   524,   426,   410,  2637,
    2788,  7530,  -937,  -937,  -937,  -937,  7530,  -937,  -937,  -937,
    -937,  7443,  4590,  -937,  6003,  6003,  6003,  6003,  6003,  6003,
    -937,  -937,   432,  -937,  -937,  -937,  -937,  -937,  4486,  -937,
    2773,  -937,   428,  -937,  5327,  -937,  6003,   175,  -937,  -937,
     267,   421,  -937,   424,  6456,  6003,   427,  -937,  6003,  -937,
     314,   438,  -937,  -937,  -937,  -937,  1213,  -937,  -937,   425,
     452,  -937,   434,   435,   436,   437,   440,   441,   448,   443,
     454,   449,   451,   455,   458,   467,   461,   -84,   481,   463,
     465,   466,   471,   474,   476,   482,   483,   484,   485,   486,
    4486,  -937,  6316,  4486,  -937,  7279,   477,   489,   493,  6003,
     495,   491,   499,  4915,   500,   503,  4486,  4486,  -937,   656,
    -937,   959,   429,  4486,  -937,  -937,  3559,  2868,  1424,  1424,
     614,   614,    89,    89,  -937,  3289,  1443,  1529,  5773,   614,
     614,   157,   157,    46,    46,    46,  -937,  -937,   -75,  1958,
    -937,  -937,   510,  5354,   512,   262,   262,  5421,   515,   413,
    -937,   400,  -937,   400,  -937,   413,   413,  -937,   262,  5421,
    6340,  6222,   262,   262,   521,    23,  -937,   891,   312,  -937,
    4486,  -937,  -937,  -937,  -937,  1172,   -20,   112,   128,  5421,
     517,   142,  -937,  -937,  -937,   543,  7530,  5421,  4621,  -125,
     529,  5396,  -937,  -937,  -937,   552,   553,   554,   555,   557,
     558,   561,  6759,  -937,  4640,  5993,   360,   545,   314,  -937,
    -937,   562,  -937,  6316,  -937,    45,  3811,  6654,  1263,  -937,
    6316,  -937,   547,   332,  -937,  -937,  3271,  -937,  -937,   430,
    -937,   563,  2453,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
     549,  -937,   551,  -937,  -937,  -937,  -937,  6316,  -937,  6316,
    -937,  6316,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  5454,   550,   556,  -937,   559,  -937,  -937,
     560,  4761,   566,  -937,  -937,  -937,  -937,    46,  5624,  -937,
    6003,   405,  6090,  2476,  -937,  5624,  4486,  -937,  -937,  -937,
    -937,  -937,   413,   569,   670,  2637,   568,  6003,   262,   413,
     413,   262,   262,   570,  -937,   570,   570,   413,   684,  6427,
     891,   312,  -937,   413,   413,  -937,  -937,  6184,   578,   262,
     891,   891,   262,   262,   891,   -67,   262,  -937,   580,  6003,
     262,   312,   312,   262,   262,   312,   -47,   572,  5624,  -937,
    6003,   577,  -937,   602,   703,  2637,  -937,   682,  5421,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,   594,   606,   609,
    -937,  -937,  6567,  -937,  -937,   612,  1897,   621,  -937,   619,
    4486,  4486,  4486,  4486,  2385,  4486,   626,    52,  -937,  -937,
    5658,  -937,   207,  -937,  7530,  7530,  6832,  -937,   782,   785,
     786,   790,   791,   796,  -937,  -937,   260,   658,  -937,  -937,
    -937,  -937,  6052,  -937,   652,   666,  7273,  -937,   904,  -937,
    -937,     7,  -937,   430,  -937,   675,  6090,   660,   659,   430,
    6090,   661,  5506,  1263,   665,   262,  1263,  1263,   262,   262,
      -2,   262,  -937,   664,  6905,  -937,  -937,  -937,  6003,   163,
    -937,   668,  -937,   683,   689,  3946,  3833,   673,   262,   430,
    2209,   430,   262,   262,   430,  -937,    26,   361,   262,  1172,
    -937,  4486,  4486,   674,   678,   690,  -937,  -937,  -937,  4486,
    -937,  4486,  -937,   691,  -937,  6543,  5421,  -937,  -937,  -937,
    -937,  -937,  -937,   694,  -937,  -937,   693,  -937,  5624,   570,
     262,   695,  5548,   262,   262,   413,   570,   570,   413,   413,
    4486,    69,  6222,   891,   312,   -67,   -47,   137,   196,  2476,
    -937,  -937,   262,   891,   697,   697,   891,   891,   330,  4486,
    -937,  -937,   262,   262,   312,   699,   699,   312,   312,   347,
    4486,  -937,   262,    72,  -937,  -937,   700,  5566,  6978,  -937,
     710,  -937,  -937,  6316,  6316,  6316,   696,  6316,   704,  2385,
     234,  6316,  2385,    46,    46,    46,    46,   705,   -74,    46,
    -937,  -937,  4896,  4486,  4486,  4486,  4486,  4486,  4486,  4486,
    4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,  4486,
    4486,  4486,  4486,  6003,  4081,  4486,  -937,  -937,  -937,  -937,
     722,   -70,   730,   731,   732,   733,  7051,    42,  -937,   904,
    7359,  5993,  6003,   735,   736,   262,   904,   904,   262,   262,
     904,   -41,   699,  -937,   361,  -937,   715,   724,   430,   285,
     723,  -937,  -937,   268,   262,  1263,   727,   727,  1263,  1263,
    -937,  4486,  -937,  -937,  -937,  6090,   739,   393,  -937,     9,
     748,   762,  -937,  3103,  -937,  -937,  -937,  3946,   752,   775,
    5624,  -937,  -937,   262,   430,   381,   915,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,   766,   759,  -937,   262,   381,   430,   430,
     372,  4486,  -937,  4486,  -937,  3271,   787,  -937,  -937,   602,
     -66,   -53,  -937,  -937,  -937,   -46,   -28,  -937,  6567,   204,
     888,   230,  -937,  -937,   262,   262,   413,  -937,   570,   570,
     570,   768,   774,  -937,   -67,   -47,  -937,  -937,   776,   777,
    -937,   891,   697,   697,   697,   778,   770,   312,  -937,   699,
     699,   699,   784,   780,   781,  -937,  4486,  -937,  -937,  -937,
    4980,   805,   806,  -937,   792,   800,   801,  4486,   804,  6003,
     795,   808,   807,  5606,  4486,  -937,  -937,  -937,  3559,  2868,
    1424,  1424,   614,   614,    89,    89,  -937,  4103,  1443,  1529,
    5773,   614,   614,   157,   157,    46,    46,    46,  -937,  -937,
     -22,  2259,  7124,   953,   957,   819,   962,   809,  -937,   965,
     967,   968,  -937,   830,   -41,   699,  -937,  -937,  -937,  -937,
    -937,  -937,  6316,   262,   904,   904,   904,  5137,  -937,  -937,
     832,  -937,  -937,  -937,   386,   817,  -937,  -937,  1263,   727,
     727,   727,  6090,   813,   823,  -937,  -937,  6003,  4486,  4486,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,   828,  -937,  4216,   430,   381,   262,  -937,  -937,
    -937,   381,   381,  -937,  5624,  4621,   835,  3833,   430,  -937,
    -937,  -937,  -937,  2476,   204,  -937,  -937,  -937,     6,   838,
    -937,  -937,   570,   262,  6090,  -937,  -937,  6090,  6090,   697,
    6090,   262,   699,  6090,   262,  4373,  4865,  6642,  6684,  6003,
     446,  -937,  -937,   997,  -937,  4980,  -937,   848,   850,   852,
     855,   857,  4761,   861,  -937,  -937,    46,  4486,  -937,  -937,
    -937,   860,    -7,  -937,   874,   879,    96,   864,   117,  -937,
    -937,  -937,   904,   873,   883,   886,   887,  5037,   892,  5137,
    5137,  5137,  5137,  5137,  2385,  5137,  1699,  -937,   430,   579,
    6090,   882,  -937,   579,  6090,   727,   885,   262,  -937,   881,
    -937,   889,   893,  2935,  -937,  3946,  5624,   381,  -937,   894,
     262,  -937,   903,  -937,   895,  -937,  -937,  -937,   896,   898,
     900,   901,  -937,   907,  -937,  -937,  6415,  -937,  6415,  -937,
    6415,  -937,  -937,  6415,  6415,  6415,  -937,  7197,  -937,  4486,
    4486,  -937,  4486,  -937,  4486,  5624,   906,  1048,   921,  1061,
    -937,  1066,   930,   932,  1075,   937,  6316,  6316,  6316,  6316,
     922,  2385,   255,  6316,   255,   255,   255,   255,   255,   935,
     134,   255,  5137,  5137,  5137,  5137,  5137,  5137,  5137,  5137,
    5137,  5137,  5137,  5137,  5137,  5137,  5137,  5137,  5137,  5137,
    6003,  4351,  4486,  -937,   944,  -937,  6090,   945,  -937,  -937,
     579,  -937,  -937,  1038,  -937,   920,  -937,  -937,  -937,  -937,
    -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,  -937,
    -937,  -937,   147,   165,   190,   194,  -937,   941,  -937,   948,
     952,  -937,  -937,   201,  -937,   949,   960,   961,   964,  6003,
     955,   969,  5137,  -937,  5718,  1719,   833,   833,   933,   933,
    1004,  1004,  -937,  1087,  1646,  5831,  2240,   625,   625,   255,
     255,   255,  -937,  -937,   219,  2656,  -937,  6090,   963,  -937,
     579,  -937,  -937,   579,   966,  2476,  2476,  2476,   579,   579,
    -937,  -937,  -937,  -937,  1117,   971,   979,  1119,  1122,   984,
    -937,   974,   975,   977,   976,  5237,   980,   255,  5137,  -937,
    -937,   579,   982,  -937,   579,  -937,  -937,  -937,  -937,  -937,
     987,  -937,   983,   223,  -937,  4486,  4486,  4486,  -937,  4486,
    1699,  -937,  2476,  -937,  1005,  1136,  1009,   227,   236,   237,
     239,  2476,  -937,  -937,   992,  -937,  -937,  -937,  -937,  -937,
    -937,  1012,  -937
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,   770,     0,     0,     0,   770,     5,   658,   654,   657,
     766,   767,   660,   661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   656,   662,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   664,   663,     0,     0,     0,
       0,     0,   655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   770,     0,     3,   595,   659,   304,   315,   314,
     399,   400,   402,   403,   384,     0,     0,   414,   381,   413,
     408,   405,   404,   407,   385,     0,     0,   386,   406,   416,
     401,   770,   770,     4,   306,   307,   308,   367,   370,   770,
     303,   396,   397,   398,     1,     0,     0,    21,   770,   770,
     770,    22,   770,   770,   770,     0,    42,   770,     0,     0,
       0,     0,     0,     0,   770,     0,     0,     0,     0,   770,
     770,     0,   770,   770,   770,     0,   770,   770,     6,    17,
       7,    19,     0,    15,    16,    18,    77,    44,   770,   770,
       0,   770,   770,   770,   770,     0,   770,     0,   770,     0,
     770,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   770,   330,   336,     0,
       0,     0,   619,     0,   770,   329,     0,   770,   770,     0,
       0,   616,     0,     0,   770,   770,   628,   626,   625,   627,
     624,   304,   399,   400,   402,   403,   414,   413,   408,   405,
     404,   407,   406,   401,     0,     0,   554,   751,   752,   753,
     761,   754,   757,   755,   759,   758,   756,   760,   740,   741,
       0,     0,   770,   746,   739,   623,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   768,
     769,   770,   770,     0,   382,   383,   415,   405,   410,   409,
     412,   305,     0,   411,     0,   290,   770,   770,   770,   770,
     770,   770,     0,   339,   289,   341,     0,   762,   763,   764,
     765,     0,   372,     0,   343,     0,     0,    66,    68,     0,
     770,   770,    56,    45,    55,    57,   770,    46,   158,    51,
      23,   770,     0,    49,     0,     0,     0,     0,     0,     0,
      54,   770,     0,    26,    25,    24,    52,    48,     0,   162,
       0,   161,     0,    58,     0,    20,     0,     0,    50,    53,
     338,   317,   328,     0,     0,     0,     0,    13,     0,    74,
       0,   337,    71,   319,   320,   321,   370,   770,   316,     0,
     553,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   331,     0,   770,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   653,   744,
     747,     0,   770,     0,   742,   218,   637,   638,   639,   640,
     641,   642,   645,   646,   652,     0,   634,   635,   636,   643,
     644,   632,   633,   629,   630,   631,   651,   650,     0,     0,
     340,   342,     0,     0,     0,   770,   770,     0,     0,   770,
      62,     0,   292,     0,   293,   770,   770,   203,   770,     0,
       0,     0,   770,   770,     0,   204,   207,   770,     0,   202,
     770,   770,   374,   369,   373,     0,   751,   752,   753,     0,
       0,   755,   347,   309,   349,     0,   770,     0,   770,   317,
       0,     0,    47,    43,   770,     0,     0,     0,     0,     0,
       0,     0,   770,   387,     0,   770,   338,   317,     0,   337,
      80,     0,   393,     0,    85,    89,     0,     0,   770,   318,
       0,   770,     0,     0,   417,   225,     0,    76,    73,     0,
     324,   372,     0,   602,   601,   618,   608,   604,   606,   607,
       0,   614,     0,   613,   667,   603,   668,     0,   670,     0,
     671,     0,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,   610,     0,     0,     0,   332,     0,   609,   612,
       0,   615,     0,   621,   622,   611,   605,   596,   555,   745,
       0,   770,   770,   770,   102,   219,     0,   649,   648,   312,
     311,   313,   770,   291,     0,     0,     0,   280,   770,   770,
     770,   770,   770,   296,   279,   295,   294,   770,     0,     0,
     770,     0,   244,   770,   770,   770,   206,     0,     0,   770,
     770,   770,   770,   770,   770,   770,   770,   257,     0,   268,
     770,     0,     0,   770,   770,     0,   770,     0,   551,   550,
     378,     0,   375,   310,     0,     0,   770,   770,     0,    59,
      67,   732,   728,   731,   734,   735,   210,     0,     0,     0,
     730,   736,     0,   738,   737,     0,     0,     0,   729,     0,
       0,     0,     0,     0,     0,     0,     0,   211,   246,   214,
     247,   684,   733,   209,   770,   770,   770,   389,     0,     0,
       0,     0,     0,     0,   391,   770,     0,     0,   179,   180,
     181,   167,     0,   168,     0,   164,   169,   165,   770,   178,
     163,     0,    82,     0,   395,     0,   770,     0,     0,     0,
     770,     0,     0,   770,     0,   770,   770,   770,   770,   770,
       0,   770,   248,     0,   770,    91,   417,   220,     0,     0,
      75,     0,   770,     0,     0,   770,     0,     0,   770,     0,
       0,     0,   770,   770,     0,    72,   770,   770,   770,     0,
     322,     0,     0,     0,     0,     0,   334,   335,   620,     0,
     617,     0,   743,     0,   109,     0,     0,   103,   111,   106,
     110,   105,   107,     0,   104,   108,     0,   197,   647,   297,
     770,     0,     0,   770,   770,   770,   282,   283,   770,   770,
     770,     0,     0,   770,     0,   770,   770,     0,     0,   770,
     205,   208,   770,   770,   259,   260,   770,   770,     0,   770,
     238,   258,   770,   770,     0,   270,   271,     0,     0,     0,
     770,   241,   770,   379,   368,   344,     0,     0,   770,   352,
     770,   351,    70,     0,     0,     0,   694,     0,     0,     0,
     691,     0,     0,   702,   701,   700,   699,     0,     0,   698,
      69,   213,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    61,    60,   392,   770,
       0,     0,   770,     0,     0,     0,   770,     0,    41,   770,
     770,     0,   172,   170,     0,   770,   770,   770,   770,   770,
     770,   770,   176,    81,   770,   394,     0,     0,     0,     0,
       0,   326,   325,     0,   770,   770,   250,   251,   770,   770,
      97,   770,   249,   327,    14,   770,     0,     0,     8,     0,
       0,     0,   226,   418,   419,   228,   229,   770,     0,   232,
     234,   231,   227,   770,     0,   185,     0,   126,   127,   128,
     129,   130,   131,   134,   135,   150,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   154,   153,
     137,   136,   123,   125,   124,   132,   133,   121,   122,   118,
     119,   120,   117,     0,     0,   116,   770,   186,     0,     0,
       0,     0,   193,   770,   195,     0,     0,    78,   182,   323,
       0,     0,   669,   672,   673,     0,     0,   770,     0,   770,
       0,     0,   417,    63,   770,   770,   770,   281,   286,   285,
     284,     0,     0,   245,   770,   770,   239,   242,     0,     0,
     299,   770,   263,   262,   261,   267,     0,     0,   269,   274,
     273,   272,   278,     0,   298,   376,     0,   346,   345,   348,
       0,     0,   354,   353,     0,     0,     0,   770,     0,     0,
       0,     0,     0,     0,     0,   727,   212,   215,   711,   712,
     713,   714,   715,   716,   719,   720,   726,     0,   708,   709,
     710,   717,   718,   706,   707,   703,   704,   705,   725,   724,
       0,     0,   770,     0,     0,     0,     0,     0,   200,     0,
       0,     0,   388,     0,   770,   177,   157,   155,   160,   156,
     166,   173,     0,   770,   770,   770,   770,     0,   174,   216,
       0,    83,   770,    87,     0,     0,   770,    99,   770,   254,
     253,   252,   770,     0,     0,   221,   417,     0,   770,   770,
     223,   224,   421,   422,   426,   423,   431,   424,   425,   427,
     428,   429,   430,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   499,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   770,   543,
     544,   545,   536,   548,   532,   533,   531,   538,   539,   527,
     528,   529,   530,   537,   535,   542,   540,   546,   541,   534,
     547,   420,     0,   230,   233,     0,   189,   770,   152,   151,
     183,   188,   187,   192,   196,   770,     0,   219,     0,   599,
     598,   600,   597,   770,   770,   198,   115,   112,     0,     0,
      65,    64,   287,   770,   770,   240,   243,   770,   770,   264,
     770,   770,   275,   770,   770,   380,   759,     0,   758,     0,
       0,   355,   357,   748,   770,     0,   693,     0,     0,     0,
       0,     0,   690,     0,   696,   697,   685,     0,   723,   722,
     390,     0,     0,    33,   201,     0,     0,     0,     0,    40,
     175,   171,   770,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   217,   556,     0,    86,
     770,     0,    93,    90,   770,   255,     0,   770,   770,     0,
       9,     0,     0,     0,   235,   770,   236,   190,   184,     0,
     770,    79,     0,   199,     0,   113,   665,   288,     0,     0,
       0,     0,   265,     0,   276,   377,     0,   360,     0,   359,
       0,   358,   749,     0,     0,     0,   750,   770,   356,     0,
       0,   695,     0,   692,     0,   721,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   563,     0,   571,   569,   568,   570,   567,     0,
       0,   566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    84,     0,    95,   770,     0,   770,   256,
      92,   222,    12,    10,   549,     0,   770,   191,   417,   114,
     770,   770,   770,   770,   770,   366,   365,   364,   363,   362,
     361,   350,     0,     0,     0,     0,    36,   770,    34,     0,
       0,    37,    39,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,   594,   580,   581,   582,   583,   584,   585,
     586,   587,   593,     0,   577,   578,   579,   575,   576,   572,
     573,   574,   592,   591,     0,     0,   770,   770,     0,   770,
      98,    11,   237,   194,     0,   770,   770,   770,   266,   277,
     688,   687,   689,   686,     0,     0,     0,     0,     0,     0,
     565,     0,     0,     0,     0,   562,     0,   557,     0,   590,
     589,    88,     0,   770,   100,   666,   302,   301,   300,   201,
       0,    28,     0,     0,    30,     0,     0,     0,   564,     0,
     588,   770,   770,    35,     0,     0,     0,     0,     0,     0,
       0,   770,    94,    38,     0,    31,   560,   559,   561,   558,
      96,     0,    32
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -937,  -937,  -313,  -937,    24,  -937,  -937,   863,  -130,  -937,
    1043,  1315,  -416,   530,  -129,  -937,  -937,  -117,  -937,  -937,
    -196,  -937,  -937,  -937,  -937,   851,  -937,  -937,  -937,  -937,
    -937,  -515,  -937,  -937,  -112,  -937,  -937,  -937,  -937,   283,
     505,  -702,  -937,  -700,  -744,  -331,  -554,  -937,   -87,  -937,
      97,  -519,  -937,  -501,  -936,  -937,  -452,   348,  -589,  -378,
    -450,  -108,   -82,   -59,   -52,  -280,  -635,   878,  1484,  -159,
    -127,  -937,  -100,  -937,  -937,  -937,  -937,  -122,   -97,  -937,
    -937,  -461,  -937,  -937,   -18,    36,  -937,  -937,  -937,  -937,
      59,    61,  -937,  -937,  -731,  -937,   -43,  -937,  -734,  -119,
     -32,   729,   951,   711,   567,  -937,  -937,   810,  -574,  1388,
     -54,  -482,    -1
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     4,     5,   937,   938,   139,   521,   140,   141,   311,
     142,   449,   296,   297,   143,   529,   523,   755,   335,   713,
     913,   349,   716,  1380,   720,   350,   935,  1486,  1557,  1142,
    1384,   583,   996,  1118,   144,   332,   704,   705,   706,   707,
     708,   756,  1295,   757,   786,  1107,   464,   465,   676,   677,
    1128,   414,   740,   527,   948,   949,   466,   679,   730,   814,
     825,   282,   283,    91,    92,   351,   182,   352,    93,   293,
      94,   646,    95,   647,   840,  1061,  1062,  1331,    96,   286,
      97,   473,   640,   641,    98,    99,   145,   695,   889,   146,
     100,   101,   102,   103,   741,   742,   943,  1281,   637,   359,
     360,  1587,   216,    65,   680,   681,   231,   232,  1332,  1333,
     626,    66,   450
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   308,   329,   331,   147,   936,   682,   712,   502,   612,
     285,  1282,  1004,   914,   643,   353,   261,   919,   636,   490,
     718,  1404,   148,   262,   411,   395,   183,   846,   773,   215,
     362,   594,   364,   365,   366,   367,   678,   369,   616,   371,
     149,   373,   354,   608,   292,   355,   412,   955,   259,   997,
     260,   264,  1000,   407,   509,   717,  -762,   389,   718,   775,
     104,   234,   772,   644,   549,  1040,  1031,   861,   397,   398,
     155,   650,   408,   407,   407,   404,   405,   150,  1104,   244,
     184,   310,   407,   550,   413,  1046,   287,   288,   289,   625,
     284,   284,   587,  1075,   151,   407,  1053,  1105,   294,   819,
     809,  1299,   407,   185,   413,   152,   820,   147,   147,   147,
    1127,   147,   147,   147,  1300,   153,   147,   831,   265,   830,
     407,  1301,   244,   147,   356,   819,   407,  -762,   147,   147,
    -762,   147,   147,   147,   923,   147,   147,   926,   927,  1302,
    1019,  1437,   268,   269,   270,  1348,   154,   361,   361,   273,
     361,   361,   361,   361,   156,   361,  1148,   361,   215,   361,
    1438,   806,   916,   930,   931,   811,   920,   719,   157,   451,
     453,   617,   353,  1405,  1149,   361,  1001,   186,   357,   440,
     441,   686,   826,   294,   682,   829,   361,   361,  -763,   290,
     244,  1002,  1003,   361,   361,   452,   454,  1143,   532,   354,
     862,   358,   355,   353,  -764,   719,   158,   353,   734,  1113,
     256,   257,   258,   259,   897,   260,  1134,   274,  -765,   275,
    1055,   276,   467,  1056,   192,   438,   291,   940,   941,   468,
     354,   415,   805,   355,   354,   800,  1032,   355,  1006,   484,
     217,   218,   219,   815,  1441,   159,   818,   251,   252,   253,
     254,   255,  1286,   256,   257,   258,  1007,   160,   912,  -763,
     284,   284,  -763,  1442,   277,  1444,    10,   871,    11,  1296,
     268,   269,   270,   273,   565,  -764,   284,   284,  -764,   161,
     469,   356,   407,   162,  1445,   518,  1036,  1037,  1470,  -765,
     163,  1309,  -765,   406,   220,   407,  1291,  1292,  1009,   147,
     147,  1533,   531,   800,  1038,   147,   221,   222,   164,   447,
     147,   448,   356,   407,  1570,   791,   356,   253,   254,   255,
       6,   256,   257,   258,   512,   628,   513,   629,   268,   630,
     911,   165,  1571,   838,   166,   357,  1139,   167,   407,  1140,
    1141,   603,   407,   223,   224,   278,   225,   605,   606,  1578,
    1033,   226,   474,   227,  1035,   323,   294,  1572,   358,   279,
    1020,  1573,   800,  1039,   280,   836,   357,   407,  1579,   281,
     357,  1615,   631,   168,  1049,   407,   169,  1050,  1051,   170,
     682,  1144,   896,  1304,   407,   407,  1589,   407,   324,   358,
    1616,   171,   361,   358,  1626,  1130,   172,  1307,   883,   884,
     885,   610,   467,  1627,  1628,   173,  1629,   174,   611,   468,
     678,   584,   175,  1131,  -101,  1389,  -101,   176,  -101,  1480,
    1481,  1482,   217,   218,   219,  1034,   596,   325,   597,   467,
     598,   187,   514,  1137,   931,  1042,   468,   188,  1043,  1044,
     287,   288,   289,   747,     1,     2,     3,   748,   604,  1115,
    1002,  1003,  1135,   632,   604,   604,   193,   826,   723,  1495,
     829,   524,   194,   525,   731,   526,   627,   633,   353,   639,
     642,   195,   634,   599,   263,   758,   220,   635,   484,   736,
     272,   737,   738,   739,   789,   147,   299,   683,   221,   222,
     749,   796,   797,     6,   314,   354,   819,  1045,   355,   801,
     315,   147,  1303,   316,   710,   807,   808,  -101,   524,  -101,
     525,  -101,  1005,   830,  1052,  1315,  1316,   732,   353,   317,
       6,  1114,   318,   467,   319,   223,   224,   328,   225,   815,
     468,   390,   818,   226,   392,   227,   474,  1002,  1003,  1293,
    1146,  1147,   750,   290,   393,   354,  1002,  1003,   355,  1385,
     803,  1002,  1003,  1381,   600,   399,   413,   804,   467,  1402,
    1423,  1424,  1425,   445,   709,   468,   470,  -279,   601,   471,
     475,   751,   486,   602,   487,   488,  1102,   356,  -280,   503,
     415,   469,   787,  1397,   505,   752,   515,   528,  1386,   516,
     753,   604,   520,   533,   582,   754,   774,  1322,   604,   604,
     407,   534,   535,   536,   537,   540,   604,   538,   539,   627,
     541,   542,   604,   604,   584,   547,   543,  1379,   544,   627,
     627,  1383,   545,   627,   415,   546,   776,   356,   548,   551,
     552,   357,   553,   554,   567,   415,   242,   243,   555,   777,
     778,   556,   858,   557,   183,     6,   841,   244,   572,   558,
     559,   560,   561,   562,   358,   779,   568,   467,  1470,   758,
     569,   467,   571,  1319,   468,   758,   573,   575,   468,   731,
     576,   579,   731,   731,  1049,  1050,  1051,   589,   914,   591,
     595,   357,   645,   147,   147,   147,   780,  1028,   615,   781,
    1029,  1030,   782,   648,     6,   758,   684,   758,   184,   687,
     758,   688,   689,   690,   358,   691,   692,   627,   783,   693,
     711,   714,   735,   759,   761,   469,   762,   767,   790,   469,
     784,   185,   732,   768,   769,   732,   732,   770,   793,  1010,
    1011,   771,   802,   147,   785,  -281,   800,  1015,   812,  1016,
     822,   944,   832,   467,   951,   834,  1042,  1043,  1044,  -371,
     468,   835,  1417,  1419,  1421,   787,   415,   183,   839,   843,
    1408,   709,   844,  1409,  1410,   845,  1411,  1564,   847,  1413,
    1116,  1117,   251,   252,   253,   254,   255,   851,   256,   257,
     258,   217,   218,   219,   852,  1477,  1478,  1479,  1119,  1480,
    1481,  1482,   890,   860,   604,   891,   892,   604,   604,   639,
     893,   894,   627,   467,   415,   415,   895,   898,   787,   900,
     468,   184,   627,   682,   901,   627,   627,   858,   639,   918,
     474,  1596,  1597,  1598,   915,   924,  1484,   917,   921,   639,
    1487,   933,   945,   953,   185,   220,   942,   147,   946,  1063,
    1022,  1012,  1505,   678,  1506,  1013,  1507,   221,   222,  1508,
    1509,  1510,  1100,  1466,  1467,  1468,  1469,  1014,  1017,  1021,
    1060,  1067,  1024,   819,   758,   830,  1470,  1057,  1622,  1069,
    1103,   731,  1074,  1490,   731,   731,   467,  1630,  1106,  1109,
    1110,  1111,  1132,   468,   223,   224,  1122,   225,     6,  1133,
    1136,  1108,   226,   931,   227,   147,  1123,  1150,   627,   147,
     758,   287,   288,   289,   618,   627,   627,  1145,   619,   627,
    1129,  1151,  1322,   415,   287,   288,   289,   904,  1312,   629,
    1283,   905,   228,  1284,   732,  1287,   229,   732,   732,  1289,
     639,   230,  1558,  1288,   469,  1298,  1306,  1305,  1313,  1314,
    1321,  1317,  1318,  1320,   758,   758,   951,  -288,  1339,  1323,
    1324,   620,  1334,    64,  1335,  1468,  1469,  1337,  1338,  1336,
     709,  1340,  1342,  1351,   906,  1343,  1470,  1352,  1353,   217,
     218,   219,  1354,  1560,  1344,  1356,  1355,  1357,  1358,  1359,
    1378,  1563,  1382,  1387,  1319,  1565,  1566,  1567,  1568,  1569,
    1388,  1475,  1476,  1477,  1478,  1479,  1394,  1480,  1481,  1482,
     183,   191,   639,  1592,   290,  1400,  1406,   196,   197,   198,
     199,   200,  1426,  1429,   235,  1430,   584,   290,   284,  1431,
    1432,  1427,  1439,   220,  1433,   604,  1434,  1436,  1440,  1391,
    1392,  1443,   621,   415,   415,   221,   222,  1470,  1446,  1447,
     627,  1591,  1448,  1449,  1594,   907,   622,  1485,  1453,  1491,
    1498,   623,  1488,  1561,   184,  1516,   624,  1492,  1517,   908,
    1493,  1496,  1499,  1500,   909,  1501,   361,  1502,  1503,   910,
    1518,  1519,   223,   224,  1504,   225,  1520,   185,  1612,  1521,
     226,  1522,   227,   467,   731,  1523,  1524,  1529,  1562,  1574,
     468,  1475,  1476,  1477,  1478,  1479,  1621,  1480,  1481,  1482,
    1577,   147,  1532,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1556,  1559,  1129,   580,  1576,  1580,  1581,  1582,   230,
    1470,  1583,  1585,   627,   627,   627,  1586,  1599,  1601,  1602,
    1593,   584,  1603,  1604,  1595,   584,  1613,   732,  1600,  1605,
    1606,   469,  1607,  1608,   403,  1609,  1624,   361,   361,  1611,
    1614,   302,   303,   304,  1623,   305,   307,   309,  1625,  1631,
     313,  1632,  1475,  1476,  1477,  1478,  1479,   320,  1480,  1481,
    1482,  1390,   326,   327,   493,   330,   333,   334,   842,   338,
     339,  1401,  1483,   472,  1120,   508,  1575,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   899,  1399,   439,
    1077,  1360,   510,  1428,   443,  1393,     0,     0,     0,     0,
       0,   581,  1403,   476,   477,   478,    70,     0,    71,    72,
      73,   758,     0,   850,     0,     0,   467,  1588,     0,  1471,
    1472,  1473,  1474,   468,   758,  1475,  1476,  1477,  1478,  1479,
     491,  1480,  1481,  1482,     0,   467,    80,   944,   467,   467,
       0,   467,   468,     0,   467,   468,   468,     0,   468,     0,
       0,   468,   267,   287,   288,   289,   724,   220,     0,   504,
     725,     0,     0,     0,     0,     0,     0,     0,     0,   221,
     222,     0,    82,    83,   683,     0,     0,     0,     0,     0,
       0,     0,   787,   284,     0,     0,   340,   341,     0,    88,
       0,     0,     0,   469,    90,     0,   469,   469,     0,   469,
       0,   467,   469,   726,   758,   467,   481,   224,   468,   225,
       0,     0,   468,     6,   226,     0,   227,     0,     0,     0,
       0,   563,  1460,   307,   313,     0,     0,   342,     0,   492,
      70,     0,    71,    72,    73,    74,     0,   577,   578,   343,
       0,   627,    77,   291,   585,     0,    78,     0,     0,     0,
       0,     0,     0,    79,     0,     0,   290,     0,     0,   469,
      80,     0,     0,   469,     0,     0,     0,   584,     0,     0,
       0,     0,     0,     0,   951,     0,    81,  1512,  1513,     0,
    1514,     0,  1515,     0,   727,     0,     0,     0,   344,     0,
       0,     0,     0,     0,     0,     0,    82,    83,   728,  1460,
       0,   638,    84,   729,     0,     0,   147,   467,     0,     0,
     345,   346,    87,    88,   468,     0,    89,     0,    90,     0,
       0,     0,     0,   347,   240,   241,   242,   243,     0,  1554,
     233,    70,     0,    71,    72,    73,     0,   244,     0,   348,
       0,   238,   239,   240,   241,   242,   243,   722,     0,     0,
       0,     0,     0,   271,     0,     0,   244,   746,     0,     0,
       0,    80,     0,     0,     0,   469,     0,   584,     0,     0,
       0,     0,     0,   298,     0,   584,     0,   267,   467,   584,
     584,   584,   584,   584,     0,   468,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,  1108,    82,    83,     0,
       0,     0,   577,   337,     0,     0,     0,     0,     0,   649,
       0,     0,     0,     0,    88,     0,     0,   788,     0,    90,
       0,     0,     0,     0,     0,   214,   792,   238,   239,   240,
     241,   242,   243,     0,     0,   584,   469,     0,   584,     0,
       0,     0,   244,     0,   787,   787,   787,     0,   391,     0,
       0,   394,     0,  1617,  1618,  1619,     0,  1620,     0,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,     0,   584,     0,   455,   456,   837,   247,   248,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     584,   787,     0,     0,     0,     0,     0,   409,   410,     0,
     787,   853,   854,   855,   856,     0,   859,     0,     0,     0,
       0,     0,     0,     0,   363,     0,     0,     0,     0,   368,
       0,   370,     0,   372,   436,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
       0,     0,     0,   446,  1464,  1465,  1466,  1467,  1468,  1469,
     396,     0,     0,     0,   400,     0,   401,   402,     0,  1470,
       0,   483,     0,   485,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   950,     0,     0,     0,
     495,     0,   496,   497,   498,   499,   500,   501,     0,     0,
       0,     0,     0,     0,     0,  1462,  1463,  1464,  1465,  1466,
    1467,  1468,  1469,     0,   511,     0,     0,   886,   887,     0,
       0,     0,  1470,   519,     0,     0,   522,  1464,  1465,  1466,
    1467,  1468,  1469,     0,   530,     0,     0,     0,     0,     0,
       0,   638,  1470,     0,     0,     0,   444,     0,     0,     0,
     592,   593,     0,     0,     0,     0,     0,     0,     0,     0,
     638,     0,     0,   607,     0,     0,     0,   613,   614,     0,
       0,   638,     0,   566,     0,     0,     0,   570,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
    1473,  1474,     0,  1073,  1475,  1476,  1477,  1478,  1479,     0,
    1480,  1481,  1482,     0,  1078,  1079,  1080,  1081,  1082,  1083,
    1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,  1092,  1093,
    1094,  1095,  1096,  1097,     0,   298,  1101,     0,  1377,     0,
       0,     0,     0,     0,     0,     0,     0,   298,     0,     0,
       0,  1471,  1472,  1473,  1474,     0,  1376,  1475,  1476,  1477,
    1478,  1479,     0,  1480,  1481,  1482,     0,   298,     0,     0,
       0,     0,  1472,  1473,  1474,   298,   564,  1475,  1476,  1477,
    1478,  1479,   638,  1480,  1481,  1482,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   950,     0,
     651,   652,   653,    10,     0,    11,   654,   655,     0,     0,
       0,     0,   848,   795,     0,     0,   798,   799,     0,     0,
     760,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   813,     0,     0,   816,   817,     0,
       0,   821,     0,   330,     0,   824,     0,   657,   827,   828,
       0,     0,  1294,     0,   638,     0,  1297,     0,     0,   658,
       0,     0,     0,     0,   659,     0,     0,     0,   409,     0,
       0,     0,   660,   661,   236,   237,   238,   239,   240,   241,
     242,   243,     0,     0,     0,   794,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,   715,     0,     0,
       0,     0,     0,     0,   733,     0,   662,  1325,   663,     0,
     664,     0,     0,     0,     0,   665,     0,   823,     0,   666,
       0,     0,   667,     0,     0,  1346,     0,   668,   833,     0,
     669,   763,     0,   764,     0,   765,   298,     0,     0,     0,
     925,     0,     0,   928,   929,     0,   932,     0,     0,     0,
       0,     0,   670,     0,     0,   671,   672,     0,     0,     0,
     673,     0,   849,   954,     0,     0,   675,   998,   999,     0,
       0,     0,     0,  1008,     0,     0,     0,     0,  1377,     0,
    1377,  1377,  1377,  1377,  1377,     0,  1377,     0,     0,     0,
       0,     0,     0,     0,   903,     0,  1452,     0,  1454,  1455,
    1456,  1457,  1458,     0,  1461,  1023,     0,     0,  1026,  1027,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,     0,   939,  1041,   588,     0,
       0,     0,     0,     0,     0,     0,     0,  1047,  1048,     0,
       0,     0,     0,     0,     0,     0,     0,  1054,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   857,     0,
       0,     0,     0,     0,   298,     0,     0,     0,     0,     0,
       0,     0,     0,  1377,  1377,  1377,  1377,  1377,  1377,  1377,
    1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,  1377,
    1377,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,
    1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,     0,
       0,     0,     0,     0,     0,   956,     0,     0,     0,     0,
    1124,     0,     0,  1125,  1126,   957,   958,   959,   960,   961,
     962,   963,   964,     0,     0,  1396,     0,     0,     0,  1138,
       0,     0,   965,  1377,   966,   967,   968,   969,   970,   971,
     972,   973,   974,   975,   976,   977,     0,     0,  1464,  1465,
    1466,  1467,  1468,  1469,     0,     0,     0,     0,  1285,     0,
       0,  1098,     0,  1470,   978,   236,   237,   238,   239,   240,
     241,   242,   243,     0,     0,     0,     0,     0,     0,     0,
    1121,     0,   244,  1346,     0,     0,  1377,     0,  1435,  1377,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1290,     0,     0,     0,     0,     0,  1610,   979,     0,
       0,     0,     0,     0,     0,     0,     0,  1064,  1065,  1066,
       0,  1068,     0,  1070,     0,  1071,  1072,     0,     0,  1310,
    1311,     0,     0,     0,     0,     0,   950,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   980,     0,     0,
     981,     0,   982,   983,   984,   985,   986,   987,   988,   989,
     990,   991,   992,     0,   993,   994,     0,     0,   995,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     7,     8,
       9,    10,     0,    11,    12,    13,   201,    68,  1475,  1476,
    1477,  1478,  1479,     0,  1480,  1481,  1482,     0,     0,  1308,
       0,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,     0,     0,     0,  1349,
       0,     0,     0,  1555,     0,    15,    69,     0,  1362,   202,
       0,   203,   204,   205,    74,    75,     0,    20,    76,     0,
       0,   206,    22,     0,     0,    78,     0,  1341,     0,     0,
      23,    24,   207,   476,   477,   478,    26,     0,     0,   208,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,   209,     0,     0,     0,     0,
       0,     0,     0,   774,    44,     0,    45,     0,    46,     0,
     479,     0,   480,    47,     0,   210,   211,    50,     0,   775,
      51,    84,     0,     0,     0,    52,     0,   220,    53,    85,
      86,    87,   212,   776,     0,    89,     0,   213,     0,   221,
     222,     0,     0,     0,     0,   939,   777,   778,     0,     0,
      56,     0,     0,    57,    58,    59,     0,     0,    60,     0,
      61,    62,   779,     0,    63,   217,   218,   219,     0,     0,
       0,     0,     0,     0,     0,     0,   481,   224,    70,   225,
      71,    72,    73,     0,   226,     0,   227,     0,     0,     0,
     266,     0,     0,   780,     0,     0,   781,     0,     0,   782,
       0,     0,     0,     0,     0,     0,     0,     0,    80,     0,
     482,     0,  1398,     0,     0,   783,  1361,     0,     0,   220,
       0,     0,     0,     0,   267,     0,     0,   784,     0,     0,
       0,   221,   222,     0,     0,     0,     0,     0,  1407,     0,
       0,   785,     0,     0,    82,    83,  1412,     0,     0,  1414,
       7,     8,     9,    10,     0,    11,    12,    13,   489,     0,
       0,    88,     0,     0,     0,     0,    90,     0,   223,   224,
       0,   225,     0,     0,     0,     0,   226,     0,   227,     0,
       0,     0,   236,   237,   238,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,    15,   342,   244,
       0,   202,   321,   203,   204,   205,    74,     0,     0,    20,
     343,     0,  1489,   206,    22,     0,     0,    78,     0,     0,
       0,     0,    23,    24,   207,  1497,     0,  1422,    26,     0,
       0,   208,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   209,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,    45,     0,
      46,     0,     0,     0,     0,    47,     0,   210,   211,    50,
       0,     0,    51,    84,     0,     0,     0,    52,     0,     0,
      53,   345,   346,    87,   212,     0,     0,    89,     0,   213,
       0,     0,     0,   340,   341,     0,     0,     0,     0,     0,
       0,     0,    56,     0,   306,    57,    58,    59,     0,     0,
      60,     0,    61,    62,     0,     0,    63,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,     0,   342,     0,  1590,    70,     0,    71,
      72,    73,    74,     0,     0,   105,   343,   106,     0,    77,
       0,   108,     0,    78,     0,     0,     0,     0,   109,   110,
      79,     0,     0,     0,     0,     0,     0,    80,  1459,   112,
     300,   114,     0,     0,     0,     0,     0,     0,  1552,     0,
       0,   301,     0,    81,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   344,   238,   239,   240,   241,
     242,   243,     0,    82,    83,   124,     0,     0,     0,    84,
       0,   244,     0,     0,     0,   129,     0,   345,   346,    87,
      88,   130,     0,    89,     0,    90,   133,  1584,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   136,     0,   137,
    1525,  1526,  1527,  1528,     0,  1530,   348,  1531,  1152,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,     0,
    1163,  1164,  1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,
    1173,     0,     0,     0,     0,     0,     0,     0,  1174,  1175,
    1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,
    1186,  1187,  1188,  1189,  1190,  1191,  1192,     0,     0,  1193,
    1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
    1204,  1205,  1206,  1207,     0,  1208,     0,  1209,  1210,  1211,
    1212,  1213,  1214,  1215,  1216,  1217,     0,  1218,  1219,  1220,
       0,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,  1221,     0,     0,     0,     0,
       0,     0,  1222,  1223,  1224,     0,  1225,  1226,  1227,  1228,
    1229,  1230,  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,
    1239,  1240,  1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,
    1249,  1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,     0,
       0,     0,  1258,  1259,  1260,  1261,  1262,  1263,  1264,  1265,
    1266,  1267,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,
    1276,  1277,  1278,  1494,  1279,  1280,  1152,  1153,  1154,  1155,
    1156,  1157,  1158,  1159,  1160,  1161,  1162,     0,  1163,  1164,
    1165,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,     0,
       0,     0,     0,     0,     0,     0,  1174,  1175,  1176,  1177,
    1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,
    1188,  1189,  1190,  1191,  1192,     0,     0,  1193,  1194,  1195,
    1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,  1205,
    1206,  1207,     0,  1208,     0,  1209,  1210,  1211,  1212,  1213,
    1214,  1215,  1216,  1217,     0,  1218,  1219,  1220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1221,     0,     0,     0,     0,     0,     0,
    1222,  1223,  1224,     0,  1225,  1226,  1227,  1228,  1229,  1230,
    1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  1239,  1240,
    1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  1249,  1250,
    1251,  1252,  1253,  1254,  1255,  1256,  1257,     0,     0,     0,
    1258,  1259,  1260,  1261,  1262,  1263,  1264,  1265,  1266,  1267,
    1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,
    1278,     0,  1279,  1280,     7,     8,     9,    10,     0,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   236,   237,   238,   239,   240,
     241,   242,   243,     0,     0,     0,     0,     0,     0,     0,
       0,    15,   244,     0,     0,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,   743,   744,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,   745,     0,
       0,   189,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,     0,   586,
      63,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,    15,     0,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,   190,    62,     0,     0,    63,   237,   238,   239,   240,
     241,   242,   243,     0,     0,     0,     0,     0,     0,     0,
       0,    15,   244,     0,     0,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,   437,     0,
      63,     0,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,    15,   442,     0,     0,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,     0,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,     0,     0,   236,
     237,   238,   239,   240,   241,   242,   243,     0,     0,     0,
       0,    15,   721,     0,     0,    16,   244,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,     0,     0,
      63,     0,   952,     0,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,    15,   256,   257,   258,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,   947,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,     0,     0,   236,
     237,   238,   239,   240,   241,   242,   243,     0,     0,     0,
       0,    15,     0,     0,     0,    16,   244,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,  1099,     0,
      63,     0,     0,  1347,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,    15,   256,   257,   258,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
       0,     0,     0,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,     7,     8,     9,    10,    55,    11,
      12,    13,    14,  1395,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,     0,    63,     0,     0,     0,   236,
     237,   238,   239,   240,   241,   242,   243,     0,     0,     0,
       0,    15,     0,     0,     0,    16,   244,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,     0,     0,     0,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,     7,
       8,     9,    10,    55,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,    57,
      58,    59,     0,     0,    60,     0,    61,    62,  1553,     0,
      63,  1415,     0,     0,     0,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,    15,   256,   257,   258,
      16,     0,    17,    18,    19,     0,     0,     0,    20,     0,
       0,     0,    21,    22,     0,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,     0,     0,    26,     0,     0,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,    45,     0,    46,
     217,   218,   219,     0,    47,     0,    48,    49,    50,     0,
       0,    51,     0,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,    54,   651,   652,   653,    10,    55,    11,
     654,   655,    67,    68,     0,     0,   656,     0,     0,     0,
       0,    56,     0,     0,    57,    58,    59,     0,     0,    60,
       0,    61,    62,     0,   220,    63,   236,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   221,   222,   459,     0,
       0,   657,    69,   244,     0,    70,     0,    71,    72,    73,
      74,   460,     0,   658,    76,     0,     0,    77,   659,     0,
       0,    78,     0,     0,     0,     0,   660,   661,    79,     0,
       0,     0,     0,   223,   224,    80,   225,     0,     0,     0,
       0,   226,     0,   227,     0,     0,     0,     0,     0,     0,
       0,    81,     0,     0,     0,     0,     0,     0,     0,     0,
     662,     0,   663,     0,   664,     0,     0,   494,   461,   665,
       0,    82,    83,   666,     0,     0,   667,    84,     0,     0,
       0,   668,     0,     0,   669,    85,    86,    87,    88,     0,
       0,    89,     0,    90,     7,     8,     9,    10,     0,    11,
      12,    13,    14,     0,     0,     0,   670,     0,     0,   671,
     672,     0,     0,     0,   673,     0,   674,     0,   696,     0,
     675,     0,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   697,     0,     0,
       0,    15,     0,     0,     0,    16,     0,    17,    18,    19,
       0,     0,     0,    20,     0,     0,     0,    21,    22,     0,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
       0,     0,    26,     0,     0,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,    45,     0,    46,   217,   218,   219,     0,    47,
       0,    48,    49,    50,     0,     0,    51,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,     0,    54,   651,
     652,   653,    10,    55,    11,   654,   655,    67,    68,     0,
       0,  1076,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    60,     0,    61,    62,     0,   220,
      63,   236,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   221,   222,   459,     0,     0,   657,    69,   244,     0,
      70,     0,    71,    72,    73,    74,   460,     0,   658,    76,
       0,     0,    77,   659,     0,     0,    78,     0,     0,     0,
       0,   660,   661,    79,     0,     0,     0,     0,   223,   224,
      80,   225,     0,     0,     0,     0,   226,     0,   227,     0,
     217,   218,   219,     0,     0,     0,    81,     0,     0,  1329,
       0,     0,     0,     0,  1416,   662,     0,   663,     0,   664,
       0,     0,     0,   461,   665,     0,    82,    83,   666,     0,
       0,   667,    84,     0,     0,     0,   668,     0,     0,   669,
      85,    86,    87,    88,     0,     0,    89,     0,    90,     0,
       7,     8,     9,    10,   220,    11,    12,    13,     0,     0,
       0,   670,  1450,     0,   671,   672,   221,   222,     0,   673,
       0,   674,     0,     0,     0,   675,     0,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,   574,     0,     0,     0,     0,  1363,     0,     0,
       0,     0,     0,   223,  1326,  1327,  1328,     0,     0,  1364,
       0,   226,     0,   227,  1365,     0,     0,     0,     0,     0,
       0,     0,    23,    24,  1329,     0,     0,     0,    26,  1330,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,     0,     0,     0,
       7,     8,     9,    10,     0,    11,    12,    13,    45,     0,
      46,     0,     0,     0,     0,  1366,     0,     0,     0,  1367,
       0,     0,  1368,     0,     0,     0,     0,    52,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1363,     0,     0,
       0,     0,  1369,     0,     0,  1370,  1371,  1372,     0,  1364,
    1373,     0,  1451,    62,  1365,     0,  1375,     0,     0,     0,
       0,     0,    23,    24,     0,     0,     0,     0,    26,     0,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,     0,     0,     0,
       7,     8,     9,    10,     0,    11,    12,    13,    45,     0,
      46,     0,     0,     0,     0,  1366,     0,     0,     0,  1367,
       0,     0,  1368,     0,     0,     0,     0,    52,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1363,     0,     0,
       0,     0,  1369,     0,     0,  1370,  1371,  1372,     0,  1364,
    1373,     0,  1374,    62,  1365,     0,  1375,     0,     0,     0,
       0,     0,    23,    24,     0,     0,     0,     0,    26,     0,
       0,     0,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,   506,   507,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,
      46,     0,     0,     0,     0,  1366,     0,     0,     0,  1367,
       0,     0,  1368,     0,     0,     0,     0,    52,     0,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   342,     0,
       0,    70,     0,    71,    72,    73,    74,   244,     0,     0,
     343,     0,     0,    77,     0,     0,     0,    78,     0,     0,
    1373,     0,  1374,    62,    79,     0,  1375,     0,     0,     0,
       0,    80,   236,   237,   238,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,    81,     0,   244,
       0,   217,   218,   219,     0,     0,     0,     0,     0,   344,
       0,     0,     0,     0,     0,     0,     0,    82,    83,     0,
       0,     0,     0,    84,     0,     0,     0,     0,     0,     0,
       0,   345,   346,    87,    88,     0,     0,    89,     0,    90,
     236,   237,   238,   239,   240,   241,   242,   243,     0,     0,
       0,     0,     0,     0,     0,   220,     0,   244,     0,     0,
     348,     0,     0,     0,     0,     0,     0,   221,   222,     0,
       0,     0,     0,     0,     0,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   590,   236,   237,   238,   239,   240,   241,   242,   243,
       0,     0,     0,     0,   223,   224,     0,   225,     0,   244,
       0,     0,   226,     0,   227,     0,     0,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   295,
     256,   257,   258,   685,   236,   237,   238,   239,   240,   241,
     242,   243,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,   236,   237,   238,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   766,   236,   237,   238,   239,   240,   241,   242,   243,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
     236,   237,   238,   239,   240,   241,   242,   243,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   922,   863,   864,   865,   866,   867,   868,
     869,   870,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   871,     0,     0,     0,     0,     0,     0,     0,     0,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,  1025,     0,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,  1058,     0,  1463,  1464,  1465,  1466,  1467,
    1468,  1469,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1470,     0,     0,     0,     0,     0,     0,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,  1345,     0,     0,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,    -2,   256,   257,
     258,   238,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   244,     0,     0,     0,
     872,   873,   874,   875,   876,   877,   878,   879,   880,   881,
     882,     0,   883,   884,   885,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   105,     0,   106,     0,     0,   107,
     108,     0,     0,     0,     0,     0,     0,   109,   110,  1464,
    1465,  1466,  1467,  1468,  1469,     0,   111,     0,   112,   113,
     114,   115,     0,     0,  1470,   116,     0,     0,     0,     0,
     117,  1472,  1473,  1474,     0,     0,  1475,  1476,  1477,  1478,
    1479,     0,  1480,  1481,  1482,     0,     0,     0,   118,   119,
     120,   121,   122,   123,   124,   125,   217,   218,   219,     0,
       0,   126,   127,   128,   129,     0,     0,     0,     0,     0,
     130,   131,    67,    68,   132,   133,   457,     0,   458,   134,
       0,     0,     0,     0,     0,   135,   136,     0,   137,   249,
     250,   251,   252,   253,   254,   255,   138,   256,   257,   258,
       0,     0,     0,     0,     0,     0,     0,     0,   459,     0,
     220,     0,    69,     0,     0,    70,     0,    71,    72,    73,
      74,   460,   221,   222,    76,   306,     0,    77,     0,     0,
       0,    78,     0,     0,     0,     0,     0,     0,    79,     0,
       0,     0,     0,     0,     0,    80,  1474,     0,     0,  1475,
    1476,  1477,  1478,  1479,   336,  1480,  1481,  1482,     0,   223,
     224,    81,   225,   698,   699,   700,   105,   226,   106,   227,
       0,     0,   108,   217,   218,   219,     0,     0,   461,   109,
     110,    82,    83,     0,     0,     0,     0,    84,     0,     0,
     112,   113,   114,     0,     0,    85,    86,    87,    88,     0,
       0,    89,   301,    90,     0,     0,     0,    70,     0,    71,
      72,    73,   701,   702,     0,     0,   462,     0,     0,    77,
       0,   463,   698,   699,   700,     0,   124,   220,     0,     0,
      79,     0,     0,     0,     0,     0,   129,    80,     0,   221,
     222,     0,   130,     0,     0,     0,   132,   133,     0,     0,
       0,     0,    70,    81,    71,    72,    73,     0,   136,     0,
     137,    67,    68,     0,   266,   457,    70,     0,    71,    72,
      73,     0,     0,    82,    83,     0,   223,   224,    77,   225,
       0,     0,    80,     0,   226,     0,   227,   703,     0,    79,
      88,     0,     0,    89,     0,    90,    80,   459,   267,     0,
       0,    69,     0,     0,    70,     0,    71,    72,    73,    74,
     460,     0,    81,    76,     0,     0,    77,     0,    82,    83,
      78,     0,     0,     0,     0,     0,     0,    79,     0,     0,
       0,     0,    82,    83,    80,    88,     0,     0,     0,     0,
      90,     0,    70,     0,    71,    72,    73,     0,     0,    88,
      81,     0,    89,     0,    90,    67,    68,     0,     0,   810,
       0,     0,     0,   176,     0,     0,     0,   461,     0,     0,
      82,    83,    80,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,    85,    86,    87,    88,   267,     0,
      89,   459,    90,    67,    68,    69,     0,     0,    70,     0,
      71,    72,    73,    74,   460,     0,     0,    76,    82,    83,
      77,     0,     0,     0,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,     0,    88,     0,     0,    80,   459,
      90,     0,     0,    69,     0,     0,    70,     0,    71,    72,
      73,    74,   460,     0,    81,    76,     0,     0,    77,     0,
       0,     0,    78,   187,     0,     0,     0,     0,     0,    79,
       0,   461,     0,     0,    82,    83,    80,     0,     0,     0,
      84,     0,     0,     0,     0,     0,     0,     0,    85,    86,
      87,    88,    81,     0,    89,     0,    90,    67,    68,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   461,
       0,     0,    82,    83,     0,     0,     0,     0,    84,     0,
       0,    67,    68,     0,     0,     0,    85,    86,    87,    88,
       0,     0,    89,     0,    90,     0,     0,    69,     0,     0,
      70,     0,    71,    72,    73,    74,    75,     0,     0,    76,
       0,     0,    77,     0,     0,     0,    78,     0,     0,     0,
       0,    69,     0,    79,    70,     0,    71,    72,    73,    74,
      80,     0,     0,    76,     0,     0,    77,     0,     0,     0,
      78,     0,     0,     0,     0,     0,    81,    79,     0,     0,
       0,     0,     0,     0,    80,   217,   218,   219,     0,     0,
       0,     0,     0,     0,     0,     0,    82,    83,    67,    68,
      81,     0,    84,     0,     0,     0,     0,     0,     0,     0,
      85,    86,    87,    88,     0,     0,    89,   609,    90,     0,
      82,    83,     0,     0,     0,     0,    84,    67,     0,     0,
       0,     0,     0,     0,    85,    86,    87,    88,    69,   220,
      89,    70,    90,    71,    72,    73,    74,     0,     0,     0,
      76,   221,   222,    77,     0,     0,     0,    78,     0,     0,
       0,     0,     0,     0,    79,     0,     0,    69,     0,     0,
      70,    80,    71,    72,    73,    74,   517,     0,     0,    76,
       0,     0,    77,     0,     0,     0,    78,    81,   223,   224,
       0,   225,     0,    79,     0,     0,   226,     0,   227,     0,
      80,     0,     0,     0,     0,     0,     0,    82,    83,  1329,
       0,     0,     0,    84,   177,     0,    81,     0,     0,     0,
       0,    85,    86,    87,    88,     0,     0,    89,     0,    90,
       0,     0,     0,     0,     0,     0,    82,    83,   177,     0,
       0,     0,    84,     0,     0,     0,     0,     0,     0,     0,
      85,    86,    87,    88,   178,     0,    89,    70,    90,    71,
      72,    73,    74,  1018,     0,     0,   179,     0,     0,    77,
       0,     0,     0,    78,     0,     0,     0,     0,   178,     0,
      79,    70,     0,    71,    72,    73,    74,    80,     0,     0,
     179,     0,     0,    77,     0,     0,     0,    78,     0,     0,
       0,     0,     0,    81,    79,     0,     0,     0,     0,     0,
       0,    80,   217,   218,   219,     0,     0,     0,     0,     0,
       0,     0,     0,    82,    83,    67,     0,    81,     0,    84,
       0,     0,     0,     0,     0,     0,     0,   180,   181,    87,
      88,     0,     0,    89,     0,    90,     0,    82,    83,     0,
       0,     0,     0,    84,   217,   218,   219,     0,     0,     0,
       0,   180,   181,    87,    88,    69,   220,    89,    70,    90,
      71,    72,    73,    74,     0,     0,     0,    76,   221,   222,
      77,     0,     0,     0,    78,     0,     0,     0,     0,     0,
       0,    79,     0,     0,     0,     0,     0,     0,    80,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   220,     0,
       0,     0,     0,     0,    81,   223,   224,     0,   225,     0,
     221,   222,     0,   226,     0,   227,     0,     0,     0,    70,
       0,    71,    72,    73,    82,    83,  1329,     0,     0,     0,
      84,  1418,     0,     0,     0,     0,     0,     0,    85,    86,
      87,    88,     0,     0,    89,     0,    90,   223,   224,    80,
     225,     0,     0,     0,     0,   226,   105,   227,   106,     0,
       0,   107,   108,     0,     0,   267,     0,     0,  1329,   109,
     110,     0,     0,  1420,     0,     0,     0,     0,   111,     0,
     112,   113,   114,   115,     0,    82,    83,   116,     0,     0,
       0,     0,   117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    88,     0,     0,     0,     0,    90,     0,     0,
     118,   119,   120,   121,   122,   123,   124,   125,     0,     0,
       0,     0,     0,   126,   127,   128,   129,     0,     0,   105,
     188,   106,   130,   131,   107,   108,   132,   133,     0,     0,
       0,   134,   109,   110,     0,     0,     0,   135,   136,     0,
     137,   111,     0,   112,   113,   114,   115,     0,   138,     0,
     116,     0,     0,     0,     0,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   694,     0,     0,
       0,     0,     0,   118,   119,   120,   121,   122,   123,   124,
     125,     0,     0,     0,     0,     0,   126,   127,   128,   129,
       0,     0,   105,     0,   106,   130,   131,   107,   108,   132,
     133,     0,     0,     0,   134,   109,   110,     0,     0,     0,
     135,   136,     0,   137,   111,     0,   112,   113,   114,   115,
       0,   138,     0,   116,     0,     0,     0,     0,   117,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     888,     0,     0,     0,     0,     0,   118,   119,   120,   121,
     122,   123,   124,   125,     0,     0,     0,     0,     0,   126,
     127,   128,   129,     0,     0,   105,     0,   106,   130,   131,
     107,   108,   132,   133,     0,     0,     0,   134,   109,   110,
       0,     0,     0,   135,   136,     0,   137,   111,     0,   112,
     113,   114,   115,     0,   138,     0,   116,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   934,     0,     0,     0,     0,     0,   118,
     119,   120,   121,   122,   123,   124,   125,     0,     0,     0,
       0,     0,   126,   127,   128,   129,     0,     0,   105,     0,
     106,   130,   131,   107,   108,   132,   133,     0,     0,     0,
     134,   109,   110,     0,     0,     0,   135,   136,     0,   137,
     111,     0,   112,   113,   114,   115,     0,   138,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1059,     0,     0,     0,
       0,     0,   118,   119,   120,   121,   122,   123,   124,   125,
       0,     0,     0,     0,     0,   126,   127,   128,   129,     0,
       0,   105,     0,   106,   130,   131,   107,   108,   132,   133,
       0,     0,     0,   134,   109,   110,     0,     0,     0,   135,
     136,     0,   137,   111,     0,   112,   113,   114,   115,     0,
     138,     0,   116,     0,     0,     0,     0,   117,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1112,
       0,     0,     0,     0,     0,   118,   119,   120,   121,   122,
     123,   124,   125,     0,     0,     0,     0,     0,   126,   127,
     128,   129,     0,     0,   105,     0,   106,   130,   131,   107,
     108,   132,   133,     0,     0,     0,   134,   109,   110,     0,
       0,     0,   135,   136,     0,   137,   111,     0,   112,   113,
     114,   115,     0,   138,     0,   116,     0,     0,     0,     0,
     117,     0,     0,   217,   218,   219,     0,     0,   902,   217,
     218,   219,  1350,    70,     0,    71,    72,    73,   118,   119,
     120,   121,   122,   123,   124,   125,     0,     0,     0,     0,
       0,   126,   127,   128,   129,     0,     0,     0,     0,     0,
     130,   131,     0,    80,   132,   133,   479,     0,   480,   134,
       0,     0,     0,     0,     0,   135,   136,   220,   137,   267,
       0,     0,     0,   220,     0,     0,   138,     0,     0,   221,
     222,     0,     0,     0,     0,   221,   222,     0,     0,    82,
      83,     0,     0,     0,     0,  1511,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
       0,    90,     0,     0,     0,     0,   223,   224,     0,   225,
       0,     0,   223,   224,   226,   225,   227,   105,     0,   106,
     226,     0,   227,   108,   194,     0,   105,     0,   106,     0,
     109,   110,   108,     0,     0,     0,     0,     0,     0,   109,
     110,   112,   300,   114,     0,     0,     0,     0,   116,     0,
     112,   113,   114,   301,     0,     0,     0,   116,     0,     0,
       0,     0,   301,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   129,     0,     0,
       0,     0,     0,   130,     0,     0,   129,     0,   133,     0,
       0,     0,   130,     0,     0,     0,   132,   133,   135,   136,
     105,   137,   106,     0,     0,   107,   108,   135,   136,     0,
     137,     0,     0,   109,   110,     0,  -159,     0,     0,     0,
       0,     0,   111,     0,   112,   113,   114,   115,     0,     0,
       0,   116,     0,     0,     0,     0,   117,     0,   105,     0,
     106,     0,     0,     0,   108,     0,     0,     0,     0,     0,
       0,   109,   110,     0,   118,   119,   120,   121,   122,   123,
     124,   125,   112,   300,   114,     0,     0,   126,   127,   128,
     129,     0,     0,     0,   301,     0,   130,   131,     0,     0,
     132,   133,     0,     0,     0,   134,     0,   105,     0,   106,
       0,   135,   136,   108,   137,     0,     0,     0,   124,   312,
     109,   110,     0,     0,     0,     0,     0,     0,   129,     0,
       0,   112,   300,   114,   130,     0,     0,     0,     0,   133,
       0,     0,     0,   301,     0,     0,     0,     0,     0,     0,
     136,     0,   137,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   129,     0,     0,
       0,     0,     0,   130,     0,     0,     0,     0,   133,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
       0,   137
};

static const yytype_int16 yycheck[] =
{
       1,   113,   132,   132,     5,   736,   488,   508,   321,   461,
      92,   947,   756,   713,   475,   142,    75,   719,   468,   299,
      13,    15,   147,    75,   148,   184,    44,   662,   582,    61,
     149,   447,   151,   152,   153,   154,   488,   156,    15,   158,
     165,   160,   142,   459,    98,   142,   170,   749,     6,   751,
       8,    59,   754,   148,   334,    10,    76,   176,    13,    33,
       0,    62,   581,   479,   148,   809,   800,    15,   187,   188,
     156,   487,   167,   148,   148,   194,   195,   165,   148,    33,
      44,   150,   148,   167,   151,   819,    10,    11,    12,   467,
      91,    92,   167,   167,   165,   148,   830,   167,    99,   166,
     615,   167,   148,    44,   151,   165,   625,   108,   109,   110,
     151,   112,   113,   114,   167,   165,   117,   636,   126,   166,
     148,   167,    33,   124,   142,   166,   148,   147,   129,   130,
     150,   132,   133,   134,   723,   136,   137,   726,   727,   167,
     775,   148,    81,    82,    83,   167,   165,   148,   149,    88,
     151,   152,   153,   154,   165,   156,   147,   158,   190,   160,
     167,   611,   716,   165,   166,   617,   720,   160,   156,   277,
     278,   148,   299,   167,   165,   176,   150,   156,   142,   261,
     262,   494,   632,   184,   666,   635,   187,   188,    76,   113,
      33,   165,   166,   194,   195,   277,   278,   931,   357,   299,
     148,   142,   299,   330,    76,   160,   165,   334,   521,   167,
     164,   165,   166,     6,   696,     8,   918,    13,    76,    15,
     148,    17,   281,   151,   156,   257,   150,    64,    65,   281,
     330,   232,   610,   330,   334,   166,   167,   334,   757,   293,
      10,    11,    12,   621,   148,   165,   624,   158,   159,   160,
     161,   162,   954,   164,   165,   166,   757,   165,   708,   147,
     261,   262,   150,   167,    60,   148,     6,    33,     8,  1003,
     209,   210,   211,   212,   393,   147,   277,   278,   150,   165,
     281,   299,   148,   165,   167,   344,   805,   806,    33,   147,
     165,  1022,   150,   167,    64,   148,   998,   999,   759,   300,
     301,   167,   356,   166,   167,   306,    76,    77,   165,    47,
     311,    49,   330,   148,   167,   595,   334,   160,   161,   162,
     321,   164,   165,   166,   149,    13,   151,    15,   267,    17,
     708,   165,   167,   646,   165,   299,   925,   165,   148,   928,
     929,   449,   148,   113,   114,   141,   116,   455,   456,   148,
     802,   121,   291,   123,   804,   150,   357,   167,   299,   155,
     776,   167,   166,   167,   160,   645,   330,   148,   167,   165,
     334,   148,    60,   165,   824,   148,   165,   827,   828,   165,
     862,   935,   695,  1018,   148,   148,   167,   148,   150,   330,
     167,   165,   393,   334,   167,   914,   165,   167,   164,   165,
     166,   460,   461,   167,   167,   165,   167,   165,   460,   461,
     862,   412,   165,   914,   147,  1146,   149,   165,   151,   164,
     165,   166,    10,    11,    12,   803,    13,   150,    15,   488,
      17,   165,   165,   165,   166,   813,   488,   165,   816,   817,
      10,    11,    12,    13,   144,   145,   146,    17,   449,   899,
     165,   166,   167,   141,   455,   456,   165,   907,   517,  1395,
     910,   147,   165,   149,   518,   151,   467,   155,   595,   470,
     471,   165,   160,    60,   165,   529,    64,   165,   532,   147,
     165,   149,   150,   151,   592,   486,   165,   488,    76,    77,
      60,   599,   600,   494,   165,   595,   166,   167,   595,   607,
     165,   502,  1017,   165,   505,   613,   614,   147,   147,   149,
     149,   151,   151,   166,   167,  1034,  1035,   518,   645,   165,
     521,   899,   165,   582,   165,   113,   114,   165,   116,   907,
     582,   165,   910,   121,   165,   123,   475,   165,   166,   167,
     147,   148,   112,   113,   165,   645,   165,   166,   645,  1138,
     609,   165,   166,   167,   141,   165,   151,   609,   617,  1303,
     114,   115,   116,   160,   505,   617,   166,   166,   155,   147,
     150,   141,    48,   160,   148,   165,   889,   595,   166,   147,
     581,   582,   583,  1285,   156,   155,   165,   149,  1142,   165,
     160,   592,   165,   168,   165,   165,    17,  1047,   599,   600,
     148,   167,   167,   167,   167,   157,   607,   167,   167,   610,
     167,   157,   613,   614,   615,   148,   167,  1132,   167,   620,
     621,  1136,   167,   624,   625,   167,    47,   645,   167,   148,
     167,   595,   167,   167,   157,   636,    22,    23,   167,    60,
      61,   167,   674,   167,   662,   646,   647,    33,   157,   167,
     167,   167,   167,   167,   595,    76,   167,   716,    33,   713,
     167,   720,   167,  1041,   716,   719,   167,   167,   720,   723,
     167,    15,   726,   727,  1124,  1125,  1126,   167,  1378,   167,
     165,   645,   165,   684,   685,   686,   107,   795,   167,   110,
     798,   799,   113,   150,   695,   749,   167,   751,   662,   147,
     754,   148,   148,   148,   645,   148,   148,   708,   129,   148,
     165,   149,   165,   150,   165,   716,   165,   167,    48,   720,
     141,   662,   723,   167,   165,   726,   727,   167,   160,   761,
     762,   165,    48,   734,   155,   166,   166,   769,   160,   771,
     160,   742,   170,   802,   745,   168,  1124,  1125,  1126,   147,
     802,    48,  1326,  1327,  1328,   756,   757,   775,    76,   165,
    1314,   702,   156,  1317,  1318,   156,  1320,  1498,   156,  1323,
     900,   900,   158,   159,   160,   161,   162,   156,   164,   165,
     166,    10,    11,    12,   165,   160,   161,   162,   900,   164,
     165,   166,    10,   167,   795,    10,    10,   798,   799,   800,
      10,    10,   803,   862,   805,   806,    10,   149,   809,   157,
     862,   775,   813,  1295,   148,   816,   817,   849,   819,   160,
     759,  1565,  1566,  1567,   149,   160,  1380,   167,   167,   830,
    1384,   167,   149,   160,   775,    64,   168,   838,   149,   840,
     147,   167,  1416,  1295,  1418,   167,  1420,    76,    77,  1423,
    1424,  1425,   884,    20,    21,    22,    23,   167,   167,   165,
     150,   165,   167,   166,   918,   166,    33,   167,  1612,   165,
     148,   925,   167,  1388,   928,   929,   935,  1621,   148,   148,
     148,   148,   167,   935,   113,   114,   151,   116,   889,   165,
     167,   892,   121,   166,   123,   896,   160,   149,   899,   900,
     954,    10,    11,    12,    13,   906,   907,   168,    17,   910,
     911,   149,  1362,   914,    10,    11,    12,    13,  1026,    15,
     168,    17,   151,   148,   925,    10,   155,   928,   929,   170,
     931,   160,  1486,   167,   935,   148,    48,  1019,   170,   165,
     170,   165,   165,   165,   998,   999,   947,   166,  1067,   165,
     170,    60,   147,     2,   148,    22,    23,   157,   157,   167,
     901,   157,   167,    10,    60,   157,    33,    10,   149,    10,
      11,    12,    10,  1488,   167,    10,   167,    10,    10,   149,
     148,  1496,   165,   170,  1362,  1500,  1501,  1502,  1503,  1504,
     167,   158,   159,   160,   161,   162,   168,   164,   165,   166,
    1018,    50,  1003,  1557,   113,   170,   168,    56,    57,    58,
      59,    60,    15,   165,    63,   165,  1017,   113,  1019,   167,
     165,  1334,   148,    64,   167,  1026,   165,   167,   149,  1148,
    1149,   167,   141,  1034,  1035,    76,    77,    33,   165,   156,
    1041,  1556,   156,   156,  1559,   141,   155,   165,   156,   168,
     147,   160,   167,    15,  1018,   149,   165,   168,    10,   155,
     167,   167,   167,   167,   160,   167,  1067,   167,   167,   165,
     149,    10,   113,   114,   167,   116,    10,  1018,  1593,   149,
     121,   149,   123,  1142,  1138,    10,   149,   165,   168,   148,
    1142,   158,   159,   160,   161,   162,  1611,   164,   165,   166,
     148,  1102,   167,    16,    17,    18,    19,    20,    21,    22,
      23,   167,   167,  1114,   155,   167,   167,   157,   157,   160,
      33,   157,   167,  1124,  1125,  1126,   157,    10,   149,    10,
     167,  1132,    10,   149,   168,  1136,   149,  1138,   167,   165,
     165,  1142,   165,   167,   193,   165,    10,  1148,  1149,   167,
     167,   108,   109,   110,   149,   112,   113,   114,   149,   167,
     117,   149,   158,   159,   160,   161,   162,   124,   164,   165,
     166,  1147,   129,   130,   311,   132,   133,   134,   648,   136,
     137,  1298,  1378,    11,   901,   334,  1517,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   702,  1295,   258,
     862,  1114,   334,  1335,   263,  1258,    -1,    -1,    -1,    -1,
      -1,   411,  1304,    10,    11,    12,    54,    -1,    56,    57,
      58,  1285,    -1,   666,    -1,    -1,  1295,   150,    -1,   152,
     153,   154,   155,  1295,  1298,   158,   159,   160,   161,   162,
     299,   164,   165,   166,    -1,  1314,    84,  1258,  1317,  1318,
      -1,  1320,  1314,    -1,  1323,  1317,  1318,    -1,  1320,    -1,
      -1,  1323,   100,    10,    11,    12,    13,    64,    -1,   328,
      17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
      77,    -1,   120,   121,  1295,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1303,  1304,    -1,    -1,    10,    11,    -1,   137,
      -1,    -1,    -1,  1314,   142,    -1,  1317,  1318,    -1,  1320,
      -1,  1380,  1323,    60,  1378,  1384,   113,   114,  1380,   116,
      -1,    -1,  1384,  1334,   121,    -1,   123,    -1,    -1,    -1,
      -1,   390,  1374,   300,   301,    -1,    -1,    51,    -1,   306,
      54,    -1,    56,    57,    58,    59,    -1,   406,   407,    63,
      -1,  1362,    66,   150,   413,    -1,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,   113,    -1,    -1,  1380,
      84,    -1,    -1,  1384,    -1,    -1,    -1,  1388,    -1,    -1,
      -1,    -1,    -1,    -1,  1395,    -1,   100,  1429,  1430,    -1,
    1432,    -1,  1434,    -1,   141,    -1,    -1,    -1,   112,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   155,  1451,
      -1,   470,   126,   160,    -1,    -1,  1427,  1486,    -1,    -1,
     134,   135,   136,   137,  1486,    -1,   140,    -1,   142,    -1,
      -1,    -1,    -1,   147,    20,    21,    22,    23,    -1,  1481,
      62,    54,    -1,    56,    57,    58,    -1,    33,    -1,   163,
      -1,    18,    19,    20,    21,    22,    23,   516,    -1,    -1,
      -1,    -1,    -1,    85,    -1,    -1,    33,   526,    -1,    -1,
      -1,    84,    -1,    -1,    -1,  1486,    -1,  1488,    -1,    -1,
      -1,    -1,    -1,   105,    -1,  1496,    -1,   100,  1557,  1500,
    1501,  1502,  1503,  1504,    -1,  1557,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    -1,  1517,   120,   121,    -1,
      -1,    -1,   571,   135,    -1,    -1,    -1,    -1,    -1,   486,
      -1,    -1,    -1,    -1,   137,    -1,    -1,   586,    -1,   142,
      -1,    -1,    -1,    -1,    -1,    61,   595,    18,    19,    20,
      21,    22,    23,    -1,    -1,  1556,  1557,    -1,  1559,    -1,
      -1,    -1,    33,    -1,  1565,  1566,  1567,    -1,   180,    -1,
      -1,   183,    -1,  1605,  1606,  1607,    -1,  1609,    -1,    -1,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,    -1,  1593,    -1,   279,   280,   645,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
    1611,  1612,    -1,    -1,    -1,    -1,    -1,   229,   230,    -1,
    1621,   670,   671,   672,   673,    -1,   675,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,   155,
      -1,   157,    -1,   159,   256,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
      -1,    -1,    -1,   275,    18,    19,    20,    21,    22,    23,
     186,    -1,    -1,    -1,   190,    -1,   192,   193,    -1,    33,
      -1,   293,    -1,   295,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   745,    -1,    -1,    -1,
     312,    -1,   314,   315,   316,   317,   318,   319,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,   336,    -1,    -1,   684,   685,    -1,
      -1,    -1,    33,   345,    -1,    -1,   348,    18,    19,    20,
      21,    22,    23,    -1,   356,    -1,    -1,    -1,    -1,    -1,
      -1,   800,    33,    -1,    -1,    -1,   272,    -1,    -1,    -1,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     819,    -1,    -1,   458,    -1,    -1,    -1,   462,   463,    -1,
      -1,   830,    -1,   395,    -1,    -1,    -1,   399,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   411,
     154,   155,    -1,   852,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,    -1,   863,   864,   865,   866,   867,   868,
     869,   870,   871,   872,   873,   874,   875,   876,   877,   878,
     879,   880,   881,   882,    -1,   447,   885,    -1,  1127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   459,    -1,    -1,
      -1,   152,   153,   154,   155,    -1,  1127,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,    -1,   479,    -1,    -1,
      -1,    -1,   153,   154,   155,   487,   392,   158,   159,   160,
     161,   162,   931,   164,   165,   166,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   947,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,    -1,    -1,
      -1,    -1,    15,   598,    -1,    -1,   601,   602,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   619,    -1,    -1,   622,   623,    -1,
      -1,   626,    -1,   900,    -1,   630,    -1,    50,   633,   634,
      -1,    -1,  1001,    -1,  1003,    -1,  1005,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,   580,    -1,
      -1,    -1,    75,    76,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,   513,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,   109,  1056,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   629,    -1,   122,
      -1,    -1,   125,    -1,    -1,  1074,    -1,   130,   640,    -1,
     133,   547,    -1,   549,    -1,   551,   648,    -1,    -1,    -1,
     725,    -1,    -1,   728,   729,    -1,   731,    -1,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,    -1,    -1,    -1,
     163,    -1,   165,   748,    -1,    -1,   169,   752,   753,    -1,
      -1,    -1,    -1,   758,    -1,    -1,    -1,    -1,  1367,    -1,
    1369,  1370,  1371,  1372,  1373,    -1,  1375,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   706,    -1,  1367,    -1,  1369,  1370,
    1371,  1372,  1373,    -1,  1375,   790,    -1,    -1,   793,   794,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,   738,   812,   170,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   822,   823,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   832,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   674,    -1,
      -1,    -1,    -1,    -1,   776,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,
    1479,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,
    1471,  1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,    -1,
      -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
     905,    -1,    -1,   908,   909,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,  1284,    -1,    -1,    -1,   924,
      -1,    -1,    33,  1532,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    -1,    -1,    18,    19,
      20,    21,    22,    23,    -1,    -1,    -1,    -1,   953,    -1,
      -1,   883,    -1,    33,    65,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     902,    -1,    33,  1342,    -1,    -1,  1585,    -1,  1347,  1588,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   996,    -1,    -1,    -1,    -1,    -1,  1588,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   843,   844,   845,
      -1,   847,    -1,   849,    -1,   851,   852,    -1,    -1,  1024,
    1025,    -1,    -1,    -1,    -1,    -1,  1395,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,
     151,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    10,    11,    12,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,    -1,    -1,  1021,
      -1,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,    -1,    -1,    -1,   170,
      -1,    -1,    -1,  1482,    -1,    50,    51,    -1,  1123,    54,
      -1,    56,    57,    58,    59,    60,    -1,    62,    63,    -1,
      -1,    66,    67,    -1,    -1,    70,    -1,  1069,    -1,    -1,
      75,    76,    77,    10,    11,    12,    81,    -1,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    17,   109,    -1,   111,    -1,   113,    -1,
      47,    -1,    49,   118,    -1,   120,   121,   122,    -1,    33,
     125,   126,    -1,    -1,    -1,   130,    -1,    64,   133,   134,
     135,   136,   137,    47,    -1,   140,    -1,   142,    -1,    76,
      77,    -1,    -1,    -1,    -1,  1147,    60,    61,    -1,    -1,
     155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,    -1,
     165,   166,    76,    -1,   169,    10,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   113,   114,    54,   116,
      56,    57,    58,    -1,   121,    -1,   123,    -1,    -1,    -1,
      66,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
     147,    -1,  1287,    -1,    -1,   129,  1122,    -1,    -1,    64,
      -1,    -1,    -1,    -1,   100,    -1,    -1,   141,    -1,    -1,
      -1,    76,    77,    -1,    -1,    -1,    -1,    -1,  1313,    -1,
      -1,   155,    -1,    -1,   120,   121,  1321,    -1,    -1,  1324,
       3,     4,     5,     6,    -1,     8,     9,    10,    11,    -1,
      -1,   137,    -1,    -1,    -1,    -1,   142,    -1,   113,   114,
      -1,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    33,
      -1,    54,   147,    56,    57,    58,    59,    -1,    -1,    62,
      63,    -1,  1387,    66,    67,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    75,    76,    77,  1400,    -1,  1329,    81,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
      -1,    -1,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   155,    -1,     6,   158,   159,   160,    -1,    -1,
     163,    -1,   165,   166,    -1,    -1,   169,    -1,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,    -1,    51,    -1,   170,    54,    -1,    56,
      57,    58,    59,    -1,    -1,    47,    63,    49,    -1,    66,
      -1,    53,    -1,    70,    -1,    -1,    -1,    -1,    60,    61,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    84,  1374,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,  1480,    -1,
      -1,    83,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,    18,    19,    20,    21,
      22,    23,    -1,   120,   121,   107,    -1,    -1,    -1,   126,
      -1,    33,    -1,    -1,    -1,   117,    -1,   134,   135,   136,
     137,   123,    -1,   140,    -1,   142,   128,  1529,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,    -1,   141,
    1446,  1447,  1448,  1449,    -1,  1451,   163,  1453,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      -1,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   100,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    33,    -1,    -1,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    64,    65,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,   147,    -1,
      -1,    15,    -1,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,   160,    -1,    -1,   163,    -1,   165,   166,    -1,   150,
     169,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,    50,    -1,    -1,    -1,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,     3,     4,     5,     6,   142,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    -1,   169,    17,    18,    19,    20,
      21,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    33,    -1,    -1,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,   160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,
     169,    -1,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,    50,    51,    -1,    -1,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,     3,     4,     5,     6,   142,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    50,    51,    -1,    -1,    54,    33,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,   160,    -1,    -1,   163,    -1,   165,   166,    -1,    -1,
     169,    -1,   149,    -1,    -1,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    50,   164,   165,   166,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,     3,     4,     5,     6,   142,     8,
       9,    10,    11,   147,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    54,    33,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,   160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,
     169,    -1,    -1,   150,    -1,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    50,   164,   165,   166,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,    -1,   118,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,     3,     4,     5,     6,   142,     8,
       9,    10,    11,   147,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    54,    33,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,    -1,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,   160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,
     169,   148,    -1,    -1,    -1,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,    50,   164,   165,   166,
      54,    -1,    56,    57,    58,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    81,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   109,    -1,   111,    -1,   113,
      10,    11,    12,    -1,   118,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,   133,
      -1,    -1,    -1,   137,     3,     4,     5,     6,   142,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      -1,   155,    -1,    -1,   158,   159,   160,    -1,    -1,   163,
      -1,   165,   166,    -1,    64,   169,    16,    17,    18,    19,
      20,    21,    22,    23,    -1,    -1,    76,    77,    47,    -1,
      -1,    50,    51,    33,    -1,    54,    -1,    56,    57,    58,
      59,    60,    -1,    62,    63,    -1,    -1,    66,    67,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    -1,   113,   114,    84,   116,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    -1,    -1,   147,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
      -1,   140,    -1,   142,     3,     4,     5,     6,    -1,     8,
       9,    10,    11,    -1,    -1,    -1,   155,    -1,    -1,   158,
     159,    -1,    -1,    -1,   163,    -1,   165,    -1,   148,    -1,
     169,    -1,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,   167,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    54,    -1,    56,    57,    58,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    66,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    -1,
      -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,   111,    -1,   113,    10,    11,    12,    -1,   118,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,   133,    -1,    -1,    -1,   137,     3,
       4,     5,     6,   142,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   163,    -1,   165,   166,    -1,    64,
     169,    16,    17,    18,    19,    20,    21,    22,    23,    -1,
      -1,    76,    77,    47,    -1,    -1,    50,    51,    33,    -1,
      54,    -1,    56,    57,    58,    59,    60,    -1,    62,    63,
      -1,    -1,    66,    67,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    75,    76,    77,    -1,    -1,    -1,    -1,   113,   114,
      84,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      10,    11,    12,    -1,    -1,    -1,   100,    -1,    -1,   134,
      -1,    -1,    -1,    -1,   139,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,    -1,   140,    -1,   142,    -1,
       3,     4,     5,     6,    64,     8,     9,    10,    -1,    -1,
      -1,   155,    15,    -1,   158,   159,    76,    77,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,    -1,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,   166,   167,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,    -1,   113,   114,   115,   116,    -1,    -1,    62,
      -1,   121,    -1,   123,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,   134,    -1,    -1,    -1,    81,   139,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    62,
     163,    -1,   165,   166,    67,    -1,   169,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    10,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,   155,    -1,    -1,   158,   159,   160,    -1,    62,
     163,    -1,   165,   166,    67,    -1,   169,    -1,    -1,    -1,
      -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    81,    -1,
      -1,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    10,    11,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    51,    -1,
      -1,    54,    -1,    56,    57,    58,    59,    33,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
     163,    -1,   165,   166,    77,    -1,   169,    -1,    -1,    -1,
      -1,    84,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    33,
      -1,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,   112,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    64,    -1,    33,    -1,    -1,
     163,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,   113,   114,    -1,   116,    -1,    33,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   138,
     164,   165,   166,   167,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    16,    17,    18,    19,    20,    21,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,    -1,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,    -1,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,     0,   164,   165,
     166,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    47,    -1,    49,    -1,    -1,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    18,
      19,    20,    21,    22,    23,    -1,    69,    -1,    71,    72,
      73,    74,    -1,    -1,    33,    78,    -1,    -1,    -1,    -1,
      83,   153,   154,   155,    -1,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,    -1,    -1,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,    10,    11,    12,    -1,
      -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    11,    12,   127,   128,    15,    -1,    17,   132,
      -1,    -1,    -1,    -1,    -1,   138,   139,    -1,   141,   156,
     157,   158,   159,   160,   161,   162,   149,   164,   165,   166,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
      64,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,
      59,    60,    76,    77,    63,     6,    -1,    66,    -1,    -1,
      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    84,   155,    -1,    -1,   158,
     159,   160,   161,   162,   108,   164,   165,   166,    -1,   113,
     114,   100,   116,    10,    11,    12,    47,   121,    49,   123,
      -1,    -1,    53,    10,    11,    12,    -1,    -1,   117,    60,
      61,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,    -1,
      71,    72,    73,    -1,    -1,   134,   135,   136,   137,    -1,
      -1,   140,    83,   142,    -1,    -1,    -1,    54,    -1,    56,
      57,    58,    59,    60,    -1,    -1,   155,    -1,    -1,    66,
      -1,   160,    10,    11,    12,    -1,   107,    64,    -1,    -1,
      77,    -1,    -1,    -1,    -1,    -1,   117,    84,    -1,    76,
      77,    -1,   123,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,    54,   100,    56,    57,    58,    -1,   139,    -1,
     141,    11,    12,    -1,    66,    15,    54,    -1,    56,    57,
      58,    -1,    -1,   120,   121,    -1,   113,   114,    66,   116,
      -1,    -1,    84,    -1,   121,    -1,   123,   134,    -1,    77,
     137,    -1,    -1,   140,    -1,   142,    84,    47,   100,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    58,    59,
      60,    -1,   100,    63,    -1,    -1,    66,    -1,   120,   121,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,   120,   121,    84,   137,    -1,    -1,    -1,    -1,
     142,    -1,    54,    -1,    56,    57,    58,    -1,    -1,   137,
     100,    -1,   140,    -1,   142,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,   165,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,    84,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,   100,    -1,
     140,    47,   142,    11,    12,    51,    -1,    -1,    54,    -1,
      56,    57,    58,    59,    60,    -1,    -1,    63,   120,   121,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,   137,    -1,    -1,    84,    47,
     142,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      58,    59,    60,    -1,   100,    63,    -1,    -1,    66,    -1,
      -1,    -1,    70,   165,    -1,    -1,    -1,    -1,    -1,    77,
      -1,   117,    -1,    -1,   120,   121,    84,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   100,    -1,   140,    -1,   142,    11,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,    -1,
      -1,    11,    12,    -1,    -1,    -1,   134,   135,   136,   137,
      -1,    -1,   140,    -1,   142,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    58,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    51,    -1,    77,    54,    -1,    56,    57,    58,    59,
      84,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    -1,
      70,    -1,    -1,    -1,    -1,    -1,   100,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    10,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    11,    12,
     100,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,    -1,    -1,   140,   117,   142,    -1,
     120,   121,    -1,    -1,    -1,    -1,   126,    11,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,    51,    64,
     140,    54,   142,    56,    57,    58,    59,    -1,    -1,    -1,
      63,    76,    77,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    51,    -1,    -1,
      54,    84,    56,    57,    58,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    -1,    -1,    -1,    70,   100,   113,   114,
      -1,   116,    -1,    77,    -1,    -1,   121,    -1,   123,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   134,
      -1,    -1,    -1,   126,    11,    -1,   100,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,    -1,    -1,   140,    -1,   142,
      -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    11,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,    51,    -1,   140,    54,   142,    56,
      57,    58,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    51,    -1,
      77,    54,    -1,    56,    57,    58,    59,    84,    -1,    -1,
      63,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
      -1,    -1,    -1,   100,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   120,   121,    11,    -1,   100,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,    -1,    -1,   140,    -1,   142,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,    10,    11,    12,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,    51,    64,   140,    54,   142,
      56,    57,    58,    59,    -1,    -1,    -1,    63,    76,    77,
      66,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,    -1,
      -1,    -1,    -1,    -1,   100,   113,   114,    -1,   116,    -1,
      76,    77,    -1,   121,    -1,   123,    -1,    -1,    -1,    54,
      -1,    56,    57,    58,   120,   121,   134,    -1,    -1,    -1,
     126,   139,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,    -1,    -1,   140,    -1,   142,   113,   114,    84,
     116,    -1,    -1,    -1,    -1,   121,    47,   123,    49,    -1,
      -1,    52,    53,    -1,    -1,   100,    -1,    -1,   134,    60,
      61,    -1,    -1,   139,    -1,    -1,    -1,    -1,    69,    -1,
      71,    72,    73,    74,    -1,   120,   121,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   137,    -1,    -1,    -1,    -1,   142,    -1,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,   116,   117,    -1,    -1,    47,
     165,    49,   123,   124,    52,    53,   127,   128,    -1,    -1,
      -1,   132,    60,    61,    -1,    -1,    -1,   138,   139,    -1,
     141,    69,    -1,    71,    72,    73,    74,    -1,   149,    -1,
      78,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,
      -1,    -1,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
      -1,    -1,    47,    -1,    49,   123,   124,    52,    53,   127,
     128,    -1,    -1,    -1,   132,    60,    61,    -1,    -1,    -1,
     138,   139,    -1,   141,    69,    -1,    71,    72,    73,    74,
      -1,   149,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     168,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,
     115,   116,   117,    -1,    -1,    47,    -1,    49,   123,   124,
      52,    53,   127,   128,    -1,    -1,    -1,   132,    60,    61,
      -1,    -1,    -1,   138,   139,    -1,   141,    69,    -1,    71,
      72,    73,    74,    -1,   149,    -1,    78,    -1,    -1,    -1,
      -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,   116,   117,    -1,    -1,    47,    -1,
      49,   123,   124,    52,    53,   127,   128,    -1,    -1,    -1,
     132,    60,    61,    -1,    -1,    -1,   138,   139,    -1,   141,
      69,    -1,    71,    72,    73,    74,    -1,   149,    -1,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
      -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,    -1,
      -1,    47,    -1,    49,   123,   124,    52,    53,   127,   128,
      -1,    -1,    -1,   132,    60,    61,    -1,    -1,    -1,   138,
     139,    -1,   141,    69,    -1,    71,    72,    73,    74,    -1,
     149,    -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
     116,   117,    -1,    -1,    47,    -1,    49,   123,   124,    52,
      53,   127,   128,    -1,    -1,    -1,   132,    60,    61,    -1,
      -1,    -1,   138,   139,    -1,   141,    69,    -1,    71,    72,
      73,    74,    -1,   149,    -1,    78,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    10,    11,    12,    -1,    -1,    15,    10,
      11,    12,   168,    54,    -1,    56,    57,    58,   101,   102,
     103,   104,   105,   106,   107,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
     123,   124,    -1,    84,   127,   128,    47,    -1,    49,   132,
      -1,    -1,    -1,    -1,    -1,   138,   139,    64,   141,   100,
      -1,    -1,    -1,    64,    -1,    -1,   149,    -1,    -1,    76,
      77,    -1,    -1,    -1,    -1,    76,    77,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,   142,    -1,    -1,    -1,    -1,   113,   114,    -1,   116,
      -1,    -1,   113,   114,   121,   116,   123,    47,    -1,    49,
     121,    -1,   123,    53,   165,    -1,    47,    -1,    49,    -1,
      60,    61,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      61,    71,    72,    73,    -1,    -1,    -1,    -1,    78,    -1,
      71,    72,    73,    83,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   117,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,   117,    -1,   128,    -1,
      -1,    -1,   123,    -1,    -1,    -1,   127,   128,   138,   139,
      47,   141,    49,    -1,    -1,    52,    53,   138,   139,    -1,
     141,    -1,    -1,    60,    61,    -1,   156,    -1,    -1,    -1,
      -1,    -1,    69,    -1,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    83,    -1,    47,    -1,
      49,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,    71,    72,    73,    -1,    -1,   114,   115,   116,
     117,    -1,    -1,    -1,    83,    -1,   123,   124,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,    -1,    47,    -1,    49,
      -1,   138,   139,    53,   141,    -1,    -1,    -1,   107,   108,
      60,    61,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    71,    72,    73,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
     139,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   139,
      -1,   141
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   144,   145,   146,   172,   173,   283,     3,     4,     5,
       6,     8,     9,    10,    11,    50,    54,    56,    57,    58,
      62,    66,    67,    75,    76,    77,    81,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   109,   111,   113,   118,   120,   121,
     122,   125,   130,   133,   137,   142,   155,   158,   159,   160,
     163,   165,   166,   169,   273,   274,   282,    11,    12,    51,
      54,    56,    57,    58,    59,    60,    63,    66,    70,    77,
      84,   100,   120,   121,   126,   134,   135,   136,   137,   140,
     142,   234,   235,   239,   241,   243,   249,   251,   255,   256,
     261,   262,   263,   264,     0,    47,    49,    52,    53,    60,
      61,    69,    71,    72,    73,    74,    78,    83,   101,   102,
     103,   104,   105,   106,   107,   108,   114,   115,   116,   117,
     123,   124,   127,   128,   132,   138,   139,   141,   149,   176,
     178,   179,   181,   185,   205,   257,   260,   283,   147,   165,
     165,   165,   165,   165,   165,   156,   165,   156,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,    11,    51,    63,
     134,   135,   237,   255,   256,   261,   156,   165,   165,    15,
     165,   273,   156,   165,   165,   165,   273,   273,   273,   273,
     273,    11,    54,    56,    57,    58,    66,    77,    84,   100,
     120,   121,   137,   142,   239,   271,   273,    10,    11,    12,
      64,    76,    77,   113,   114,   116,   121,   123,   151,   155,
     160,   277,   278,   280,   283,   273,    16,    17,    18,    19,
      20,    21,    22,    23,    33,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   164,   165,   166,     6,
       8,   234,   235,   165,    59,   126,    66,   100,   262,   262,
     262,   280,   165,   262,    13,    15,    17,    60,   141,   155,
     160,   165,   232,   233,   283,   233,   250,    10,    11,    12,
     113,   150,   281,   240,   283,   138,   183,   184,   280,   165,
      72,    83,   181,   181,   181,   181,     6,   181,   205,   181,
     150,   180,   108,   181,   165,   165,   165,   165,   165,   165,
     181,   147,   280,   150,   150,   150,   181,   181,   165,   179,
     181,   185,   206,   181,   181,   189,   108,   280,   181,   181,
      10,    11,    51,    63,   112,   134,   135,   147,   163,   192,
     196,   236,   238,   241,   243,   249,   255,   256,   261,   270,
     271,   283,   270,   239,   270,   270,   270,   270,   239,   270,
     239,   270,   239,   270,   239,   239,   239,   239,   239,   239,
     239,   239,   239,   239,   239,   239,   239,   239,   239,   270,
     165,   280,   165,   165,   280,   240,   239,   270,   270,   165,
     239,   239,   239,   273,   270,   270,   167,   148,   167,   280,
     280,   148,   170,   151,   222,   283,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   280,   167,   271,   273,
     233,   233,    51,   273,   239,   160,   280,    47,    49,   182,
     283,   232,   233,   232,   233,   182,   182,    15,    17,    47,
      60,   117,   155,   160,   217,   218,   227,   234,   235,   283,
     166,   147,    11,   252,   262,   150,    10,    11,    12,    47,
      49,   113,   147,   280,   281,   280,    48,   148,   165,    11,
     236,   273,   181,   178,   147,   280,   280,   280,   280,   280,
     280,   280,   173,   147,   273,   156,    10,    11,   196,   236,
     238,   280,   149,   151,   165,   165,   165,    60,   234,   280,
     165,   177,   280,   187,   147,   149,   151,   224,   149,   186,
     280,   281,   240,   168,   167,   167,   167,   167,   167,   167,
     157,   167,   157,   167,   167,   167,   167,   148,   167,   148,
     167,   148,   167,   167,   167,   167,   167,   167,   167,   167,
     167,   167,   167,   273,   239,   270,   280,   157,   167,   167,
     280,   167,   157,   167,   167,   167,   167,   273,   273,    15,
     155,   278,   165,   202,   283,   273,   150,   167,   170,   167,
     167,   167,   182,   182,   183,   165,    13,    15,    17,    60,
     141,   155,   160,   232,   283,   232,   232,   182,   183,   117,
     234,   235,   227,   182,   182,   167,    15,   148,    13,    17,
      60,   141,   155,   160,   165,   230,   281,   283,    13,    15,
      17,    60,   141,   155,   160,   165,   231,   269,   273,   283,
     253,   254,   283,   252,   183,   165,   242,   244,   150,   181,
     183,     3,     4,     5,     9,    10,    15,    50,    62,    67,
      75,    76,   109,   111,   113,   118,   122,   125,   130,   133,
     155,   158,   159,   163,   165,   169,   219,   220,   227,   228,
     275,   276,   282,   283,   167,   167,   173,   147,   148,   148,
     148,   148,   148,   148,   168,   258,   148,   167,    10,    11,
      12,    59,    60,   134,   207,   208,   209,   210,   211,   261,
     283,   165,   224,   190,   149,   239,   193,    10,    13,   160,
     195,    51,   273,   234,    13,    17,    60,   141,   155,   160,
     229,   281,   283,   239,   173,   165,   147,   149,   150,   151,
     223,   265,   266,    64,    65,   147,   273,    13,    17,    60,
     112,   141,   155,   160,   165,   188,   212,   214,   281,   150,
     280,   165,   165,   239,   239,   239,   167,   167,   167,   165,
     167,   165,   222,   217,    17,    33,    47,    60,    61,    76,
     107,   110,   113,   129,   141,   155,   215,   283,   273,   232,
      48,   236,   273,   160,   280,   182,   232,   232,   182,   182,
     166,   232,    48,   234,   235,   230,   231,   232,   232,   202,
      15,   227,   160,   182,   230,   230,   182,   182,   230,   166,
     222,   182,   160,   280,   182,   231,   231,   182,   182,   231,
     166,   222,   170,   280,   168,    48,   236,   273,   173,    76,
     245,   283,   184,   165,   156,   156,   237,   156,    15,   165,
     275,   156,   165,   273,   273,   273,   273,   239,   271,   273,
     167,    15,   148,    16,    17,    18,    19,    20,    21,    22,
      23,    33,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   164,   165,   166,   181,   181,   168,   259,
      10,    10,    10,    10,    10,    10,   173,   282,   149,   211,
     157,   148,    15,   280,    13,    17,    60,   141,   155,   160,
     165,   230,   231,   191,   214,   149,   217,   167,   160,   212,
     217,   167,   167,   229,   160,   182,   229,   229,   182,   182,
     165,   166,   182,   167,   168,   197,   265,   174,   175,   280,
      64,    65,   168,   267,   283,   149,   149,   147,   225,   226,
     273,   283,   149,   160,   182,   212,     6,    16,    17,    18,
      19,    20,    21,    22,    23,    33,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    65,   109,
     148,   151,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   165,   166,   169,   203,   212,   182,   182,
     212,   150,   165,   166,   215,   151,   222,   224,   182,   252,
     271,   271,   167,   167,   167,   271,   271,   167,    60,   237,
     183,   165,   147,   182,   167,   167,   182,   182,   232,   232,
     232,   269,   167,   227,   230,   231,   222,   222,   167,   167,
     215,   182,   230,   230,   230,   167,   269,   182,   182,   231,
     231,   231,   167,   269,   182,   148,   151,   167,   167,   168,
     150,   246,   247,   283,   239,   239,   239,   165,   239,   165,
     239,   239,   239,   273,   167,   167,    15,   228,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   280,   167,
     271,   273,   173,   148,   148,   167,   148,   216,   283,   148,
     148,   148,   168,   167,   230,   231,   179,   185,   204,   205,
     210,   280,   151,   160,   182,   182,   182,   151,   221,   283,
     222,   224,   167,   165,   212,   167,   167,   165,   182,   229,
     229,   229,   200,   269,   217,   168,   147,   148,   147,   165,
     149,   149,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    70,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    82,    83,
      84,   100,   107,   108,   109,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   169,
     170,   268,   225,   168,   148,   182,   212,    10,   167,   170,
     182,   212,   212,   167,   273,   213,   269,   273,   148,   167,
     167,   167,   167,   202,   237,   233,    48,   167,   280,   265,
     182,   182,   232,   170,   165,   222,   222,   165,   165,   230,
     165,   170,   231,   165,   170,   273,   114,   115,   116,   134,
     139,   248,   279,   280,   147,   148,   167,   157,   157,   270,
     157,   280,   167,   157,   167,   167,   273,   150,   167,   170,
     168,    10,    10,   149,    10,   167,    10,    10,    10,   149,
     221,   239,   182,    50,    62,    67,   118,   122,   125,   155,
     158,   159,   160,   163,   165,   169,   272,   274,   148,   202,
     194,   167,   165,   202,   201,   229,   217,   170,   167,   265,
     175,   270,   270,   267,   168,   147,   273,   212,   182,   219,
     170,   188,   215,   233,    15,   167,   168,   182,   217,   217,
     217,   217,   182,   217,   182,   148,   139,   279,   139,   279,
     139,   279,   280,   114,   115,   116,    15,   173,   248,   165,
     165,   167,   165,   167,   165,   273,   167,   148,   167,   148,
     149,   148,   167,   167,   148,   167,   165,   156,   156,   156,
      15,   165,   272,   156,   272,   272,   272,   272,   272,   239,
     271,   272,    16,    17,    18,    19,    20,    21,    22,    23,
      33,   152,   153,   154,   155,   158,   159,   160,   161,   162,
     164,   165,   166,   191,   217,   165,   198,   217,   167,   182,
     202,   168,   168,   167,   168,   225,   167,   182,   147,   167,
     167,   167,   167,   167,   167,   279,   279,   279,   279,   279,
     279,   168,   271,   271,   271,   271,   149,    10,   149,    10,
      10,   149,   149,    10,   149,   239,   239,   239,   239,   165,
     239,   239,   167,   167,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   280,   167,   271,   273,   167,   199,   217,   167,
     202,    15,   168,   202,   265,   202,   202,   202,   202,   202,
     167,   167,   167,   167,   148,   216,   167,   148,   148,   167,
     167,   157,   157,   157,   280,   167,   157,   272,   150,   167,
     170,   202,   217,   167,   202,   168,   215,   215,   215,    10,
     167,   149,    10,    10,   149,   165,   165,   165,   167,   165,
     272,   167,   202,   149,   167,   148,   167,   271,   271,   271,
     271,   202,   215,   149,    10,   149,   167,   167,   167,   167,
     215,   167,   149
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   171,   172,   172,   172,   173,   173,   173,   174,   174,
     175,   175,   175,   177,   176,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   178,   178,   178,   178,   178,   178,   178,
     178,   178,   180,   179,   181,   181,   181,   181,   181,   181,
     181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   182,   182,   182,   182,   183,   183,   184,   184,
     184,   186,   185,   185,   187,   185,   185,   185,   188,   188,
     190,   189,   189,   191,   191,   193,   192,   194,   192,   195,
     192,   197,   196,   198,   196,   199,   196,   200,   196,   201,
     196,   196,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   202,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
     203,   203,   203,   203,   203,   204,   204,   204,   205,   206,
     205,   205,   205,   207,   207,   208,   208,   209,   209,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   211,   211,
     211,   211,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   213,   212,   214,   214,   215,   215,   215,
     216,   216,   217,   217,   217,   217,   217,   218,   218,   219,
     219,   219,   219,   219,   220,   220,   221,   221,   222,   222,
     223,   223,   223,   223,   223,   224,   224,   224,   224,   224,
     224,   225,   225,   225,   226,   226,   226,   226,   227,   227,
     227,   227,   227,   227,   227,   227,   228,   228,   229,   229,
     229,   229,   229,   229,   229,   229,   229,   230,   230,   230,
     230,   230,   230,   230,   230,   230,   230,   230,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   231,   231,   232,
     232,   232,   232,   232,   232,   232,   232,   232,   232,   233,
     233,   233,   233,   233,   233,   233,   233,   233,   233,   233,
     233,   233,   233,   234,   234,   234,   234,   234,   234,   234,
     234,   234,   234,   234,   234,   235,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   237,
     237,   237,   237,   237,   237,   237,   237,   238,   238,   239,
     239,   239,   239,   240,   240,   240,   240,   242,   241,   244,
     243,   245,   245,   246,   246,   247,   247,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   250,   249,   251,
     251,   251,   251,   252,   252,   253,   253,   253,   254,   254,
     254,   255,   255,   255,   256,   256,   256,   258,   257,   259,
     257,   257,   257,   260,   260,   260,   261,   261,   261,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   263,   263,   263,   264,   266,   265,   267,
     267,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     269,   269,   270,   270,   271,   271,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   277,
     277,   277,   277,   277,   278,   278,   278,   278,   279,   279,
     279,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   281,   281,   281,   281,   282,   282,   282,   282,
     283
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     5,     4,     0,     5,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     2,     2,     2,     8,    11,     9,
      11,    13,    15,     7,     9,    12,     9,     9,    13,     9,
       7,     5,     0,     3,     1,     2,     2,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     4,
       5,     5,     1,     4,     5,     5,     1,     3,     1,     4,
       4,     0,     4,     3,     0,     4,     3,     1,     2,     4,
       0,     4,     3,     2,     4,     0,     6,     0,     9,     0,
       6,     0,     7,     0,    11,     0,    12,     0,     8,     0,
       9,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     4,     5,     6,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     0,
       6,     2,     2,     1,     1,     1,     3,     1,     1,     1,
       2,     4,     2,     3,     3,     4,     2,     3,     1,     1,
       1,     1,     2,     3,     4,     2,     2,     3,     3,     3,
       4,     5,     3,     0,     6,     2,     3,     1,     3,     4,
       1,     2,     1,     1,     1,     3,     2,     1,     3,     1,
       1,     1,     3,     2,     1,     3,     1,     2,     1,     2,
       1,     3,     5,     3,     3,     1,     3,     3,     3,     3,
       4,     1,     1,     2,     1,     3,     3,     5,     3,     4,
       5,     3,     4,     5,     2,     4,     1,     1,     1,     2,
       2,     2,     3,     3,     3,     4,     5,     1,     2,     2,
       2,     3,     3,     3,     4,     5,     7,     3,     1,     3,
       2,     2,     3,     3,     3,     4,     5,     7,     3,     1,
       1,     3,     2,     2,     3,     3,     3,     4,     5,     1,
       1,     3,     2,     2,     3,     3,     3,     4,     5,     5,
      10,    10,    10,     1,     1,     2,     1,     1,     1,     3,
       4,     4,     4,     4,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     2,     4,     4,     4,     1,     1,
       1,     2,     3,     2,     4,     4,     1,     1,     1,     2,
       3,     2,     3,     1,     4,     5,     5,     0,     6,     0,
       9,     1,     1,     1,     1,     2,     3,     1,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     0,     5,     3,
       1,     4,     2,     1,     1,     1,     3,     5,     1,     2,
       4,     1,     2,     2,     1,     1,     1,     0,     6,     0,
       7,     4,     5,     3,     5,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     1,     1,     2,     1,     0,     2,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     3,     1,     4,     7,     7,
       7,     7,     4,     2,     5,     4,     2,     2,     2,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     4,     7,     7,     7,
       7,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     2,     5,     4,     2,
       5,     4,     4,     2,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     8,    11,     4,     4,     6,
       4,     4,     6,     6,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     1,     4,     7,     7,     7,     7,
       4,     2,     5,     4,     2,     5,     4,     4,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     4,     2,     3,     1,     2,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       0
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 3: /* grammar: START_CONST_EXPR const_expr  */
#line 454 "dtool/src/cppparser/cppBison.yxx"
{
  current_expr = (yyvsp[0].u.expr);
}
#line 4016 "built/tmp/cppBison.yxx.c"
    break;

  case 4: /* grammar: START_TYPE full_type  */
#line 458 "dtool/src/cppparser/cppBison.yxx"
{
  current_type = (yyvsp[0].u.type);
}
#line 4024 "built/tmp/cppBison.yxx.c"
    break;

  case 10: /* constructor_init: name '(' optional_const_expr_comma ')'  */
#line 476 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 4032 "built/tmp/cppBison.yxx.c"
    break;

  case 11: /* constructor_init: name '(' optional_const_expr_comma ')' ELLIPSIS  */
#line 480 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-2].u.expr);
}
#line 4040 "built/tmp/cppBison.yxx.c"
    break;

  case 12: /* constructor_init: name '{' optional_const_expr_comma '}'  */
#line 484 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 4048 "built/tmp/cppBison.yxx.c"
    break;

  case 13: /* $@1: %empty  */
#line 496 "dtool/src/cppparser/cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 4057 "built/tmp/cppBison.yxx.c"
    break;

  case 14: /* extern_c: storage_class '{' $@1 cpp '}'  */
#line 501 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4065 "built/tmp/cppBison.yxx.c"
    break;

  case 21: /* declaration: KW_BEGIN_PUBLISH  */
#line 514 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4082 "built/tmp/cppBison.yxx.c"
    break;

  case 22: /* declaration: KW_END_PUBLISH  */
#line 527 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4095 "built/tmp/cppBison.yxx.c"
    break;

  case 23: /* declaration: KW_PUBLISHED ':'  */
#line 536 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
#line 4103 "built/tmp/cppBison.yxx.c"
    break;

  case 24: /* declaration: KW_PUBLIC ':'  */
#line 540 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4115 "built/tmp/cppBison.yxx.c"
    break;

  case 25: /* declaration: KW_PROTECTED ':'  */
#line 548 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
#line 4123 "built/tmp/cppBison.yxx.c"
    break;

  case 26: /* declaration: KW_PRIVATE ':'  */
#line 552 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
#line 4131 "built/tmp/cppBison.yxx.c"
    break;

  case 27: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 556 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4156 "built/tmp/cppBison.yxx.c"
    break;

  case 28: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 577 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4187 "built/tmp/cppBison.yxx.c"
    break;

  case 29: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 604 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4212 "built/tmp/cppBison.yxx.c"
    break;

  case 30: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 625 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4245 "built/tmp/cppBison.yxx.c"
    break;

  case 31: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 654 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4285 "built/tmp/cppBison.yxx.c"
    break;

  case 32: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 690 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4332 "built/tmp/cppBison.yxx.c"
    break;

  case 33: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ')' ';'  */
#line 733 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4348 "built/tmp/cppBison.yxx.c"
    break;

  case 34: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 745 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4373 "built/tmp/cppBison.yxx.c"
    break;

  case 35: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 766 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4413 "built/tmp/cppBison.yxx.c"
    break;

  case 36: /* declaration: KW_MAKE_MAP_KEYS_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 802 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4451 "built/tmp/cppBison.yxx.c"
    break;

  case 37: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 836 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4477 "built/tmp/cppBison.yxx.c"
    break;

  case 38: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 858 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4517 "built/tmp/cppBison.yxx.c"
    break;

  case 39: /* declaration: KW_MAKE_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 894 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4543 "built/tmp/cppBison.yxx.c"
    break;

  case 40: /* declaration: KW_STATIC_ASSERT '(' const_expr ',' string_literal ')' ';'  */
#line 916 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4558 "built/tmp/cppBison.yxx.c"
    break;

  case 41: /* declaration: KW_STATIC_ASSERT '(' const_expr ')' ';'  */
#line 927 "dtool/src/cppparser/cppBison.yxx"
{
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4572 "built/tmp/cppBison.yxx.c"
    break;

  case 42: /* $@2: %empty  */
#line 940 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4582 "built/tmp/cppBison.yxx.c"
    break;

  case 43: /* friend_declaration: KW_FRIEND $@2 declaration  */
#line 946 "dtool/src/cppparser/cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
#line 4591 "built/tmp/cppBison.yxx.c"
    break;

  case 44: /* storage_class: empty  */
#line 955 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 4599 "built/tmp/cppBison.yxx.c"
    break;

  case 45: /* storage_class: KW_CONST storage_class  */
#line 959 "dtool/src/cppparser/cppBison.yxx"
{
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4608 "built/tmp/cppBison.yxx.c"
    break;

  case 46: /* storage_class: KW_EXTERN storage_class  */
#line 964 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4616 "built/tmp/cppBison.yxx.c"
    break;

  case 47: /* storage_class: KW_EXTERN SIMPLE_STRING storage_class  */
#line 968 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4631 "built/tmp/cppBison.yxx.c"
    break;

  case 48: /* storage_class: KW_STATIC storage_class  */
#line 979 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4639 "built/tmp/cppBison.yxx.c"
    break;

  case 49: /* storage_class: KW_INLINE storage_class  */
#line 983 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4647 "built/tmp/cppBison.yxx.c"
    break;

  case 50: /* storage_class: KW_VIRTUAL storage_class  */
#line 987 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4655 "built/tmp/cppBison.yxx.c"
    break;

  case 51: /* storage_class: KW_EXPLICIT storage_class  */
#line 991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4663 "built/tmp/cppBison.yxx.c"
    break;

  case 52: /* storage_class: KW_REGISTER storage_class  */
#line 995 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4671 "built/tmp/cppBison.yxx.c"
    break;

  case 53: /* storage_class: KW_VOLATILE storage_class  */
#line 999 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4679 "built/tmp/cppBison.yxx.c"
    break;

  case 54: /* storage_class: KW_MUTABLE storage_class  */
#line 1003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4687 "built/tmp/cppBison.yxx.c"
    break;

  case 55: /* storage_class: KW_CONSTEXPR storage_class  */
#line 1007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4695 "built/tmp/cppBison.yxx.c"
    break;

  case 56: /* storage_class: KW_BLOCKING storage_class  */
#line 1011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4703 "built/tmp/cppBison.yxx.c"
    break;

  case 57: /* storage_class: KW_EXTENSION storage_class  */
#line 1015 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4711 "built/tmp/cppBison.yxx.c"
    break;

  case 58: /* storage_class: KW_THREAD_LOCAL storage_class  */
#line 1019 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4719 "built/tmp/cppBison.yxx.c"
    break;

  case 59: /* storage_class: ATTR_LEFT attribute_specifiers ATTR_RIGHT storage_class  */
#line 1023 "dtool/src/cppparser/cppBison.yxx"
{
  // Ignore attribute specifiers for now.
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4728 "built/tmp/cppBison.yxx.c"
    break;

  case 60: /* storage_class: KW_ALIGNAS '(' const_expr ')' storage_class  */
#line 1028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4736 "built/tmp/cppBison.yxx.c"
    break;

  case 61: /* storage_class: KW_ALIGNAS '(' type_decl ')' storage_class  */
#line 1032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer);
}
#line 4744 "built/tmp/cppBison.yxx.c"
    break;

  case 71: /* $@3: %empty  */
#line 1057 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4759 "built/tmp/cppBison.yxx.c"
    break;

  case 72: /* type_like_declaration: storage_class var_type_decl $@3 multiple_instance_identifiers  */
#line 1068 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4767 "built/tmp/cppBison.yxx.c"
    break;

  case 73: /* type_like_declaration: storage_class type_decl ';'  */
#line 1073 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4780 "built/tmp/cppBison.yxx.c"
    break;

  case 74: /* $@4: %empty  */
#line 1082 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4793 "built/tmp/cppBison.yxx.c"
    break;

  case 75: /* type_like_declaration: storage_class constructor_prototype $@4 maybe_initialize_or_constructor_body  */
#line 1091 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4805 "built/tmp/cppBison.yxx.c"
    break;

  case 76: /* type_like_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1099 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4817 "built/tmp/cppBison.yxx.c"
    break;

  case 78: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1115 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4832 "built/tmp/cppBison.yxx.c"
    break;

  case 79: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' multiple_instance_identifiers  */
#line 1126 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4847 "built/tmp/cppBison.yxx.c"
    break;

  case 80: /* $@5: %empty  */
#line 1141 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4862 "built/tmp/cppBison.yxx.c"
    break;

  case 81: /* typedef_declaration: storage_class var_type_decl $@5 typedef_instance_identifiers  */
#line 1152 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4870 "built/tmp/cppBison.yxx.c"
    break;

  case 82: /* typedef_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1156 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4886 "built/tmp/cppBison.yxx.c"
    break;

  case 83: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1171 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4899 "built/tmp/cppBison.yxx.c"
    break;

  case 84: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' typedef_instance_identifiers  */
#line 1180 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4912 "built/tmp/cppBison.yxx.c"
    break;

  case 85: /* $@6: %empty  */
#line 1194 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4929 "built/tmp/cppBison.yxx.c"
    break;

  case 86: /* constructor_prototype: IDENTIFIER '(' $@6 function_parameter_list ')' function_post  */
#line 1207 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-5].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-5].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-5]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 4957 "built/tmp/cppBison.yxx.c"
    break;

  case 87: /* $@7: %empty  */
#line 1233 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-2].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4974 "built/tmp/cppBison.yxx.c"
    break;

  case 88: /* constructor_prototype: TYPENAME_IDENTIFIER '(' IDENTIFIER ')' '(' $@7 function_parameter_list ')' function_post  */
#line 1246 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-8].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-8]).file);
}
#line 4992 "built/tmp/cppBison.yxx.c"
    break;

  case 89: /* $@8: %empty  */
#line 1260 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5009 "built/tmp/cppBison.yxx.c"
    break;

  case 90: /* constructor_prototype: TYPENAME_IDENTIFIER '(' $@8 function_parameter_list ')' function_post  */
#line 1273 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
#line 5031 "built/tmp/cppBison.yxx.c"
    break;

  case 91: /* $@9: %empty  */
#line 1296 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5039 "built/tmp/cppBison.yxx.c"
    break;

  case 92: /* function_prototype: '~' name '(' $@9 function_parameter_list ')' function_post  */
#line 1300 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]));
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
#line 5062 "built/tmp/cppBison.yxx.c"
    break;

  case 93: /* $@10: %empty  */
#line 1326 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5070 "built/tmp/cppBison.yxx.c"
    break;

  case 94: /* function_prototype: TYPENAME_IDENTIFIER '(' '*' instance_identifier ')' '(' $@10 function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 1330 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
#line 5088 "built/tmp/cppBison.yxx.c"
    break;

  case 95: /* $@11: %empty  */
#line 1344 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5096 "built/tmp/cppBison.yxx.c"
    break;

  case 96: /* function_prototype: TYPENAME_IDENTIFIER '(' SCOPING '*' instance_identifier ')' '(' $@11 function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 1348 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-7].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-9].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5114 "built/tmp/cppBison.yxx.c"
    break;

  case 97: /* $@12: %empty  */
#line 1364 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5124 "built/tmp/cppBison.yxx.c"
    break;

  case 98: /* function_prototype: KW_OPERATOR type not_paren_formal_parameter_identifier '(' $@12 function_parameter_list ')' function_post  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5153 "built/tmp/cppBison.yxx.c"
    break;

  case 99: /* $@13: %empty  */
#line 1395 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5163 "built/tmp/cppBison.yxx.c"
    break;

  case 100: /* function_prototype: KW_OPERATOR KW_CONST type not_paren_formal_parameter_identifier '(' $@13 function_parameter_list ')' function_post  */
#line 1401 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5183 "built/tmp/cppBison.yxx.c"
    break;

  case 101: /* function_prototype: IDENTIFIER  */
#line 1421 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5197 "built/tmp/cppBison.yxx.c"
    break;

  case 102: /* function_post: empty  */
#line 1434 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 5205 "built/tmp/cppBison.yxx.c"
    break;

  case 103: /* function_post: function_post KW_CONST  */
#line 1438 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5213 "built/tmp/cppBison.yxx.c"
    break;

  case 104: /* function_post: function_post KW_VOLATILE  */
#line 1442 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5221 "built/tmp/cppBison.yxx.c"
    break;

  case 105: /* function_post: function_post KW_NOEXCEPT  */
#line 1446 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5229 "built/tmp/cppBison.yxx.c"
    break;

  case 106: /* function_post: function_post KW_FINAL  */
#line 1459 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5237 "built/tmp/cppBison.yxx.c"
    break;

  case 107: /* function_post: function_post KW_OVERRIDE  */
#line 1463 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5245 "built/tmp/cppBison.yxx.c"
    break;

  case 108: /* function_post: function_post '&'  */
#line 1467 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5253 "built/tmp/cppBison.yxx.c"
    break;

  case 109: /* function_post: function_post ANDAND  */
#line 1471 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5261 "built/tmp/cppBison.yxx.c"
    break;

  case 110: /* function_post: function_post KW_MUTABLE  */
#line 1475 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5270 "built/tmp/cppBison.yxx.c"
    break;

  case 111: /* function_post: function_post KW_CONSTEXPR  */
#line 1480 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5279 "built/tmp/cppBison.yxx.c"
    break;

  case 112: /* function_post: function_post KW_THROW '(' ')'  */
#line 1485 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5287 "built/tmp/cppBison.yxx.c"
    break;

  case 113: /* function_post: function_post KW_THROW '(' name ')'  */
#line 1489 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5295 "built/tmp/cppBison.yxx.c"
    break;

  case 114: /* function_post: function_post KW_THROW '(' name ELLIPSIS ')'  */
#line 1493 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5303 "built/tmp/cppBison.yxx.c"
    break;

  case 115: /* function_post: function_post ATTR_LEFT attribute_specifiers ATTR_RIGHT  */
#line 1497 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5311 "built/tmp/cppBison.yxx.c"
    break;

  case 116: /* function_operator: '!'  */
#line 1504 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!";
}
#line 5319 "built/tmp/cppBison.yxx.c"
    break;

  case 117: /* function_operator: '~'  */
#line 1508 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "~";
}
#line 5327 "built/tmp/cppBison.yxx.c"
    break;

  case 118: /* function_operator: '*'  */
#line 1512 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*";
}
#line 5335 "built/tmp/cppBison.yxx.c"
    break;

  case 119: /* function_operator: '/'  */
#line 1516 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/";
}
#line 5343 "built/tmp/cppBison.yxx.c"
    break;

  case 120: /* function_operator: '%'  */
#line 1520 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%";
}
#line 5351 "built/tmp/cppBison.yxx.c"
    break;

  case 121: /* function_operator: '+'  */
#line 1524 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+";
}
#line 5359 "built/tmp/cppBison.yxx.c"
    break;

  case 122: /* function_operator: '-'  */
#line 1528 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-";
}
#line 5367 "built/tmp/cppBison.yxx.c"
    break;

  case 123: /* function_operator: '|'  */
#line 1532 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|";
}
#line 5375 "built/tmp/cppBison.yxx.c"
    break;

  case 124: /* function_operator: '&'  */
#line 1536 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&";
}
#line 5383 "built/tmp/cppBison.yxx.c"
    break;

  case 125: /* function_operator: '^'  */
#line 1540 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^";
}
#line 5391 "built/tmp/cppBison.yxx.c"
    break;

  case 126: /* function_operator: OROR  */
#line 1544 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "||";
}
#line 5399 "built/tmp/cppBison.yxx.c"
    break;

  case 127: /* function_operator: ANDAND  */
#line 1548 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&&";
}
#line 5407 "built/tmp/cppBison.yxx.c"
    break;

  case 128: /* function_operator: EQCOMPARE  */
#line 1552 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "==";
}
#line 5415 "built/tmp/cppBison.yxx.c"
    break;

  case 129: /* function_operator: NECOMPARE  */
#line 1556 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!=";
}
#line 5423 "built/tmp/cppBison.yxx.c"
    break;

  case 130: /* function_operator: LECOMPARE  */
#line 1560 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=";
}
#line 5431 "built/tmp/cppBison.yxx.c"
    break;

  case 131: /* function_operator: GECOMPARE  */
#line 1564 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">=";
}
#line 5439 "built/tmp/cppBison.yxx.c"
    break;

  case 132: /* function_operator: '<'  */
#line 1568 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<";
}
#line 5447 "built/tmp/cppBison.yxx.c"
    break;

  case 133: /* function_operator: '>'  */
#line 1572 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">";
}
#line 5455 "built/tmp/cppBison.yxx.c"
    break;

  case 134: /* function_operator: LSHIFT  */
#line 1576 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<";
}
#line 5463 "built/tmp/cppBison.yxx.c"
    break;

  case 135: /* function_operator: RSHIFT  */
#line 1580 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>";
}
#line 5471 "built/tmp/cppBison.yxx.c"
    break;

  case 136: /* function_operator: '='  */
#line 1584 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "=";
}
#line 5479 "built/tmp/cppBison.yxx.c"
    break;

  case 137: /* function_operator: ','  */
#line 1588 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ",";
}
#line 5487 "built/tmp/cppBison.yxx.c"
    break;

  case 138: /* function_operator: PLUSPLUS  */
#line 1592 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "++";
}
#line 5495 "built/tmp/cppBison.yxx.c"
    break;

  case 139: /* function_operator: MINUSMINUS  */
#line 1596 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "--";
}
#line 5503 "built/tmp/cppBison.yxx.c"
    break;

  case 140: /* function_operator: TIMESEQUAL  */
#line 1600 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*=";
}
#line 5511 "built/tmp/cppBison.yxx.c"
    break;

  case 141: /* function_operator: DIVIDEEQUAL  */
#line 1604 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/=";
}
#line 5519 "built/tmp/cppBison.yxx.c"
    break;

  case 142: /* function_operator: MODEQUAL  */
#line 1608 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%=";
}
#line 5527 "built/tmp/cppBison.yxx.c"
    break;

  case 143: /* function_operator: PLUSEQUAL  */
#line 1612 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+=";
}
#line 5535 "built/tmp/cppBison.yxx.c"
    break;

  case 144: /* function_operator: MINUSEQUAL  */
#line 1616 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-=";
}
#line 5543 "built/tmp/cppBison.yxx.c"
    break;

  case 145: /* function_operator: OREQUAL  */
#line 1620 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|=";
}
#line 5551 "built/tmp/cppBison.yxx.c"
    break;

  case 146: /* function_operator: ANDEQUAL  */
#line 1624 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&=";
}
#line 5559 "built/tmp/cppBison.yxx.c"
    break;

  case 147: /* function_operator: XOREQUAL  */
#line 1628 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^=";
}
#line 5567 "built/tmp/cppBison.yxx.c"
    break;

  case 148: /* function_operator: LSHIFTEQUAL  */
#line 1632 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<=";
}
#line 5575 "built/tmp/cppBison.yxx.c"
    break;

  case 149: /* function_operator: RSHIFTEQUAL  */
#line 1636 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>=";
}
#line 5583 "built/tmp/cppBison.yxx.c"
    break;

  case 150: /* function_operator: POINTSAT  */
#line 1640 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "->";
}
#line 5591 "built/tmp/cppBison.yxx.c"
    break;

  case 151: /* function_operator: '[' ']'  */
#line 1644 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "[]";
}
#line 5599 "built/tmp/cppBison.yxx.c"
    break;

  case 152: /* function_operator: '(' ')'  */
#line 1648 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "()";
}
#line 5607 "built/tmp/cppBison.yxx.c"
    break;

  case 153: /* function_operator: KW_NEW  */
#line 1652 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "new";
}
#line 5615 "built/tmp/cppBison.yxx.c"
    break;

  case 154: /* function_operator: KW_DELETE  */
#line 1656 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "delete";
}
#line 5623 "built/tmp/cppBison.yxx.c"
    break;

  case 159: /* $@14: %empty  */
#line 1670 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5631 "built/tmp/cppBison.yxx.c"
    break;

  case 160: /* template_declaration: KW_TEMPLATE $@14 '<' template_formal_parameters '>' more_template_declaration  */
#line 1674 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 5639 "built/tmp/cppBison.yxx.c"
    break;

  case 165: /* template_nonempty_formal_parameters: template_formal_parameter  */
#line 1688 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5649 "built/tmp/cppBison.yxx.c"
    break;

  case 166: /* template_nonempty_formal_parameters: template_nonempty_formal_parameters ',' template_formal_parameter  */
#line 1694 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5659 "built/tmp/cppBison.yxx.c"
    break;

  case 169: /* template_formal_parameter: typename_keyword  */
#line 1708 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5667 "built/tmp/cppBison.yxx.c"
    break;

  case 170: /* template_formal_parameter: typename_keyword name  */
#line 1712 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5675 "built/tmp/cppBison.yxx.c"
    break;

  case 171: /* template_formal_parameter: typename_keyword name '=' full_type  */
#line 1716 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5683 "built/tmp/cppBison.yxx.c"
    break;

  case 172: /* template_formal_parameter: typename_keyword ELLIPSIS  */
#line 1720 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5693 "built/tmp/cppBison.yxx.c"
    break;

  case 173: /* template_formal_parameter: typename_keyword ELLIPSIS name  */
#line 1726 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5703 "built/tmp/cppBison.yxx.c"
    break;

  case 174: /* template_formal_parameter: template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1732 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5713 "built/tmp/cppBison.yxx.c"
    break;

  case 175: /* template_formal_parameter: KW_CONST template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1738 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5724 "built/tmp/cppBison.yxx.c"
    break;

  case 176: /* template_formal_parameter: template_formal_parameter_type parameter_pack_identifier  */
#line 1745 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5733 "built/tmp/cppBison.yxx.c"
    break;

  case 177: /* template_formal_parameter: KW_CONST template_formal_parameter_type parameter_pack_identifier  */
#line 1750 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5743 "built/tmp/cppBison.yxx.c"
    break;

  case 178: /* template_formal_parameter_type: simple_type  */
#line 1759 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5751 "built/tmp/cppBison.yxx.c"
    break;

  case 179: /* template_formal_parameter_type: IDENTIFIER  */
#line 1763 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5760 "built/tmp/cppBison.yxx.c"
    break;

  case 180: /* template_formal_parameter_type: TYPENAME_IDENTIFIER  */
#line 1768 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5772 "built/tmp/cppBison.yxx.c"
    break;

  case 181: /* template_formal_parameter_type: TYPEPACK_IDENTIFIER  */
#line 1776 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5784 "built/tmp/cppBison.yxx.c"
    break;

  case 182: /* instance_identifier: name_no_final optional_attributes  */
#line 1788 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
}
#line 5792 "built/tmp/cppBison.yxx.c"
    break;

  case 183: /* instance_identifier: KW_OPERATOR function_operator optional_attributes  */
#line 1792 "dtool/src/cppparser/cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[-1].str), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[-1].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5810 "built/tmp/cppBison.yxx.c"
    break;

  case 184: /* instance_identifier: KW_OPERATOR SIMPLE_STRING IDENTIFIER optional_attributes  */
#line 1806 "dtool/src/cppparser/cppBison.yxx"
{
  // A C++11 literal operator.
  if (!(yyvsp[-2].str).empty()) {
    yyerror("expected empty string", (yylsp[-2]));
  }
  CPPIdentifier *ident = (yyvsp[-3].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name(), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
#line 5829 "built/tmp/cppBison.yxx.c"
    break;

  case 185: /* instance_identifier: KW_CONST instance_identifier  */
#line 1821 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5838 "built/tmp/cppBison.yxx.c"
    break;

  case 186: /* instance_identifier: KW_VOLATILE instance_identifier  */
#line 1826 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5847 "built/tmp/cppBison.yxx.c"
    break;

  case 187: /* instance_identifier: '*' optional_attributes instance_identifier  */
#line 1831 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 5856 "built/tmp/cppBison.yxx.c"
    break;

  case 188: /* instance_identifier: '&' optional_attributes instance_identifier  */
#line 1836 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 5865 "built/tmp/cppBison.yxx.c"
    break;

  case 189: /* instance_identifier: ANDAND optional_attributes instance_identifier  */
#line 1841 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 5874 "built/tmp/cppBison.yxx.c"
    break;

  case 190: /* instance_identifier: SCOPING '*' optional_attributes instance_identifier  */
#line 1846 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 5883 "built/tmp/cppBison.yxx.c"
    break;

  case 191: /* instance_identifier: instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 1851 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 5892 "built/tmp/cppBison.yxx.c"
    break;

  case 192: /* instance_identifier: '(' instance_identifier ')'  */
#line 1856 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5901 "built/tmp/cppBison.yxx.c"
    break;

  case 193: /* $@15: %empty  */
#line 1861 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5918 "built/tmp/cppBison.yxx.c"
    break;

  case 194: /* instance_identifier: instance_identifier '(' $@15 formal_parameter_list ')' function_post  */
#line 1874 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
#line 5936 "built/tmp/cppBison.yxx.c"
    break;

  case 195: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier maybe_trailing_return_type  */
#line 1892 "dtool/src/cppparser/cppBison.yxx"
{
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5950 "built/tmp/cppBison.yxx.c"
    break;

  case 196: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier ':' const_expr  */
#line 1902 "dtool/src/cppparser/cppBison.yxx"
{
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.expr);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5960 "built/tmp/cppBison.yxx.c"
    break;

  case 197: /* maybe_trailing_return_type: empty  */
#line 1912 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = nullptr;
}
#line 5968 "built/tmp/cppBison.yxx.c"
    break;

  case 198: /* maybe_trailing_return_type: POINTSAT predefined_type empty_instance_identifier  */
#line 1916 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5976 "built/tmp/cppBison.yxx.c"
    break;

  case 199: /* maybe_trailing_return_type: POINTSAT KW_CONST predefined_type empty_instance_identifier  */
#line 1920 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 5985 "built/tmp/cppBison.yxx.c"
    break;

  case 200: /* maybe_comma_identifier: empty  */
#line 1929 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = nullptr;
}
#line 5993 "built/tmp/cppBison.yxx.c"
    break;

  case 201: /* maybe_comma_identifier: ',' IDENTIFIER  */
#line 1933 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6001 "built/tmp/cppBison.yxx.c"
    break;

  case 202: /* function_parameter_list: empty  */
#line 1941 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6009 "built/tmp/cppBison.yxx.c"
    break;

  case 203: /* function_parameter_list: ELLIPSIS  */
#line 1945 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6018 "built/tmp/cppBison.yxx.c"
    break;

  case 204: /* function_parameter_list: function_parameters  */
#line 1950 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6026 "built/tmp/cppBison.yxx.c"
    break;

  case 205: /* function_parameter_list: function_parameters ',' ELLIPSIS  */
#line 1954 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6035 "built/tmp/cppBison.yxx.c"
    break;

  case 206: /* function_parameter_list: function_parameters ELLIPSIS  */
#line 1959 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6044 "built/tmp/cppBison.yxx.c"
    break;

  case 207: /* function_parameters: function_parameter  */
#line 1967 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6053 "built/tmp/cppBison.yxx.c"
    break;

  case 208: /* function_parameters: function_parameters ',' function_parameter  */
#line 1972 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6062 "built/tmp/cppBison.yxx.c"
    break;

  case 209: /* formal_parameter_list: empty  */
#line 1980 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6070 "built/tmp/cppBison.yxx.c"
    break;

  case 210: /* formal_parameter_list: ELLIPSIS  */
#line 1984 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6079 "built/tmp/cppBison.yxx.c"
    break;

  case 211: /* formal_parameter_list: formal_parameters  */
#line 1989 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6087 "built/tmp/cppBison.yxx.c"
    break;

  case 212: /* formal_parameter_list: formal_parameters ',' ELLIPSIS  */
#line 1993 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6096 "built/tmp/cppBison.yxx.c"
    break;

  case 213: /* formal_parameter_list: formal_parameters ELLIPSIS  */
#line 1998 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6105 "built/tmp/cppBison.yxx.c"
    break;

  case 214: /* formal_parameters: formal_parameter  */
#line 2006 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6114 "built/tmp/cppBison.yxx.c"
    break;

  case 215: /* formal_parameters: formal_parameters ',' formal_parameter  */
#line 2011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6123 "built/tmp/cppBison.yxx.c"
    break;

  case 216: /* template_parameter_maybe_initialize: empty  */
#line 2019 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6131 "built/tmp/cppBison.yxx.c"
    break;

  case 217: /* template_parameter_maybe_initialize: '=' no_angle_bracket_const_expr  */
#line 2023 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6139 "built/tmp/cppBison.yxx.c"
    break;

  case 218: /* maybe_initialize: empty  */
#line 2030 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6147 "built/tmp/cppBison.yxx.c"
    break;

  case 219: /* maybe_initialize: '=' const_expr  */
#line 2034 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6155 "built/tmp/cppBison.yxx.c"
    break;

  case 220: /* maybe_initialize_or_constructor_body: ';'  */
#line 2041 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6163 "built/tmp/cppBison.yxx.c"
    break;

  case 221: /* maybe_initialize_or_constructor_body: '{' code '}'  */
#line 2045 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6171 "built/tmp/cppBison.yxx.c"
    break;

  case 222: /* maybe_initialize_or_constructor_body: ':' constructor_inits '{' code '}'  */
#line 2049 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6179 "built/tmp/cppBison.yxx.c"
    break;

  case 223: /* maybe_initialize_or_constructor_body: '=' KW_DEFAULT ';'  */
#line 2053 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6187 "built/tmp/cppBison.yxx.c"
    break;

  case 224: /* maybe_initialize_or_constructor_body: '=' KW_DELETE ';'  */
#line 2057 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6195 "built/tmp/cppBison.yxx.c"
    break;

  case 225: /* maybe_initialize_or_function_body: ';'  */
#line 2064 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6203 "built/tmp/cppBison.yxx.c"
    break;

  case 226: /* maybe_initialize_or_function_body: '{' code '}'  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6211 "built/tmp/cppBison.yxx.c"
    break;

  case 227: /* maybe_initialize_or_function_body: '=' const_expr ';'  */
#line 2072 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6219 "built/tmp/cppBison.yxx.c"
    break;

  case 228: /* maybe_initialize_or_function_body: '=' KW_DEFAULT ';'  */
#line 2076 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6227 "built/tmp/cppBison.yxx.c"
    break;

  case 229: /* maybe_initialize_or_function_body: '=' KW_DELETE ';'  */
#line 2080 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6235 "built/tmp/cppBison.yxx.c"
    break;

  case 230: /* maybe_initialize_or_function_body: '=' '{' structure_init '}'  */
#line 2084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6243 "built/tmp/cppBison.yxx.c"
    break;

  case 234: /* structure_init_body: const_expr  */
#line 2097 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 6250 "built/tmp/cppBison.yxx.c"
    break;

  case 238: /* function_parameter: type formal_parameter_identifier maybe_initialize  */
#line 2106 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6259 "built/tmp/cppBison.yxx.c"
    break;

  case 239: /* function_parameter: KW_CONST type formal_parameter_identifier maybe_initialize  */
#line 2111 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6269 "built/tmp/cppBison.yxx.c"
    break;

  case 240: /* function_parameter: KW_CONST KW_REGISTER type formal_parameter_identifier maybe_initialize  */
#line 2117 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6279 "built/tmp/cppBison.yxx.c"
    break;

  case 241: /* function_parameter: type_pack parameter_pack_identifier maybe_initialize  */
#line 2123 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6288 "built/tmp/cppBison.yxx.c"
    break;

  case 242: /* function_parameter: KW_CONST type_pack parameter_pack_identifier maybe_initialize  */
#line 2128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6298 "built/tmp/cppBison.yxx.c"
    break;

  case 243: /* function_parameter: KW_CONST KW_REGISTER type_pack parameter_pack_identifier maybe_initialize  */
#line 2134 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6308 "built/tmp/cppBison.yxx.c"
    break;

  case 244: /* function_parameter: KW_REGISTER function_parameter  */
#line 2140 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6316 "built/tmp/cppBison.yxx.c"
    break;

  case 245: /* function_parameter: ATTR_LEFT attribute_specifiers ATTR_RIGHT function_parameter  */
#line 2144 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6324 "built/tmp/cppBison.yxx.c"
    break;

  case 246: /* formal_parameter: function_parameter  */
#line 2155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6332 "built/tmp/cppBison.yxx.c"
    break;

  case 247: /* formal_parameter: formal_const_expr  */
#line 2159 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6343 "built/tmp/cppBison.yxx.c"
    break;

  case 248: /* not_paren_formal_parameter_identifier: empty  */
#line 2169 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6351 "built/tmp/cppBison.yxx.c"
    break;

  case 249: /* not_paren_formal_parameter_identifier: name_no_final optional_attributes  */
#line 2173 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
}
#line 6359 "built/tmp/cppBison.yxx.c"
    break;

  case 250: /* not_paren_formal_parameter_identifier: KW_CONST not_paren_formal_parameter_identifier  */
#line 2177 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6368 "built/tmp/cppBison.yxx.c"
    break;

  case 251: /* not_paren_formal_parameter_identifier: KW_VOLATILE not_paren_formal_parameter_identifier  */
#line 2182 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6377 "built/tmp/cppBison.yxx.c"
    break;

  case 252: /* not_paren_formal_parameter_identifier: '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2187 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6386 "built/tmp/cppBison.yxx.c"
    break;

  case 253: /* not_paren_formal_parameter_identifier: '&' optional_attributes not_paren_formal_parameter_identifier  */
#line 2192 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6395 "built/tmp/cppBison.yxx.c"
    break;

  case 254: /* not_paren_formal_parameter_identifier: ANDAND optional_attributes not_paren_formal_parameter_identifier  */
#line 2197 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6404 "built/tmp/cppBison.yxx.c"
    break;

  case 255: /* not_paren_formal_parameter_identifier: SCOPING '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2202 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 6413 "built/tmp/cppBison.yxx.c"
    break;

  case 256: /* not_paren_formal_parameter_identifier: not_paren_formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2207 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 6422 "built/tmp/cppBison.yxx.c"
    break;

  case 257: /* formal_parameter_identifier: empty  */
#line 2215 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6430 "built/tmp/cppBison.yxx.c"
    break;

  case 258: /* formal_parameter_identifier: name_no_final optional_attributes  */
#line 2219 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
}
#line 6438 "built/tmp/cppBison.yxx.c"
    break;

  case 259: /* formal_parameter_identifier: KW_CONST formal_parameter_identifier  */
#line 2223 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6447 "built/tmp/cppBison.yxx.c"
    break;

  case 260: /* formal_parameter_identifier: KW_VOLATILE formal_parameter_identifier  */
#line 2228 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6456 "built/tmp/cppBison.yxx.c"
    break;

  case 261: /* formal_parameter_identifier: '*' optional_attributes formal_parameter_identifier  */
#line 2233 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6465 "built/tmp/cppBison.yxx.c"
    break;

  case 262: /* formal_parameter_identifier: '&' optional_attributes formal_parameter_identifier  */
#line 2238 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6474 "built/tmp/cppBison.yxx.c"
    break;

  case 263: /* formal_parameter_identifier: ANDAND optional_attributes formal_parameter_identifier  */
#line 2243 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6483 "built/tmp/cppBison.yxx.c"
    break;

  case 264: /* formal_parameter_identifier: SCOPING '*' optional_attributes formal_parameter_identifier  */
#line 2248 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 6492 "built/tmp/cppBison.yxx.c"
    break;

  case 265: /* formal_parameter_identifier: formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2253 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 6501 "built/tmp/cppBison.yxx.c"
    break;

  case 266: /* formal_parameter_identifier: '(' formal_parameter_identifier ')' '(' function_parameter_list ')' function_post  */
#line 2258 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6511 "built/tmp/cppBison.yxx.c"
    break;

  case 267: /* formal_parameter_identifier: '(' formal_parameter_identifier ')'  */
#line 2264 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6520 "built/tmp/cppBison.yxx.c"
    break;

  case 268: /* parameter_pack_identifier: ELLIPSIS  */
#line 2272 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6529 "built/tmp/cppBison.yxx.c"
    break;

  case 269: /* parameter_pack_identifier: ELLIPSIS name optional_attributes  */
#line 2277 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6538 "built/tmp/cppBison.yxx.c"
    break;

  case 270: /* parameter_pack_identifier: KW_CONST parameter_pack_identifier  */
#line 2282 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6547 "built/tmp/cppBison.yxx.c"
    break;

  case 271: /* parameter_pack_identifier: KW_VOLATILE parameter_pack_identifier  */
#line 2287 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6556 "built/tmp/cppBison.yxx.c"
    break;

  case 272: /* parameter_pack_identifier: '*' optional_attributes parameter_pack_identifier  */
#line 2292 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6565 "built/tmp/cppBison.yxx.c"
    break;

  case 273: /* parameter_pack_identifier: '&' optional_attributes parameter_pack_identifier  */
#line 2297 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6574 "built/tmp/cppBison.yxx.c"
    break;

  case 274: /* parameter_pack_identifier: ANDAND optional_attributes parameter_pack_identifier  */
#line 2302 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6583 "built/tmp/cppBison.yxx.c"
    break;

  case 275: /* parameter_pack_identifier: SCOPING '*' optional_attributes parameter_pack_identifier  */
#line 2307 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 6592 "built/tmp/cppBison.yxx.c"
    break;

  case 276: /* parameter_pack_identifier: parameter_pack_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2312 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 6601 "built/tmp/cppBison.yxx.c"
    break;

  case 277: /* parameter_pack_identifier: '(' parameter_pack_identifier ')' '(' function_parameter_list ')' function_post  */
#line 2317 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 6611 "built/tmp/cppBison.yxx.c"
    break;

  case 278: /* parameter_pack_identifier: '(' parameter_pack_identifier ')'  */
#line 2323 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6620 "built/tmp/cppBison.yxx.c"
    break;

  case 279: /* not_paren_empty_instance_identifier: empty  */
#line 2331 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6628 "built/tmp/cppBison.yxx.c"
    break;

  case 280: /* not_paren_empty_instance_identifier: ELLIPSIS  */
#line 2335 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6637 "built/tmp/cppBison.yxx.c"
    break;

  case 281: /* not_paren_empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2340 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6646 "built/tmp/cppBison.yxx.c"
    break;

  case 282: /* not_paren_empty_instance_identifier: KW_CONST not_paren_empty_instance_identifier  */
#line 2345 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6655 "built/tmp/cppBison.yxx.c"
    break;

  case 283: /* not_paren_empty_instance_identifier: KW_VOLATILE not_paren_empty_instance_identifier  */
#line 2350 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6664 "built/tmp/cppBison.yxx.c"
    break;

  case 284: /* not_paren_empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2355 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6673 "built/tmp/cppBison.yxx.c"
    break;

  case 285: /* not_paren_empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2360 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6682 "built/tmp/cppBison.yxx.c"
    break;

  case 286: /* not_paren_empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2365 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6691 "built/tmp/cppBison.yxx.c"
    break;

  case 287: /* not_paren_empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2370 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 6700 "built/tmp/cppBison.yxx.c"
    break;

  case 288: /* not_paren_empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2375 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 6709 "built/tmp/cppBison.yxx.c"
    break;

  case 289: /* empty_instance_identifier: empty  */
#line 2383 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6717 "built/tmp/cppBison.yxx.c"
    break;

  case 290: /* empty_instance_identifier: ELLIPSIS  */
#line 2387 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6726 "built/tmp/cppBison.yxx.c"
    break;

  case 291: /* empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2392 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6735 "built/tmp/cppBison.yxx.c"
    break;

  case 292: /* empty_instance_identifier: KW_CONST empty_instance_identifier  */
#line 2397 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6744 "built/tmp/cppBison.yxx.c"
    break;

  case 293: /* empty_instance_identifier: KW_VOLATILE empty_instance_identifier  */
#line 2402 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6753 "built/tmp/cppBison.yxx.c"
    break;

  case 294: /* empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2407 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
#line 6762 "built/tmp/cppBison.yxx.c"
    break;

  case 295: /* empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2412 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
#line 6771 "built/tmp/cppBison.yxx.c"
    break;

  case 296: /* empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2417 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
}
#line 6780 "built/tmp/cppBison.yxx.c"
    break;

  case 297: /* empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2422 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier));
}
#line 6789 "built/tmp/cppBison.yxx.c"
    break;

  case 298: /* empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2427 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr));
}
#line 6798 "built/tmp/cppBison.yxx.c"
    break;

  case 299: /* empty_instance_identifier: '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2432 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6808 "built/tmp/cppBison.yxx.c"
    break;

  case 300: /* empty_instance_identifier: '(' '*' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2438 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6819 "built/tmp/cppBison.yxx.c"
    break;

  case 301: /* empty_instance_identifier: '(' '&' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2445 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6830 "built/tmp/cppBison.yxx.c"
    break;

  case 302: /* empty_instance_identifier: '(' ANDAND optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post maybe_trailing_return_type  */
#line 2452 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), (yyvsp[0].u.type));
}
#line 6841 "built/tmp/cppBison.yxx.c"
    break;

  case 303: /* type: simple_type  */
#line 2462 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6849 "built/tmp/cppBison.yxx.c"
    break;

  case 304: /* type: TYPENAME_IDENTIFIER  */
#line 2466 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6861 "built/tmp/cppBison.yxx.c"
    break;

  case 305: /* type: KW_TYPENAME name  */
#line 2474 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6869 "built/tmp/cppBison.yxx.c"
    break;

  case 306: /* type: anonymous_struct  */
#line 2478 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6877 "built/tmp/cppBison.yxx.c"
    break;

  case 307: /* type: named_struct  */
#line 2482 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6885 "built/tmp/cppBison.yxx.c"
    break;

  case 308: /* type: enum  */
#line 2486 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6893 "built/tmp/cppBison.yxx.c"
    break;

  case 309: /* type: struct_keyword struct_attributes name  */
#line 2490 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6913 "built/tmp/cppBison.yxx.c"
    break;

  case 310: /* type: enum_keyword name_no_final ':' enum_element_type  */
#line 2506 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6933 "built/tmp/cppBison.yxx.c"
    break;

  case 311: /* type: KW_DECLTYPE '(' const_expr ')'  */
#line 2522 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6946 "built/tmp/cppBison.yxx.c"
    break;

  case 312: /* type: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2531 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6954 "built/tmp/cppBison.yxx.c"
    break;

  case 313: /* type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2535 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 6968 "built/tmp/cppBison.yxx.c"
    break;

  case 314: /* type: KW_AUTO  */
#line 2545 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6976 "built/tmp/cppBison.yxx.c"
    break;

  case 315: /* type_pack: TYPEPACK_IDENTIFIER  */
#line 2552 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6988 "built/tmp/cppBison.yxx.c"
    break;

  case 316: /* type_decl: simple_type  */
#line 2563 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6996 "built/tmp/cppBison.yxx.c"
    break;

  case 317: /* type_decl: TYPENAME_IDENTIFIER  */
#line 2567 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 7008 "built/tmp/cppBison.yxx.c"
    break;

  case 318: /* type_decl: KW_TYPENAME name  */
#line 2575 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7016 "built/tmp/cppBison.yxx.c"
    break;

  case 319: /* type_decl: anonymous_struct  */
#line 2579 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7024 "built/tmp/cppBison.yxx.c"
    break;

  case 320: /* type_decl: named_struct  */
#line 2583 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7032 "built/tmp/cppBison.yxx.c"
    break;

  case 321: /* type_decl: enum  */
#line 2587 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7040 "built/tmp/cppBison.yxx.c"
    break;

  case 322: /* type_decl: struct_keyword struct_attributes name  */
#line 2591 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7060 "built/tmp/cppBison.yxx.c"
    break;

  case 323: /* type_decl: enum_keyword name_no_final ':' enum_element_type  */
#line 2607 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-3]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7080 "built/tmp/cppBison.yxx.c"
    break;

  case 324: /* type_decl: enum_keyword name  */
#line 2623 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-1]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7102 "built/tmp/cppBison.yxx.c"
    break;

  case 325: /* type_decl: KW_DECLTYPE '(' const_expr ')'  */
#line 2641 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7115 "built/tmp/cppBison.yxx.c"
    break;

  case 326: /* type_decl: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2650 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7123 "built/tmp/cppBison.yxx.c"
    break;

  case 327: /* type_decl: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2654 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7137 "built/tmp/cppBison.yxx.c"
    break;

  case 328: /* type_decl: KW_AUTO  */
#line 2664 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7145 "built/tmp/cppBison.yxx.c"
    break;

  case 329: /* predefined_type: simple_type  */
#line 2671 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7153 "built/tmp/cppBison.yxx.c"
    break;

  case 330: /* predefined_type: TYPENAME_IDENTIFIER  */
#line 2675 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7165 "built/tmp/cppBison.yxx.c"
    break;

  case 331: /* predefined_type: KW_TYPENAME name  */
#line 2683 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7173 "built/tmp/cppBison.yxx.c"
    break;

  case 332: /* predefined_type: struct_keyword struct_attributes name  */
#line 2687 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7193 "built/tmp/cppBison.yxx.c"
    break;

  case 333: /* predefined_type: enum_keyword name  */
#line 2703 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7213 "built/tmp/cppBison.yxx.c"
    break;

  case 334: /* predefined_type: KW_DECLTYPE '(' const_expr ')'  */
#line 2719 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7226 "built/tmp/cppBison.yxx.c"
    break;

  case 335: /* predefined_type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2728 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7240 "built/tmp/cppBison.yxx.c"
    break;

  case 336: /* predefined_type: KW_AUTO  */
#line 2738 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7248 "built/tmp/cppBison.yxx.c"
    break;

  case 337: /* var_type_decl: type_decl  */
#line 2745 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7256 "built/tmp/cppBison.yxx.c"
    break;

  case 338: /* var_type_decl: IDENTIFIER  */
#line 2749 "dtool/src/cppparser/cppBison.yxx"
{
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7266 "built/tmp/cppBison.yxx.c"
    break;

  case 339: /* full_type: type empty_instance_identifier  */
#line 2757 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7274 "built/tmp/cppBison.yxx.c"
    break;

  case 340: /* full_type: KW_CONST type empty_instance_identifier  */
#line 2761 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7283 "built/tmp/cppBison.yxx.c"
    break;

  case 341: /* full_type: type_pack empty_instance_identifier  */
#line 2766 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7291 "built/tmp/cppBison.yxx.c"
    break;

  case 342: /* full_type: KW_CONST type_pack empty_instance_identifier  */
#line 2770 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7300 "built/tmp/cppBison.yxx.c"
    break;

  case 347: /* $@16: %empty  */
#line 2785 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7318 "built/tmp/cppBison.yxx.c"
    break;

  case 348: /* anonymous_struct: struct_keyword struct_attributes '{' $@16 cpp '}'  */
#line 2799 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7329 "built/tmp/cppBison.yxx.c"
    break;

  case 349: /* $@17: %empty  */
#line 2809 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7353 "built/tmp/cppBison.yxx.c"
    break;

  case 350: /* named_struct: struct_keyword struct_attributes name_no_final $@17 maybe_final maybe_class_derivation '{' cpp '}'  */
#line 2829 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7364 "built/tmp/cppBison.yxx.c"
    break;

  case 352: /* maybe_final: KW_FINAL  */
#line 2840 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->_final = true;
}
#line 7372 "built/tmp/cppBison.yxx.c"
    break;

  case 357: /* base_specification: class_derivation_name  */
#line 2857 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7380 "built/tmp/cppBison.yxx.c"
    break;

  case 358: /* base_specification: KW_PUBLIC class_derivation_name  */
#line 2861 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7388 "built/tmp/cppBison.yxx.c"
    break;

  case 359: /* base_specification: KW_PROTECTED class_derivation_name  */
#line 2865 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7396 "built/tmp/cppBison.yxx.c"
    break;

  case 360: /* base_specification: KW_PRIVATE class_derivation_name  */
#line 2869 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7404 "built/tmp/cppBison.yxx.c"
    break;

  case 361: /* base_specification: KW_VIRTUAL KW_PUBLIC class_derivation_name  */
#line 2873 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7412 "built/tmp/cppBison.yxx.c"
    break;

  case 362: /* base_specification: KW_VIRTUAL KW_PROTECTED class_derivation_name  */
#line 2877 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7420 "built/tmp/cppBison.yxx.c"
    break;

  case 363: /* base_specification: KW_VIRTUAL KW_PRIVATE class_derivation_name  */
#line 2881 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7428 "built/tmp/cppBison.yxx.c"
    break;

  case 364: /* base_specification: KW_PUBLIC KW_VIRTUAL class_derivation_name  */
#line 2885 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7436 "built/tmp/cppBison.yxx.c"
    break;

  case 365: /* base_specification: KW_PROTECTED KW_VIRTUAL class_derivation_name  */
#line 2889 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7444 "built/tmp/cppBison.yxx.c"
    break;

  case 366: /* base_specification: KW_PRIVATE KW_VIRTUAL class_derivation_name  */
#line 2893 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7452 "built/tmp/cppBison.yxx.c"
    break;

  case 367: /* $@18: %empty  */
#line 2900 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_enum->_scope != nullptr) {
    push_scope(current_enum->_scope);
  }
}
#line 7462 "built/tmp/cppBison.yxx.c"
    break;

  case 368: /* enum: enum_decl $@18 '{' enum_body '}'  */
#line 2906 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_enum->_scope != nullptr) {
    pop_scope();
  }
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7474 "built/tmp/cppBison.yxx.c"
    break;

  case 369: /* enum_decl: enum_keyword ':' enum_element_type  */
#line 2917 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-2]).file);
}
#line 7482 "built/tmp/cppBison.yxx.c"
    break;

  case 370: /* enum_decl: enum_keyword  */
#line 2921 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[0].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[0]).file);
}
#line 7490 "built/tmp/cppBison.yxx.c"
    break;

  case 371: /* enum_decl: enum_keyword name_no_final ':' enum_element_type  */
#line 2925 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-3]).file);
}
#line 7499 "built/tmp/cppBison.yxx.c"
    break;

  case 372: /* enum_decl: enum_keyword name_no_final  */
#line 2930 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-1]).file);
}
#line 7508 "built/tmp/cppBison.yxx.c"
    break;

  case 373: /* enum_element_type: simple_int_type  */
#line 2938 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7516 "built/tmp/cppBison.yxx.c"
    break;

  case 374: /* enum_element_type: TYPENAME_IDENTIFIER  */
#line 2942 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7524 "built/tmp/cppBison.yxx.c"
    break;

  case 376: /* enum_body_trailing_comma: enum_body_trailing_comma name ','  */
#line 2950 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]));
}
#line 7533 "built/tmp/cppBison.yxx.c"
    break;

  case 377: /* enum_body_trailing_comma: enum_body_trailing_comma name '=' const_expr ','  */
#line 2955 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-3]));
}
#line 7542 "built/tmp/cppBison.yxx.c"
    break;

  case 379: /* enum_body: enum_body_trailing_comma name  */
#line 2963 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[0]));
}
#line 7551 "built/tmp/cppBison.yxx.c"
    break;

  case 380: /* enum_body: enum_body_trailing_comma name '=' const_expr  */
#line 2968 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-2]));
}
#line 7560 "built/tmp/cppBison.yxx.c"
    break;

  case 381: /* enum_keyword: KW_ENUM  */
#line 2976 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7568 "built/tmp/cppBison.yxx.c"
    break;

  case 382: /* enum_keyword: KW_ENUM KW_CLASS  */
#line 2980 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7576 "built/tmp/cppBison.yxx.c"
    break;

  case 383: /* enum_keyword: KW_ENUM KW_STRUCT  */
#line 2984 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7584 "built/tmp/cppBison.yxx.c"
    break;

  case 384: /* struct_keyword: KW_CLASS  */
#line 2991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7592 "built/tmp/cppBison.yxx.c"
    break;

  case 385: /* struct_keyword: KW_STRUCT  */
#line 2995 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7600 "built/tmp/cppBison.yxx.c"
    break;

  case 386: /* struct_keyword: KW_UNION  */
#line 2999 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7608 "built/tmp/cppBison.yxx.c"
    break;

  case 387: /* $@19: %empty  */
#line 3006 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7630 "built/tmp/cppBison.yxx.c"
    break;

  case 388: /* namespace_declaration: KW_NAMESPACE name '{' $@19 cpp '}'  */
#line 3024 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7638 "built/tmp/cppBison.yxx.c"
    break;

  case 389: /* $@20: %empty  */
#line 3028 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7661 "built/tmp/cppBison.yxx.c"
    break;

  case 390: /* namespace_declaration: KW_INLINE KW_NAMESPACE name '{' $@20 cpp '}'  */
#line 3047 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7669 "built/tmp/cppBison.yxx.c"
    break;

  case 393: /* using_declaration: KW_USING name ';'  */
#line 3056 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7679 "built/tmp/cppBison.yxx.c"
    break;

  case 394: /* using_declaration: KW_USING name '=' full_type ';'  */
#line 3062 "dtool/src/cppparser/cppBison.yxx"
{
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-3].u.identifier), current_scope);
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-4]));
}
#line 7690 "built/tmp/cppBison.yxx.c"
    break;

  case 395: /* using_declaration: KW_USING KW_NAMESPACE name ';'  */
#line 3069 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7700 "built/tmp/cppBison.yxx.c"
    break;

  case 399: /* simple_int_type: KW_BOOL  */
#line 3084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7708 "built/tmp/cppBison.yxx.c"
    break;

  case 400: /* simple_int_type: KW_CHAR  */
#line 3088 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7716 "built/tmp/cppBison.yxx.c"
    break;

  case 401: /* simple_int_type: KW_WCHAR_T  */
#line 3092 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7724 "built/tmp/cppBison.yxx.c"
    break;

  case 402: /* simple_int_type: KW_CHAR16_T  */
#line 3096 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7732 "built/tmp/cppBison.yxx.c"
    break;

  case 403: /* simple_int_type: KW_CHAR32_T  */
#line 3100 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7740 "built/tmp/cppBison.yxx.c"
    break;

  case 404: /* simple_int_type: KW_SHORT  */
#line 3104 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7749 "built/tmp/cppBison.yxx.c"
    break;

  case 405: /* simple_int_type: KW_LONG  */
#line 3109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7758 "built/tmp/cppBison.yxx.c"
    break;

  case 406: /* simple_int_type: KW_UNSIGNED  */
#line 3114 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7767 "built/tmp/cppBison.yxx.c"
    break;

  case 407: /* simple_int_type: KW_SIGNED  */
#line 3119 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7776 "built/tmp/cppBison.yxx.c"
    break;

  case 408: /* simple_int_type: KW_INT  */
#line 3124 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7784 "built/tmp/cppBison.yxx.c"
    break;

  case 409: /* simple_int_type: KW_SHORT simple_int_type  */
#line 3128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7793 "built/tmp/cppBison.yxx.c"
    break;

  case 410: /* simple_int_type: KW_LONG simple_int_type  */
#line 3133 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7806 "built/tmp/cppBison.yxx.c"
    break;

  case 411: /* simple_int_type: KW_UNSIGNED simple_int_type  */
#line 3142 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7815 "built/tmp/cppBison.yxx.c"
    break;

  case 412: /* simple_int_type: KW_SIGNED simple_int_type  */
#line 3147 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7824 "built/tmp/cppBison.yxx.c"
    break;

  case 413: /* simple_float_type: KW_FLOAT  */
#line 3155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7832 "built/tmp/cppBison.yxx.c"
    break;

  case 414: /* simple_float_type: KW_DOUBLE  */
#line 3159 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7840 "built/tmp/cppBison.yxx.c"
    break;

  case 415: /* simple_float_type: KW_LONG KW_DOUBLE  */
#line 3163 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7849 "built/tmp/cppBison.yxx.c"
    break;

  case 416: /* simple_void_type: KW_VOID  */
#line 3171 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7857 "built/tmp/cppBison.yxx.c"
    break;

  case 417: /* $@21: %empty  */
#line 3180 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
#line 7865 "built/tmp/cppBison.yxx.c"
    break;

  case 418: /* code: $@21 code_block  */
#line 3184 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
#line 7873 "built/tmp/cppBison.yxx.c"
    break;

  case 526: /* element: KW_WHILE  */
#line 3228 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 7880 "built/tmp/cppBison.yxx.c"
    break;

  case 550: /* optional_const_expr: empty  */
#line 3237 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7888 "built/tmp/cppBison.yxx.c"
    break;

  case 551: /* optional_const_expr: const_expr  */
#line 3241 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7896 "built/tmp/cppBison.yxx.c"
    break;

  case 552: /* optional_const_expr_comma: empty  */
#line 3248 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7904 "built/tmp/cppBison.yxx.c"
    break;

  case 553: /* optional_const_expr_comma: const_expr_comma  */
#line 3252 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7912 "built/tmp/cppBison.yxx.c"
    break;

  case 554: /* const_expr_comma: const_expr  */
#line 3259 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7920 "built/tmp/cppBison.yxx.c"
    break;

  case 555: /* const_expr_comma: const_expr_comma ',' const_expr  */
#line 3263 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7928 "built/tmp/cppBison.yxx.c"
    break;

  case 556: /* no_angle_bracket_const_expr: const_operand  */
#line 3270 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7936 "built/tmp/cppBison.yxx.c"
    break;

  case 557: /* no_angle_bracket_const_expr: '(' full_type ')' no_angle_bracket_const_expr  */
#line 3274 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7944 "built/tmp/cppBison.yxx.c"
    break;

  case 558: /* no_angle_bracket_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3278 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7952 "built/tmp/cppBison.yxx.c"
    break;

  case 559: /* no_angle_bracket_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3282 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 7960 "built/tmp/cppBison.yxx.c"
    break;

  case 560: /* no_angle_bracket_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3286 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 7968 "built/tmp/cppBison.yxx.c"
    break;

  case 561: /* no_angle_bracket_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3290 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 7976 "built/tmp/cppBison.yxx.c"
    break;

  case 562: /* no_angle_bracket_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3294 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 7984 "built/tmp/cppBison.yxx.c"
    break;

  case 563: /* no_angle_bracket_const_expr: KW_SIZEOF no_angle_bracket_const_expr  */
#line 3298 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 7992 "built/tmp/cppBison.yxx.c"
    break;

  case 564: /* no_angle_bracket_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3302 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8000 "built/tmp/cppBison.yxx.c"
    break;

  case 565: /* no_angle_bracket_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3306 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8008 "built/tmp/cppBison.yxx.c"
    break;

  case 566: /* no_angle_bracket_const_expr: '!' no_angle_bracket_const_expr  */
#line 3310 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8016 "built/tmp/cppBison.yxx.c"
    break;

  case 567: /* no_angle_bracket_const_expr: '~' no_angle_bracket_const_expr  */
#line 3314 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8024 "built/tmp/cppBison.yxx.c"
    break;

  case 568: /* no_angle_bracket_const_expr: '-' no_angle_bracket_const_expr  */
#line 3318 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8032 "built/tmp/cppBison.yxx.c"
    break;

  case 569: /* no_angle_bracket_const_expr: '+' no_angle_bracket_const_expr  */
#line 3322 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8040 "built/tmp/cppBison.yxx.c"
    break;

  case 570: /* no_angle_bracket_const_expr: '*' no_angle_bracket_const_expr  */
#line 3326 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8048 "built/tmp/cppBison.yxx.c"
    break;

  case 571: /* no_angle_bracket_const_expr: '&' no_angle_bracket_const_expr  */
#line 3330 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8056 "built/tmp/cppBison.yxx.c"
    break;

  case 572: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '*' no_angle_bracket_const_expr  */
#line 3334 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8064 "built/tmp/cppBison.yxx.c"
    break;

  case 573: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '/' no_angle_bracket_const_expr  */
#line 3338 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8072 "built/tmp/cppBison.yxx.c"
    break;

  case 574: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '%' no_angle_bracket_const_expr  */
#line 3342 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8080 "built/tmp/cppBison.yxx.c"
    break;

  case 575: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '+' no_angle_bracket_const_expr  */
#line 3346 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8088 "built/tmp/cppBison.yxx.c"
    break;

  case 576: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '-' no_angle_bracket_const_expr  */
#line 3350 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8096 "built/tmp/cppBison.yxx.c"
    break;

  case 577: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '|' no_angle_bracket_const_expr  */
#line 3354 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8104 "built/tmp/cppBison.yxx.c"
    break;

  case 578: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '^' no_angle_bracket_const_expr  */
#line 3358 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8112 "built/tmp/cppBison.yxx.c"
    break;

  case 579: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '&' no_angle_bracket_const_expr  */
#line 3362 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8120 "built/tmp/cppBison.yxx.c"
    break;

  case 580: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr OROR no_angle_bracket_const_expr  */
#line 3366 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8128 "built/tmp/cppBison.yxx.c"
    break;

  case 581: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr ANDAND no_angle_bracket_const_expr  */
#line 3370 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8136 "built/tmp/cppBison.yxx.c"
    break;

  case 582: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr EQCOMPARE no_angle_bracket_const_expr  */
#line 3374 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8144 "built/tmp/cppBison.yxx.c"
    break;

  case 583: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr NECOMPARE no_angle_bracket_const_expr  */
#line 3378 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8152 "built/tmp/cppBison.yxx.c"
    break;

  case 584: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LECOMPARE no_angle_bracket_const_expr  */
#line 3382 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8160 "built/tmp/cppBison.yxx.c"
    break;

  case 585: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr GECOMPARE no_angle_bracket_const_expr  */
#line 3386 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8168 "built/tmp/cppBison.yxx.c"
    break;

  case 586: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LSHIFT no_angle_bracket_const_expr  */
#line 3390 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8176 "built/tmp/cppBison.yxx.c"
    break;

  case 587: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr RSHIFT no_angle_bracket_const_expr  */
#line 3394 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8184 "built/tmp/cppBison.yxx.c"
    break;

  case 588: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '?' no_angle_bracket_const_expr ':' no_angle_bracket_const_expr  */
#line 3398 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8192 "built/tmp/cppBison.yxx.c"
    break;

  case 589: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '[' const_expr ']'  */
#line 3402 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8200 "built/tmp/cppBison.yxx.c"
    break;

  case 590: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' const_expr_comma ')'  */
#line 3406 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8208 "built/tmp/cppBison.yxx.c"
    break;

  case 591: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' ')'  */
#line 3410 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8216 "built/tmp/cppBison.yxx.c"
    break;

  case 592: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '.' name  */
#line 3414 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8224 "built/tmp/cppBison.yxx.c"
    break;

  case 593: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr POINTSAT no_angle_bracket_const_expr  */
#line 3418 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8232 "built/tmp/cppBison.yxx.c"
    break;

  case 594: /* no_angle_bracket_const_expr: '(' const_expr_comma ')'  */
#line 3422 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8240 "built/tmp/cppBison.yxx.c"
    break;

  case 595: /* const_expr: const_operand  */
#line 3430 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8248 "built/tmp/cppBison.yxx.c"
    break;

  case 596: /* const_expr: '(' full_type ')' const_expr  */
#line 3434 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8256 "built/tmp/cppBison.yxx.c"
    break;

  case 597: /* const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3438 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8264 "built/tmp/cppBison.yxx.c"
    break;

  case 598: /* const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3442 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8272 "built/tmp/cppBison.yxx.c"
    break;

  case 599: /* const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3446 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8280 "built/tmp/cppBison.yxx.c"
    break;

  case 600: /* const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3450 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8288 "built/tmp/cppBison.yxx.c"
    break;

  case 601: /* const_expr: TYPENAME_IDENTIFIER '(' optional_const_expr_comma ')'  */
#line 3454 "dtool/src/cppparser/cppBison.yxx"
{
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8302 "built/tmp/cppBison.yxx.c"
    break;

  case 602: /* const_expr: TYPENAME_IDENTIFIER '{' optional_const_expr_comma '}'  */
#line 3464 "dtool/src/cppparser/cppBison.yxx"
{
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8316 "built/tmp/cppBison.yxx.c"
    break;

  case 603: /* const_expr: KW_INT '(' optional_const_expr_comma ')'  */
#line 3474 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8326 "built/tmp/cppBison.yxx.c"
    break;

  case 604: /* const_expr: KW_CHAR '(' optional_const_expr_comma ')'  */
#line 3480 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8336 "built/tmp/cppBison.yxx.c"
    break;

  case 605: /* const_expr: KW_WCHAR_T '(' optional_const_expr_comma ')'  */
#line 3486 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8346 "built/tmp/cppBison.yxx.c"
    break;

  case 606: /* const_expr: KW_CHAR16_T '(' optional_const_expr_comma ')'  */
#line 3492 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8356 "built/tmp/cppBison.yxx.c"
    break;

  case 607: /* const_expr: KW_CHAR32_T '(' optional_const_expr_comma ')'  */
#line 3498 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8366 "built/tmp/cppBison.yxx.c"
    break;

  case 608: /* const_expr: KW_BOOL '(' optional_const_expr_comma ')'  */
#line 3504 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8376 "built/tmp/cppBison.yxx.c"
    break;

  case 609: /* const_expr: KW_SHORT '(' optional_const_expr_comma ')'  */
#line 3510 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8387 "built/tmp/cppBison.yxx.c"
    break;

  case 610: /* const_expr: KW_LONG '(' optional_const_expr_comma ')'  */
#line 3517 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8398 "built/tmp/cppBison.yxx.c"
    break;

  case 611: /* const_expr: KW_UNSIGNED '(' optional_const_expr_comma ')'  */
#line 3524 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8409 "built/tmp/cppBison.yxx.c"
    break;

  case 612: /* const_expr: KW_SIGNED '(' optional_const_expr_comma ')'  */
#line 3531 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8420 "built/tmp/cppBison.yxx.c"
    break;

  case 613: /* const_expr: KW_FLOAT '(' optional_const_expr_comma ')'  */
#line 3538 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8430 "built/tmp/cppBison.yxx.c"
    break;

  case 614: /* const_expr: KW_DOUBLE '(' optional_const_expr_comma ')'  */
#line 3544 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8440 "built/tmp/cppBison.yxx.c"
    break;

  case 615: /* const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3550 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8448 "built/tmp/cppBison.yxx.c"
    break;

  case 616: /* const_expr: KW_SIZEOF const_expr  */
#line 3554 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8456 "built/tmp/cppBison.yxx.c"
    break;

  case 617: /* const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3558 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8464 "built/tmp/cppBison.yxx.c"
    break;

  case 618: /* const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3562 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8472 "built/tmp/cppBison.yxx.c"
    break;

  case 619: /* const_expr: KW_NEW predefined_type  */
#line 3566 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8480 "built/tmp/cppBison.yxx.c"
    break;

  case 620: /* const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3570 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8488 "built/tmp/cppBison.yxx.c"
    break;

  case 621: /* const_expr: KW_TYPEID '(' full_type ')'  */
#line 3574 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8503 "built/tmp/cppBison.yxx.c"
    break;

  case 622: /* const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3585 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8518 "built/tmp/cppBison.yxx.c"
    break;

  case 623: /* const_expr: '!' const_expr  */
#line 3596 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8526 "built/tmp/cppBison.yxx.c"
    break;

  case 624: /* const_expr: '~' const_expr  */
#line 3600 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8534 "built/tmp/cppBison.yxx.c"
    break;

  case 625: /* const_expr: '-' const_expr  */
#line 3604 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8542 "built/tmp/cppBison.yxx.c"
    break;

  case 626: /* const_expr: '+' const_expr  */
#line 3608 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8550 "built/tmp/cppBison.yxx.c"
    break;

  case 627: /* const_expr: '*' const_expr  */
#line 3612 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8558 "built/tmp/cppBison.yxx.c"
    break;

  case 628: /* const_expr: '&' const_expr  */
#line 3616 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8566 "built/tmp/cppBison.yxx.c"
    break;

  case 629: /* const_expr: const_expr '*' const_expr  */
#line 3620 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8574 "built/tmp/cppBison.yxx.c"
    break;

  case 630: /* const_expr: const_expr '/' const_expr  */
#line 3624 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8582 "built/tmp/cppBison.yxx.c"
    break;

  case 631: /* const_expr: const_expr '%' const_expr  */
#line 3628 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8590 "built/tmp/cppBison.yxx.c"
    break;

  case 632: /* const_expr: const_expr '+' const_expr  */
#line 3632 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8598 "built/tmp/cppBison.yxx.c"
    break;

  case 633: /* const_expr: const_expr '-' const_expr  */
#line 3636 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8606 "built/tmp/cppBison.yxx.c"
    break;

  case 634: /* const_expr: const_expr '|' const_expr  */
#line 3640 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8614 "built/tmp/cppBison.yxx.c"
    break;

  case 635: /* const_expr: const_expr '^' const_expr  */
#line 3644 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8622 "built/tmp/cppBison.yxx.c"
    break;

  case 636: /* const_expr: const_expr '&' const_expr  */
#line 3648 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8630 "built/tmp/cppBison.yxx.c"
    break;

  case 637: /* const_expr: const_expr OROR const_expr  */
#line 3652 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8638 "built/tmp/cppBison.yxx.c"
    break;

  case 638: /* const_expr: const_expr ANDAND const_expr  */
#line 3656 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8646 "built/tmp/cppBison.yxx.c"
    break;

  case 639: /* const_expr: const_expr EQCOMPARE const_expr  */
#line 3660 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8654 "built/tmp/cppBison.yxx.c"
    break;

  case 640: /* const_expr: const_expr NECOMPARE const_expr  */
#line 3664 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8662 "built/tmp/cppBison.yxx.c"
    break;

  case 641: /* const_expr: const_expr LECOMPARE const_expr  */
#line 3668 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8670 "built/tmp/cppBison.yxx.c"
    break;

  case 642: /* const_expr: const_expr GECOMPARE const_expr  */
#line 3672 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8678 "built/tmp/cppBison.yxx.c"
    break;

  case 643: /* const_expr: const_expr '<' const_expr  */
#line 3676 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8686 "built/tmp/cppBison.yxx.c"
    break;

  case 644: /* const_expr: const_expr '>' const_expr  */
#line 3680 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8694 "built/tmp/cppBison.yxx.c"
    break;

  case 645: /* const_expr: const_expr LSHIFT const_expr  */
#line 3684 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8702 "built/tmp/cppBison.yxx.c"
    break;

  case 646: /* const_expr: const_expr RSHIFT const_expr  */
#line 3688 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8710 "built/tmp/cppBison.yxx.c"
    break;

  case 647: /* const_expr: const_expr '?' const_expr ':' const_expr  */
#line 3692 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8718 "built/tmp/cppBison.yxx.c"
    break;

  case 648: /* const_expr: const_expr '[' const_expr ']'  */
#line 3696 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8726 "built/tmp/cppBison.yxx.c"
    break;

  case 649: /* const_expr: const_expr '(' const_expr_comma ')'  */
#line 3700 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8734 "built/tmp/cppBison.yxx.c"
    break;

  case 650: /* const_expr: const_expr '(' ')'  */
#line 3704 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8742 "built/tmp/cppBison.yxx.c"
    break;

  case 651: /* const_expr: const_expr '.' name  */
#line 3708 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8750 "built/tmp/cppBison.yxx.c"
    break;

  case 652: /* const_expr: const_expr POINTSAT const_expr  */
#line 3712 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8758 "built/tmp/cppBison.yxx.c"
    break;

  case 653: /* const_expr: '(' const_expr_comma ')'  */
#line 3716 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8766 "built/tmp/cppBison.yxx.c"
    break;

  case 654: /* const_operand: INTEGER  */
#line 3723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8774 "built/tmp/cppBison.yxx.c"
    break;

  case 655: /* const_operand: KW_TRUE  */
#line 3727 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8782 "built/tmp/cppBison.yxx.c"
    break;

  case 656: /* const_operand: KW_FALSE  */
#line 3731 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8790 "built/tmp/cppBison.yxx.c"
    break;

  case 657: /* const_operand: CHAR_TOK  */
#line 3735 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8798 "built/tmp/cppBison.yxx.c"
    break;

  case 658: /* const_operand: REAL  */
#line 3739 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8806 "built/tmp/cppBison.yxx.c"
    break;

  case 659: /* const_operand: string_literal  */
#line 3743 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8814 "built/tmp/cppBison.yxx.c"
    break;

  case 660: /* const_operand: CUSTOM_LITERAL  */
#line 3747 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8822 "built/tmp/cppBison.yxx.c"
    break;

  case 661: /* const_operand: IDENTIFIER  */
#line 3751 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8830 "built/tmp/cppBison.yxx.c"
    break;

  case 662: /* const_operand: KW_FINAL  */
#line 3755 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8840 "built/tmp/cppBison.yxx.c"
    break;

  case 663: /* const_operand: KW_OVERRIDE  */
#line 3761 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8850 "built/tmp/cppBison.yxx.c"
    break;

  case 664: /* const_operand: KW_NULLPTR  */
#line 3767 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8858 "built/tmp/cppBison.yxx.c"
    break;

  case 665: /* const_operand: '[' capture_list ']' function_post maybe_trailing_return_type '{' code '}'  */
#line 3771 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-6].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-6].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-6].u.closure_type)));
}
#line 8868 "built/tmp/cppBison.yxx.c"
    break;

  case 666: /* const_operand: '[' capture_list ']' '(' function_parameter_list ')' function_post maybe_trailing_return_type '{' code '}'  */
#line 3777 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-9].u.closure_type)->_parameters = (yyvsp[-6].u.param_list);
  (yyvsp[-9].u.closure_type)->_flags = (yyvsp[-4].u.integer);
  (yyvsp[-9].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-9].u.closure_type)));
}
#line 8879 "built/tmp/cppBison.yxx.c"
    break;

  case 667: /* const_operand: KW_HAS_VIRTUAL_DESTRUCTOR '(' full_type ')'  */
#line 3784 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8887 "built/tmp/cppBison.yxx.c"
    break;

  case 668: /* const_operand: KW_IS_ABSTRACT '(' full_type ')'  */
#line 3788 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8895 "built/tmp/cppBison.yxx.c"
    break;

  case 669: /* const_operand: KW_IS_BASE_OF '(' full_type ',' full_type ')'  */
#line 3792 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8903 "built/tmp/cppBison.yxx.c"
    break;

  case 670: /* const_operand: KW_IS_CLASS '(' full_type ')'  */
#line 3796 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8911 "built/tmp/cppBison.yxx.c"
    break;

  case 671: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ')'  */
#line 3800 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8919 "built/tmp/cppBison.yxx.c"
    break;

  case 672: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ',' full_type ')'  */
#line 3804 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8927 "built/tmp/cppBison.yxx.c"
    break;

  case 673: /* const_operand: KW_IS_CONVERTIBLE_TO '(' full_type ',' full_type ')'  */
#line 3808 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8935 "built/tmp/cppBison.yxx.c"
    break;

  case 674: /* const_operand: KW_IS_DESTRUCTIBLE '(' full_type ')'  */
#line 3812 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8943 "built/tmp/cppBison.yxx.c"
    break;

  case 675: /* const_operand: KW_IS_EMPTY '(' full_type ')'  */
#line 3816 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 8951 "built/tmp/cppBison.yxx.c"
    break;

  case 676: /* const_operand: KW_IS_ENUM '(' full_type ')'  */
#line 3820 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 8959 "built/tmp/cppBison.yxx.c"
    break;

  case 677: /* const_operand: KW_IS_FINAL '(' full_type ')'  */
#line 3824 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 8967 "built/tmp/cppBison.yxx.c"
    break;

  case 678: /* const_operand: KW_IS_FUNDAMENTAL '(' full_type ')'  */
#line 3828 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 8975 "built/tmp/cppBison.yxx.c"
    break;

  case 679: /* const_operand: KW_IS_POD '(' full_type ')'  */
#line 3832 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 8983 "built/tmp/cppBison.yxx.c"
    break;

  case 680: /* const_operand: KW_IS_POLYMORPHIC '(' full_type ')'  */
#line 3836 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 8991 "built/tmp/cppBison.yxx.c"
    break;

  case 681: /* const_operand: KW_IS_STANDARD_LAYOUT '(' full_type ')'  */
#line 3840 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 8999 "built/tmp/cppBison.yxx.c"
    break;

  case 682: /* const_operand: KW_IS_TRIVIAL '(' full_type ')'  */
#line 3844 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 9007 "built/tmp/cppBison.yxx.c"
    break;

  case 683: /* const_operand: KW_IS_UNION '(' full_type ')'  */
#line 3848 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 9015 "built/tmp/cppBison.yxx.c"
    break;

  case 684: /* formal_const_expr: formal_const_operand  */
#line 3862 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9023 "built/tmp/cppBison.yxx.c"
    break;

  case 685: /* formal_const_expr: '(' full_type ')' const_expr  */
#line 3866 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9031 "built/tmp/cppBison.yxx.c"
    break;

  case 686: /* formal_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3870 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9039 "built/tmp/cppBison.yxx.c"
    break;

  case 687: /* formal_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3874 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9047 "built/tmp/cppBison.yxx.c"
    break;

  case 688: /* formal_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3878 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9055 "built/tmp/cppBison.yxx.c"
    break;

  case 689: /* formal_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3882 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9063 "built/tmp/cppBison.yxx.c"
    break;

  case 690: /* formal_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3886 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9071 "built/tmp/cppBison.yxx.c"
    break;

  case 691: /* formal_const_expr: KW_SIZEOF formal_const_expr  */
#line 3890 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 9079 "built/tmp/cppBison.yxx.c"
    break;

  case 692: /* formal_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3894 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9087 "built/tmp/cppBison.yxx.c"
    break;

  case 693: /* formal_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3898 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9095 "built/tmp/cppBison.yxx.c"
    break;

  case 694: /* formal_const_expr: KW_NEW predefined_type  */
#line 3902 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9103 "built/tmp/cppBison.yxx.c"
    break;

  case 695: /* formal_const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3906 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9111 "built/tmp/cppBison.yxx.c"
    break;

  case 696: /* formal_const_expr: KW_TYPEID '(' full_type ')'  */
#line 3910 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9126 "built/tmp/cppBison.yxx.c"
    break;

  case 697: /* formal_const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3921 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9141 "built/tmp/cppBison.yxx.c"
    break;

  case 698: /* formal_const_expr: '!' const_expr  */
#line 3932 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9149 "built/tmp/cppBison.yxx.c"
    break;

  case 699: /* formal_const_expr: '~' const_expr  */
#line 3936 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9157 "built/tmp/cppBison.yxx.c"
    break;

  case 700: /* formal_const_expr: '-' const_expr  */
#line 3940 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9165 "built/tmp/cppBison.yxx.c"
    break;

  case 701: /* formal_const_expr: '+' const_expr  */
#line 3944 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9173 "built/tmp/cppBison.yxx.c"
    break;

  case 702: /* formal_const_expr: '&' const_expr  */
#line 3948 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9181 "built/tmp/cppBison.yxx.c"
    break;

  case 703: /* formal_const_expr: formal_const_expr '*' const_expr  */
#line 3952 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9189 "built/tmp/cppBison.yxx.c"
    break;

  case 704: /* formal_const_expr: formal_const_expr '/' const_expr  */
#line 3956 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9197 "built/tmp/cppBison.yxx.c"
    break;

  case 705: /* formal_const_expr: formal_const_expr '%' const_expr  */
#line 3960 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9205 "built/tmp/cppBison.yxx.c"
    break;

  case 706: /* formal_const_expr: formal_const_expr '+' const_expr  */
#line 3964 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9213 "built/tmp/cppBison.yxx.c"
    break;

  case 707: /* formal_const_expr: formal_const_expr '-' const_expr  */
#line 3968 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9221 "built/tmp/cppBison.yxx.c"
    break;

  case 708: /* formal_const_expr: formal_const_expr '|' const_expr  */
#line 3972 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9229 "built/tmp/cppBison.yxx.c"
    break;

  case 709: /* formal_const_expr: formal_const_expr '^' const_expr  */
#line 3976 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9237 "built/tmp/cppBison.yxx.c"
    break;

  case 710: /* formal_const_expr: formal_const_expr '&' const_expr  */
#line 3980 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9245 "built/tmp/cppBison.yxx.c"
    break;

  case 711: /* formal_const_expr: formal_const_expr OROR const_expr  */
#line 3984 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9253 "built/tmp/cppBison.yxx.c"
    break;

  case 712: /* formal_const_expr: formal_const_expr ANDAND const_expr  */
#line 3988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9261 "built/tmp/cppBison.yxx.c"
    break;

  case 713: /* formal_const_expr: formal_const_expr EQCOMPARE const_expr  */
#line 3992 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9269 "built/tmp/cppBison.yxx.c"
    break;

  case 714: /* formal_const_expr: formal_const_expr NECOMPARE const_expr  */
#line 3996 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9277 "built/tmp/cppBison.yxx.c"
    break;

  case 715: /* formal_const_expr: formal_const_expr LECOMPARE const_expr  */
#line 4000 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9285 "built/tmp/cppBison.yxx.c"
    break;

  case 716: /* formal_const_expr: formal_const_expr GECOMPARE const_expr  */
#line 4004 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9293 "built/tmp/cppBison.yxx.c"
    break;

  case 717: /* formal_const_expr: formal_const_expr '<' const_expr  */
#line 4008 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9301 "built/tmp/cppBison.yxx.c"
    break;

  case 718: /* formal_const_expr: formal_const_expr '>' const_expr  */
#line 4012 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9309 "built/tmp/cppBison.yxx.c"
    break;

  case 719: /* formal_const_expr: formal_const_expr LSHIFT const_expr  */
#line 4016 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9317 "built/tmp/cppBison.yxx.c"
    break;

  case 720: /* formal_const_expr: formal_const_expr RSHIFT const_expr  */
#line 4020 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9325 "built/tmp/cppBison.yxx.c"
    break;

  case 721: /* formal_const_expr: formal_const_expr '?' const_expr ':' const_expr  */
#line 4024 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9333 "built/tmp/cppBison.yxx.c"
    break;

  case 722: /* formal_const_expr: formal_const_expr '[' const_expr ']'  */
#line 4028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9341 "built/tmp/cppBison.yxx.c"
    break;

  case 723: /* formal_const_expr: formal_const_expr '(' const_expr_comma ')'  */
#line 4032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9349 "built/tmp/cppBison.yxx.c"
    break;

  case 724: /* formal_const_expr: formal_const_expr '(' ')'  */
#line 4036 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9357 "built/tmp/cppBison.yxx.c"
    break;

  case 725: /* formal_const_expr: formal_const_expr '.' name  */
#line 4040 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 9365 "built/tmp/cppBison.yxx.c"
    break;

  case 726: /* formal_const_expr: formal_const_expr POINTSAT const_expr  */
#line 4044 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9373 "built/tmp/cppBison.yxx.c"
    break;

  case 727: /* formal_const_expr: '(' const_expr_comma ')'  */
#line 4048 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9381 "built/tmp/cppBison.yxx.c"
    break;

  case 728: /* formal_const_operand: INTEGER  */
#line 4055 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9389 "built/tmp/cppBison.yxx.c"
    break;

  case 729: /* formal_const_operand: KW_TRUE  */
#line 4059 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9397 "built/tmp/cppBison.yxx.c"
    break;

  case 730: /* formal_const_operand: KW_FALSE  */
#line 4063 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9405 "built/tmp/cppBison.yxx.c"
    break;

  case 731: /* formal_const_operand: CHAR_TOK  */
#line 4067 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9413 "built/tmp/cppBison.yxx.c"
    break;

  case 732: /* formal_const_operand: REAL  */
#line 4071 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9421 "built/tmp/cppBison.yxx.c"
    break;

  case 733: /* formal_const_operand: string_literal  */
#line 4075 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9429 "built/tmp/cppBison.yxx.c"
    break;

  case 734: /* formal_const_operand: CUSTOM_LITERAL  */
#line 4079 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9437 "built/tmp/cppBison.yxx.c"
    break;

  case 735: /* formal_const_operand: IDENTIFIER  */
#line 4083 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9445 "built/tmp/cppBison.yxx.c"
    break;

  case 736: /* formal_const_operand: KW_FINAL  */
#line 4087 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9455 "built/tmp/cppBison.yxx.c"
    break;

  case 737: /* formal_const_operand: KW_OVERRIDE  */
#line 4093 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9465 "built/tmp/cppBison.yxx.c"
    break;

  case 738: /* formal_const_operand: KW_NULLPTR  */
#line 4099 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9473 "built/tmp/cppBison.yxx.c"
    break;

  case 739: /* capture_list: empty  */
#line 4107 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9481 "built/tmp/cppBison.yxx.c"
    break;

  case 740: /* capture_list: '='  */
#line 4111 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9489 "built/tmp/cppBison.yxx.c"
    break;

  case 741: /* capture_list: '&'  */
#line 4115 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9497 "built/tmp/cppBison.yxx.c"
    break;

  case 742: /* capture_list: capture maybe_initialize  */
#line 4119 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9508 "built/tmp/cppBison.yxx.c"
    break;

  case 743: /* capture_list: capture_list ',' capture maybe_initialize  */
#line 4126 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9519 "built/tmp/cppBison.yxx.c"
    break;

  case 744: /* capture: '&' name  */
#line 4136 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9529 "built/tmp/cppBison.yxx.c"
    break;

  case 745: /* capture: '&' name ELLIPSIS  */
#line 4142 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9539 "built/tmp/cppBison.yxx.c"
    break;

  case 746: /* capture: name  */
#line 4148 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9553 "built/tmp/cppBison.yxx.c"
    break;

  case 747: /* capture: '*' name  */
#line 4158 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9566 "built/tmp/cppBison.yxx.c"
    break;

  case 748: /* class_derivation_name: name  */
#line 4170 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9578 "built/tmp/cppBison.yxx.c"
    break;

  case 749: /* class_derivation_name: KW_TYPENAME name  */
#line 4178 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9586 "built/tmp/cppBison.yxx.c"
    break;

  case 750: /* class_derivation_name: name ELLIPSIS  */
#line 4182 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9596 "built/tmp/cppBison.yxx.c"
    break;

  case 751: /* name: IDENTIFIER  */
#line 4212 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9604 "built/tmp/cppBison.yxx.c"
    break;

  case 752: /* name: TYPENAME_IDENTIFIER  */
#line 4216 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9612 "built/tmp/cppBison.yxx.c"
    break;

  case 753: /* name: TYPEPACK_IDENTIFIER  */
#line 4220 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9620 "built/tmp/cppBison.yxx.c"
    break;

  case 754: /* name: KW_FINAL  */
#line 4224 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9628 "built/tmp/cppBison.yxx.c"
    break;

  case 755: /* name: KW_OVERRIDE  */
#line 4228 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9636 "built/tmp/cppBison.yxx.c"
    break;

  case 756: /* name: KW_SIGNED  */
#line 4232 "dtool/src/cppparser/cppBison.yxx"
{
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9646 "built/tmp/cppBison.yxx.c"
    break;

  case 757: /* name: KW_FLOAT  */
#line 4238 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9654 "built/tmp/cppBison.yxx.c"
    break;

  case 758: /* name: KW_PUBLIC  */
#line 4242 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9662 "built/tmp/cppBison.yxx.c"
    break;

  case 759: /* name: KW_PRIVATE  */
#line 4246 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9670 "built/tmp/cppBison.yxx.c"
    break;

  case 760: /* name: KW_STATIC  */
#line 4250 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9678 "built/tmp/cppBison.yxx.c"
    break;

  case 761: /* name: KW_DEFAULT  */
#line 4254 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9686 "built/tmp/cppBison.yxx.c"
    break;

  case 762: /* name_no_final: IDENTIFIER  */
#line 4265 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9694 "built/tmp/cppBison.yxx.c"
    break;

  case 763: /* name_no_final: TYPENAME_IDENTIFIER  */
#line 4269 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9702 "built/tmp/cppBison.yxx.c"
    break;

  case 764: /* name_no_final: TYPEPACK_IDENTIFIER  */
#line 4273 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9710 "built/tmp/cppBison.yxx.c"
    break;

  case 765: /* name_no_final: KW_OVERRIDE  */
#line 4277 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9718 "built/tmp/cppBison.yxx.c"
    break;

  case 766: /* string_literal: SIMPLE_STRING  */
#line 4285 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9726 "built/tmp/cppBison.yxx.c"
    break;

  case 767: /* string_literal: STRING_LITERAL  */
#line 4289 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9734 "built/tmp/cppBison.yxx.c"
    break;

  case 768: /* string_literal: string_literal SIMPLE_STRING  */
#line 4293 "dtool/src/cppparser/cppBison.yxx"
{
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9744 "built/tmp/cppBison.yxx.c"
    break;

  case 769: /* string_literal: string_literal STRING_LITERAL  */
#line 4299 "dtool/src/cppparser/cppBison.yxx"
{
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9757 "built/tmp/cppBison.yxx.c"
    break;


#line 9761 "built/tmp/cppBison.yxx.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

