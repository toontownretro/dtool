/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 2

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         cppyyparse
#define yylex           cppyylex
#define yyerror         cppyyerror
#define yydebug         cppyydebug
#define yynerrs         cppyynerrs

/* First part of user prologue.  */
#line 7 "dtool/src/cppparser/cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppClosureType.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeProperty.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedefType.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

using std::stringstream;
using std::string;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = nullptr;
CPPScope *global_scope = nullptr;
CPPPreprocessor *current_lexer = nullptr;

static CPPStructType *current_struct = nullptr;
static CPPEnumType *current_enum = nullptr;
static int current_storage_class = 0;
static CPPType *current_type = nullptr;
static CPPExpression *current_expr = nullptr;
static CPPAttributeList current_attributes;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static std::vector<CPPScope *> last_scopes;
static std::vector<int> last_storage_classes;
static std::vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg, current_lexer->_last_token_loc);
}

static void
yyerror(YYLTYPE *loc, const string &msg) {
  current_lexer->error(msg, *loc);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;

}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = nullptr;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = nullptr;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != nullptr) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}


#line 275 "built/tmp/cppBison.yxx.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "cppBison.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_REAL = 3,                       /* REAL  */
  YYSYMBOL_INTEGER = 4,                    /* INTEGER  */
  YYSYMBOL_CHAR_TOK = 5,                   /* CHAR_TOK  */
  YYSYMBOL_SIMPLE_STRING = 6,              /* SIMPLE_STRING  */
  YYSYMBOL_SIMPLE_IDENTIFIER = 7,          /* SIMPLE_IDENTIFIER  */
  YYSYMBOL_STRING_LITERAL = 8,             /* STRING_LITERAL  */
  YYSYMBOL_CUSTOM_LITERAL = 9,             /* CUSTOM_LITERAL  */
  YYSYMBOL_IDENTIFIER = 10,                /* IDENTIFIER  */
  YYSYMBOL_TYPENAME_IDENTIFIER = 11,       /* TYPENAME_IDENTIFIER  */
  YYSYMBOL_TYPEPACK_IDENTIFIER = 12,       /* TYPEPACK_IDENTIFIER  */
  YYSYMBOL_SCOPING = 13,                   /* SCOPING  */
  YYSYMBOL_TYPEDEFNAME = 14,               /* TYPEDEFNAME  */
  YYSYMBOL_ELLIPSIS = 15,                  /* ELLIPSIS  */
  YYSYMBOL_OROR = 16,                      /* OROR  */
  YYSYMBOL_ANDAND = 17,                    /* ANDAND  */
  YYSYMBOL_EQCOMPARE = 18,                 /* EQCOMPARE  */
  YYSYMBOL_NECOMPARE = 19,                 /* NECOMPARE  */
  YYSYMBOL_LECOMPARE = 20,                 /* LECOMPARE  */
  YYSYMBOL_GECOMPARE = 21,                 /* GECOMPARE  */
  YYSYMBOL_SPACESHIP = 22,                 /* SPACESHIP  */
  YYSYMBOL_LSHIFT = 23,                    /* LSHIFT  */
  YYSYMBOL_RSHIFT = 24,                    /* RSHIFT  */
  YYSYMBOL_POINTSAT_STAR = 25,             /* POINTSAT_STAR  */
  YYSYMBOL_DOT_STAR = 26,                  /* DOT_STAR  */
  YYSYMBOL_UNARY = 27,                     /* UNARY  */
  YYSYMBOL_UNARY_NOT = 28,                 /* UNARY_NOT  */
  YYSYMBOL_UNARY_NEGATE = 29,              /* UNARY_NEGATE  */
  YYSYMBOL_UNARY_MINUS = 30,               /* UNARY_MINUS  */
  YYSYMBOL_UNARY_PLUS = 31,                /* UNARY_PLUS  */
  YYSYMBOL_UNARY_STAR = 32,                /* UNARY_STAR  */
  YYSYMBOL_UNARY_REF = 33,                 /* UNARY_REF  */
  YYSYMBOL_POINTSAT = 34,                  /* POINTSAT  */
  YYSYMBOL_SCOPE = 35,                     /* SCOPE  */
  YYSYMBOL_PLUSPLUS = 36,                  /* PLUSPLUS  */
  YYSYMBOL_MINUSMINUS = 37,                /* MINUSMINUS  */
  YYSYMBOL_TIMESEQUAL = 38,                /* TIMESEQUAL  */
  YYSYMBOL_DIVIDEEQUAL = 39,               /* DIVIDEEQUAL  */
  YYSYMBOL_MODEQUAL = 40,                  /* MODEQUAL  */
  YYSYMBOL_PLUSEQUAL = 41,                 /* PLUSEQUAL  */
  YYSYMBOL_MINUSEQUAL = 42,                /* MINUSEQUAL  */
  YYSYMBOL_OREQUAL = 43,                   /* OREQUAL  */
  YYSYMBOL_ANDEQUAL = 44,                  /* ANDEQUAL  */
  YYSYMBOL_XOREQUAL = 45,                  /* XOREQUAL  */
  YYSYMBOL_LSHIFTEQUAL = 46,               /* LSHIFTEQUAL  */
  YYSYMBOL_RSHIFTEQUAL = 47,               /* RSHIFTEQUAL  */
  YYSYMBOL_ATTR_LEFT = 48,                 /* ATTR_LEFT  */
  YYSYMBOL_ATTR_RIGHT = 49,                /* ATTR_RIGHT  */
  YYSYMBOL_KW_ALIGNAS = 50,                /* KW_ALIGNAS  */
  YYSYMBOL_KW_ALIGNOF = 51,                /* KW_ALIGNOF  */
  YYSYMBOL_KW_AUTO = 52,                   /* KW_AUTO  */
  YYSYMBOL_KW_BEGIN_PUBLISH = 53,          /* KW_BEGIN_PUBLISH  */
  YYSYMBOL_KW_BLOCKING = 54,               /* KW_BLOCKING  */
  YYSYMBOL_KW_BOOL = 55,                   /* KW_BOOL  */
  YYSYMBOL_KW_CATCH = 56,                  /* KW_CATCH  */
  YYSYMBOL_KW_CHAR = 57,                   /* KW_CHAR  */
  YYSYMBOL_KW_CHAR8_T = 58,                /* KW_CHAR8_T  */
  YYSYMBOL_KW_CHAR16_T = 59,               /* KW_CHAR16_T  */
  YYSYMBOL_KW_CHAR32_T = 60,               /* KW_CHAR32_T  */
  YYSYMBOL_KW_CLASS = 61,                  /* KW_CLASS  */
  YYSYMBOL_KW_CONST = 62,                  /* KW_CONST  */
  YYSYMBOL_KW_CONSTEVAL = 63,              /* KW_CONSTEVAL  */
  YYSYMBOL_KW_CONSTEXPR = 64,              /* KW_CONSTEXPR  */
  YYSYMBOL_KW_CONSTINIT = 65,              /* KW_CONSTINIT  */
  YYSYMBOL_KW_CONST_CAST = 66,             /* KW_CONST_CAST  */
  YYSYMBOL_KW_DECLTYPE = 67,               /* KW_DECLTYPE  */
  YYSYMBOL_KW_DEFAULT = 68,                /* KW_DEFAULT  */
  YYSYMBOL_KW_DELETE = 69,                 /* KW_DELETE  */
  YYSYMBOL_KW_DOUBLE = 70,                 /* KW_DOUBLE  */
  YYSYMBOL_KW_DYNAMIC_CAST = 71,           /* KW_DYNAMIC_CAST  */
  YYSYMBOL_KW_ELSE = 72,                   /* KW_ELSE  */
  YYSYMBOL_KW_END_PUBLISH = 73,            /* KW_END_PUBLISH  */
  YYSYMBOL_KW_ENUM = 74,                   /* KW_ENUM  */
  YYSYMBOL_KW_EXTENSION = 75,              /* KW_EXTENSION  */
  YYSYMBOL_KW_EXTERN = 76,                 /* KW_EXTERN  */
  YYSYMBOL_KW_EXPLICIT = 77,               /* KW_EXPLICIT  */
  YYSYMBOL_KW_EXPLICIT_LPAREN = 78,        /* KW_EXPLICIT_LPAREN  */
  YYSYMBOL_KW_PUBLISHED = 79,              /* KW_PUBLISHED  */
  YYSYMBOL_KW_FALSE = 80,                  /* KW_FALSE  */
  YYSYMBOL_KW_FINAL = 81,                  /* KW_FINAL  */
  YYSYMBOL_KW_FLOAT = 82,                  /* KW_FLOAT  */
  YYSYMBOL_KW_FRIEND = 83,                 /* KW_FRIEND  */
  YYSYMBOL_KW_FOR = 84,                    /* KW_FOR  */
  YYSYMBOL_KW_GOTO = 85,                   /* KW_GOTO  */
  YYSYMBOL_KW_HAS_VIRTUAL_DESTRUCTOR = 86, /* KW_HAS_VIRTUAL_DESTRUCTOR  */
  YYSYMBOL_KW_IF = 87,                     /* KW_IF  */
  YYSYMBOL_KW_INLINE = 88,                 /* KW_INLINE  */
  YYSYMBOL_KW_INT = 89,                    /* KW_INT  */
  YYSYMBOL_KW_IS_ABSTRACT = 90,            /* KW_IS_ABSTRACT  */
  YYSYMBOL_KW_IS_BASE_OF = 91,             /* KW_IS_BASE_OF  */
  YYSYMBOL_KW_IS_CLASS = 92,               /* KW_IS_CLASS  */
  YYSYMBOL_KW_IS_CONSTRUCTIBLE = 93,       /* KW_IS_CONSTRUCTIBLE  */
  YYSYMBOL_KW_IS_CONVERTIBLE_TO = 94,      /* KW_IS_CONVERTIBLE_TO  */
  YYSYMBOL_KW_IS_DESTRUCTIBLE = 95,        /* KW_IS_DESTRUCTIBLE  */
  YYSYMBOL_KW_IS_EMPTY = 96,               /* KW_IS_EMPTY  */
  YYSYMBOL_KW_IS_ENUM = 97,                /* KW_IS_ENUM  */
  YYSYMBOL_KW_IS_FINAL = 98,               /* KW_IS_FINAL  */
  YYSYMBOL_KW_IS_FUNDAMENTAL = 99,         /* KW_IS_FUNDAMENTAL  */
  YYSYMBOL_KW_IS_POD = 100,                /* KW_IS_POD  */
  YYSYMBOL_KW_IS_POLYMORPHIC = 101,        /* KW_IS_POLYMORPHIC  */
  YYSYMBOL_KW_IS_STANDARD_LAYOUT = 102,    /* KW_IS_STANDARD_LAYOUT  */
  YYSYMBOL_KW_IS_TRIVIAL = 103,            /* KW_IS_TRIVIAL  */
  YYSYMBOL_KW_IS_TRIVIALLY_COPYABLE = 104, /* KW_IS_TRIVIALLY_COPYABLE  */
  YYSYMBOL_KW_IS_UNION = 105,              /* KW_IS_UNION  */
  YYSYMBOL_KW_LONG = 106,                  /* KW_LONG  */
  YYSYMBOL_KW_MAKE_MAP_KEYS_SEQ = 107,     /* KW_MAKE_MAP_KEYS_SEQ  */
  YYSYMBOL_KW_MAKE_MAP_PROPERTY = 108,     /* KW_MAKE_MAP_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY = 109,         /* KW_MAKE_PROPERTY  */
  YYSYMBOL_KW_MAKE_PROPERTY2 = 110,        /* KW_MAKE_PROPERTY2  */
  YYSYMBOL_KW_MAKE_SEQ = 111,              /* KW_MAKE_SEQ  */
  YYSYMBOL_KW_MAKE_SEQ_PROPERTY = 112,     /* KW_MAKE_SEQ_PROPERTY  */
  YYSYMBOL_KW_MUTABLE = 113,               /* KW_MUTABLE  */
  YYSYMBOL_KW_NAMESPACE = 114,             /* KW_NAMESPACE  */
  YYSYMBOL_KW_NEW = 115,                   /* KW_NEW  */
  YYSYMBOL_KW_NOEXCEPT = 116,              /* KW_NOEXCEPT  */
  YYSYMBOL_KW_NOEXCEPT_LPAREN = 117,       /* KW_NOEXCEPT_LPAREN  */
  YYSYMBOL_KW_NULLPTR = 118,               /* KW_NULLPTR  */
  YYSYMBOL_KW_OPERATOR = 119,              /* KW_OPERATOR  */
  YYSYMBOL_KW_OVERRIDE = 120,              /* KW_OVERRIDE  */
  YYSYMBOL_KW_PRIVATE = 121,               /* KW_PRIVATE  */
  YYSYMBOL_KW_PROTECTED = 122,             /* KW_PROTECTED  */
  YYSYMBOL_KW_PUBLIC = 123,                /* KW_PUBLIC  */
  YYSYMBOL_KW_REGISTER = 124,              /* KW_REGISTER  */
  YYSYMBOL_KW_REINTERPRET_CAST = 125,      /* KW_REINTERPRET_CAST  */
  YYSYMBOL_KW_RETURN = 126,                /* KW_RETURN  */
  YYSYMBOL_KW_SHORT = 127,                 /* KW_SHORT  */
  YYSYMBOL_KW_SIGNED = 128,                /* KW_SIGNED  */
  YYSYMBOL_KW_SIZEOF = 129,                /* KW_SIZEOF  */
  YYSYMBOL_KW_STATIC = 130,                /* KW_STATIC  */
  YYSYMBOL_KW_STATIC_ASSERT = 131,         /* KW_STATIC_ASSERT  */
  YYSYMBOL_KW_STATIC_CAST = 132,           /* KW_STATIC_CAST  */
  YYSYMBOL_KW_STRUCT = 133,                /* KW_STRUCT  */
  YYSYMBOL_KW_TEMPLATE = 134,              /* KW_TEMPLATE  */
  YYSYMBOL_KW_THREAD_LOCAL = 135,          /* KW_THREAD_LOCAL  */
  YYSYMBOL_KW_THROW = 136,                 /* KW_THROW  */
  YYSYMBOL_KW_TRUE = 137,                  /* KW_TRUE  */
  YYSYMBOL_KW_TRY = 138,                   /* KW_TRY  */
  YYSYMBOL_KW_TYPEDEF = 139,               /* KW_TYPEDEF  */
  YYSYMBOL_KW_TYPEID = 140,                /* KW_TYPEID  */
  YYSYMBOL_KW_TYPENAME = 141,              /* KW_TYPENAME  */
  YYSYMBOL_KW_UNDERLYING_TYPE = 142,       /* KW_UNDERLYING_TYPE  */
  YYSYMBOL_KW_UNION = 143,                 /* KW_UNION  */
  YYSYMBOL_KW_UNSIGNED = 144,              /* KW_UNSIGNED  */
  YYSYMBOL_KW_USING = 145,                 /* KW_USING  */
  YYSYMBOL_KW_VIRTUAL = 146,               /* KW_VIRTUAL  */
  YYSYMBOL_KW_VOID = 147,                  /* KW_VOID  */
  YYSYMBOL_KW_VOLATILE = 148,              /* KW_VOLATILE  */
  YYSYMBOL_KW_WCHAR_T = 149,               /* KW_WCHAR_T  */
  YYSYMBOL_KW_WHILE = 150,                 /* KW_WHILE  */
  YYSYMBOL_START_CPP = 151,                /* START_CPP  */
  YYSYMBOL_START_CONST_EXPR = 152,         /* START_CONST_EXPR  */
  YYSYMBOL_START_TYPE = 153,               /* START_TYPE  */
  YYSYMBOL_154_ = 154,                     /* '{'  */
  YYSYMBOL_155_ = 155,                     /* ','  */
  YYSYMBOL_156_ = 156,                     /* ';'  */
  YYSYMBOL_157_ = 157,                     /* ':'  */
  YYSYMBOL_158_ = 158,                     /* '='  */
  YYSYMBOL_159_ = 159,                     /* '?'  */
  YYSYMBOL_160_ = 160,                     /* '|'  */
  YYSYMBOL_161_ = 161,                     /* '^'  */
  YYSYMBOL_162_ = 162,                     /* '&'  */
  YYSYMBOL_163_ = 163,                     /* '<'  */
  YYSYMBOL_164_ = 164,                     /* '>'  */
  YYSYMBOL_165_ = 165,                     /* '+'  */
  YYSYMBOL_166_ = 166,                     /* '-'  */
  YYSYMBOL_167_ = 167,                     /* '*'  */
  YYSYMBOL_168_ = 168,                     /* '/'  */
  YYSYMBOL_169_ = 169,                     /* '%'  */
  YYSYMBOL_170_ = 170,                     /* '~'  */
  YYSYMBOL_171_ = 171,                     /* '.'  */
  YYSYMBOL_172_ = 172,                     /* '('  */
  YYSYMBOL_173_ = 173,                     /* '['  */
  YYSYMBOL_174_ = 174,                     /* ')'  */
  YYSYMBOL_175_ = 175,                     /* '}'  */
  YYSYMBOL_176_ = 176,                     /* '!'  */
  YYSYMBOL_177_ = 177,                     /* ']'  */
  YYSYMBOL_YYACCEPT = 178,                 /* $accept  */
  YYSYMBOL_grammar = 179,                  /* grammar  */
  YYSYMBOL_cpp = 180,                      /* cpp  */
  YYSYMBOL_181_1 = 181,                    /* $@1  */
  YYSYMBOL_constructor_inits = 182,        /* constructor_inits  */
  YYSYMBOL_constructor_init = 183,         /* constructor_init  */
  YYSYMBOL_extern_c = 184,                 /* extern_c  */
  YYSYMBOL_185_2 = 185,                    /* $@2  */
  YYSYMBOL_declaration = 186,              /* declaration  */
  YYSYMBOL_friend_declaration = 187,       /* friend_declaration  */
  YYSYMBOL_188_3 = 188,                    /* $@3  */
  YYSYMBOL_storage_class = 189,            /* storage_class  */
  YYSYMBOL_optional_attributes = 190,      /* optional_attributes  */
  YYSYMBOL_attribute_specifiers = 191,     /* attribute_specifiers  */
  YYSYMBOL_attribute_specifier = 192,      /* attribute_specifier  */
  YYSYMBOL_type_like_declaration = 193,    /* type_like_declaration  */
  YYSYMBOL_194_4 = 194,                    /* $@4  */
  YYSYMBOL_195_5 = 195,                    /* $@5  */
  YYSYMBOL_multiple_instance_identifiers = 196, /* multiple_instance_identifiers  */
  YYSYMBOL_typedef_declaration = 197,      /* typedef_declaration  */
  YYSYMBOL_198_6 = 198,                    /* $@6  */
  YYSYMBOL_typedef_instance_identifiers = 199, /* typedef_instance_identifiers  */
  YYSYMBOL_constructor_prototype = 200,    /* constructor_prototype  */
  YYSYMBOL_201_7 = 201,                    /* $@7  */
  YYSYMBOL_202_8 = 202,                    /* $@8  */
  YYSYMBOL_203_9 = 203,                    /* $@9  */
  YYSYMBOL_function_prototype = 204,       /* function_prototype  */
  YYSYMBOL_205_10 = 205,                   /* $@10  */
  YYSYMBOL_206_11 = 206,                   /* $@11  */
  YYSYMBOL_207_12 = 207,                   /* $@12  */
  YYSYMBOL_208_13 = 208,                   /* $@13  */
  YYSYMBOL_209_14 = 209,                   /* $@14  */
  YYSYMBOL_function_post = 210,            /* function_post  */
  YYSYMBOL_function_operator = 211,        /* function_operator  */
  YYSYMBOL_more_template_declaration = 212, /* more_template_declaration  */
  YYSYMBOL_template_declaration = 213,     /* template_declaration  */
  YYSYMBOL_214_15 = 214,                   /* $@15  */
  YYSYMBOL_template_formal_parameters = 215, /* template_formal_parameters  */
  YYSYMBOL_template_nonempty_formal_parameters = 216, /* template_nonempty_formal_parameters  */
  YYSYMBOL_typename_keyword = 217,         /* typename_keyword  */
  YYSYMBOL_template_formal_parameter = 218, /* template_formal_parameter  */
  YYSYMBOL_template_formal_parameter_type = 219, /* template_formal_parameter_type  */
  YYSYMBOL_instance_identifier = 220,      /* instance_identifier  */
  YYSYMBOL_221_16 = 221,                   /* $@16  */
  YYSYMBOL_instance_identifier_and_maybe_trailing_return_type = 222, /* instance_identifier_and_maybe_trailing_return_type  */
  YYSYMBOL_maybe_trailing_return_type = 223, /* maybe_trailing_return_type  */
  YYSYMBOL_maybe_comma_identifier = 224,   /* maybe_comma_identifier  */
  YYSYMBOL_function_parameter_list = 225,  /* function_parameter_list  */
  YYSYMBOL_function_parameters = 226,      /* function_parameters  */
  YYSYMBOL_formal_parameter_list = 227,    /* formal_parameter_list  */
  YYSYMBOL_formal_parameters = 228,        /* formal_parameters  */
  YYSYMBOL_template_parameter_maybe_initialize = 229, /* template_parameter_maybe_initialize  */
  YYSYMBOL_maybe_initialize = 230,         /* maybe_initialize  */
  YYSYMBOL_maybe_initialize_or_constructor_body = 231, /* maybe_initialize_or_constructor_body  */
  YYSYMBOL_maybe_initialize_or_function_body = 232, /* maybe_initialize_or_function_body  */
  YYSYMBOL_structure_init = 233,           /* structure_init  */
  YYSYMBOL_structure_init_body = 234,      /* structure_init_body  */
  YYSYMBOL_function_parameter = 235,       /* function_parameter  */
  YYSYMBOL_formal_parameter = 236,         /* formal_parameter  */
  YYSYMBOL_not_paren_formal_parameter_identifier = 237, /* not_paren_formal_parameter_identifier  */
  YYSYMBOL_formal_parameter_identifier = 238, /* formal_parameter_identifier  */
  YYSYMBOL_parameter_pack_identifier = 239, /* parameter_pack_identifier  */
  YYSYMBOL_not_paren_empty_instance_identifier = 240, /* not_paren_empty_instance_identifier  */
  YYSYMBOL_empty_instance_identifier = 241, /* empty_instance_identifier  */
  YYSYMBOL_type = 242,                     /* type  */
  YYSYMBOL_type_pack = 243,                /* type_pack  */
  YYSYMBOL_type_decl = 244,                /* type_decl  */
  YYSYMBOL_predefined_type = 245,          /* predefined_type  */
  YYSYMBOL_var_type_decl = 246,            /* var_type_decl  */
  YYSYMBOL_full_type = 247,                /* full_type  */
  YYSYMBOL_anonymous_struct = 248,         /* anonymous_struct  */
  YYSYMBOL_249_17 = 249,                   /* $@17  */
  YYSYMBOL_named_struct = 250,             /* named_struct  */
  YYSYMBOL_251_18 = 251,                   /* $@18  */
  YYSYMBOL_maybe_final = 252,              /* maybe_final  */
  YYSYMBOL_maybe_class_derivation = 253,   /* maybe_class_derivation  */
  YYSYMBOL_class_derivation = 254,         /* class_derivation  */
  YYSYMBOL_base_specification = 255,       /* base_specification  */
  YYSYMBOL_enum = 256,                     /* enum  */
  YYSYMBOL_enum_decl = 257,                /* enum_decl  */
  YYSYMBOL_enum_element_type = 258,        /* enum_element_type  */
  YYSYMBOL_enum_body_trailing_comma = 259, /* enum_body_trailing_comma  */
  YYSYMBOL_enum_body = 260,                /* enum_body  */
  YYSYMBOL_enum_keyword = 261,             /* enum_keyword  */
  YYSYMBOL_struct_keyword = 262,           /* struct_keyword  */
  YYSYMBOL_namespace_declaration = 263,    /* namespace_declaration  */
  YYSYMBOL_264_19 = 264,                   /* $@19  */
  YYSYMBOL_265_20 = 265,                   /* $@20  */
  YYSYMBOL_using_declaration = 266,        /* using_declaration  */
  YYSYMBOL_simple_type = 267,              /* simple_type  */
  YYSYMBOL_simple_int_type = 268,          /* simple_int_type  */
  YYSYMBOL_simple_float_type = 269,        /* simple_float_type  */
  YYSYMBOL_simple_void_type = 270,         /* simple_void_type  */
  YYSYMBOL_code = 271,                     /* code  */
  YYSYMBOL_272_21 = 272,                   /* $@21  */
  YYSYMBOL_code_block = 273,               /* code_block  */
  YYSYMBOL_element = 274,                  /* element  */
  YYSYMBOL_optional_const_expr = 275,      /* optional_const_expr  */
  YYSYMBOL_optional_const_expr_comma = 276, /* optional_const_expr_comma  */
  YYSYMBOL_const_expr_comma = 277,         /* const_expr_comma  */
  YYSYMBOL_no_angle_bracket_const_expr = 278, /* no_angle_bracket_const_expr  */
  YYSYMBOL_const_expr = 279,               /* const_expr  */
  YYSYMBOL_const_operand = 280,            /* const_operand  */
  YYSYMBOL_formal_const_expr = 281,        /* formal_const_expr  */
  YYSYMBOL_formal_const_operand = 282,     /* formal_const_operand  */
  YYSYMBOL_capture_list = 283,             /* capture_list  */
  YYSYMBOL_capture = 284,                  /* capture  */
  YYSYMBOL_class_derivation_name = 285,    /* class_derivation_name  */
  YYSYMBOL_name = 286,                     /* name  */
  YYSYMBOL_name_no_final = 287,            /* name_no_final  */
  YYSYMBOL_string_literal = 288,           /* string_literal  */
  YYSYMBOL_empty = 289                     /* empty  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  108
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   7072

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  178
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  112
/* YYNRULES -- Number of rules.  */
#define YYNRULES  781
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1670

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   408


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   176,     2,     2,     2,   169,   162,     2,
     172,   174,   167,   165,   155,   166,   171,   168,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   157,   156,
     163,   158,   164,   159,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   173,     2,   177,   161,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   154,   160,   175,   170,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   464,   464,   465,   469,   476,   477,   484,   483,   494,
     495,   499,   503,   507,   520,   519,   531,   532,   533,   534,
     535,   536,   537,   550,   559,   563,   571,   575,   579,   600,
     627,   648,   677,   713,   756,   768,   789,   825,   859,   881,
     917,   939,   950,   964,   963,   978,   982,   987,   991,  1002,
    1006,  1010,  1014,  1018,  1027,  1031,  1035,  1039,  1043,  1047,
    1051,  1055,  1059,  1066,  1070,  1075,  1083,  1088,  1096,  1100,
    1108,  1113,  1122,  1121,  1137,  1147,  1146,  1163,  1171,  1179,
    1191,  1208,  1207,  1222,  1237,  1247,  1263,  1262,  1305,  1304,
    1333,  1332,  1370,  1369,  1401,  1400,  1420,  1419,  1441,  1440,
    1473,  1472,  1499,  1512,  1516,  1520,  1524,  1528,  1537,  1541,
    1545,  1549,  1553,  1558,  1563,  1567,  1571,  1578,  1582,  1586,
    1590,  1594,  1598,  1602,  1606,  1610,  1614,  1618,  1622,  1626,
    1630,  1634,  1638,  1642,  1646,  1650,  1654,  1658,  1662,  1666,
    1670,  1674,  1678,  1682,  1686,  1690,  1694,  1698,  1702,  1706,
    1710,  1714,  1718,  1722,  1726,  1730,  1734,  1741,  1742,  1743,
    1747,  1749,  1748,  1756,  1757,  1761,  1762,  1766,  1772,  1781,
    1782,  1786,  1790,  1794,  1798,  1804,  1810,  1816,  1823,  1828,
    1837,  1841,  1846,  1854,  1866,  1870,  1884,  1899,  1904,  1909,
    1914,  1919,  1924,  1929,  1934,  1940,  1939,  1970,  1980,  1990,
    1994,  1998,  2007,  2011,  2019,  2023,  2028,  2032,  2037,  2045,
    2050,  2058,  2062,  2067,  2071,  2076,  2084,  2089,  2097,  2101,
    2108,  2112,  2119,  2123,  2127,  2131,  2135,  2142,  2146,  2150,
    2154,  2158,  2162,  2169,  2170,  2171,  2175,  2178,  2179,  2180,
    2184,  2190,  2197,  2204,  2210,  2217,  2224,  2236,  2240,  2250,
    2254,  2258,  2263,  2268,  2273,  2278,  2283,  2288,  2296,  2300,
    2304,  2309,  2314,  2319,  2324,  2329,  2334,  2339,  2345,  2353,
    2358,  2363,  2368,  2373,  2378,  2383,  2388,  2393,  2398,  2404,
    2412,  2416,  2421,  2426,  2431,  2436,  2441,  2446,  2451,  2456,
    2464,  2468,  2473,  2478,  2483,  2488,  2493,  2498,  2503,  2508,
    2513,  2519,  2526,  2533,  2543,  2547,  2555,  2559,  2563,  2567,
    2571,  2587,  2603,  2612,  2616,  2626,  2633,  2644,  2648,  2656,
    2660,  2664,  2668,  2672,  2688,  2704,  2722,  2731,  2735,  2745,
    2752,  2756,  2764,  2768,  2784,  2800,  2809,  2819,  2826,  2830,
    2838,  2842,  2847,  2851,  2860,  2859,  2884,  2883,  2913,  2914,
    2921,  2922,  2926,  2927,  2931,  2935,  2939,  2943,  2947,  2951,
    2955,  2959,  2963,  2967,  2974,  2982,  2986,  2990,  2995,  3003,
    3007,  3014,  3015,  3020,  3027,  3028,  3033,  3041,  3045,  3049,
    3056,  3060,  3064,  3072,  3071,  3094,  3093,  3116,  3117,  3121,
    3127,  3134,  3140,  3149,  3150,  3151,  3155,  3159,  3163,  3167,
    3171,  3175,  3179,  3184,  3189,  3194,  3199,  3203,  3208,  3217,
    3222,  3230,  3234,  3238,  3246,  3256,  3256,  3266,  3267,  3271,
    3272,  3273,  3274,  3275,  3276,  3277,  3278,  3279,  3280,  3281,
    3282,  3282,  3282,  3283,  3283,  3283,  3283,  3283,  3284,  3284,
    3284,  3284,  3284,  3285,  3285,  3285,  3286,  3286,  3286,  3286,
    3286,  3287,  3287,  3287,  3287,  3287,  3288,  3288,  3289,  3289,
    3289,  3289,  3289,  3290,  3290,  3290,  3290,  3290,  3291,  3291,
    3291,  3291,  3291,  3292,  3292,  3292,  3292,  3292,  3293,  3293,
    3293,  3293,  3293,  3294,  3294,  3294,  3294,  3294,  3295,  3295,
    3295,  3295,  3295,  3295,  3296,  3296,  3296,  3296,  3296,  3297,
    3297,  3297,  3297,  3298,  3298,  3298,  3298,  3299,  3299,  3299,
    3299,  3299,  3300,  3300,  3300,  3300,  3301,  3301,  3301,  3301,
    3301,  3302,  3302,  3302,  3302,  3303,  3303,  3303,  3303,  3303,
    3304,  3304,  3307,  3307,  3307,  3307,  3307,  3307,  3307,  3307,
    3307,  3307,  3307,  3308,  3308,  3308,  3308,  3308,  3308,  3308,
    3308,  3308,  3308,  3309,  3309,  3313,  3317,  3324,  3328,  3335,
    3339,  3346,  3350,  3354,  3358,  3362,  3366,  3370,  3374,  3378,
    3382,  3386,  3390,  3394,  3398,  3402,  3406,  3410,  3414,  3418,
    3422,  3426,  3430,  3434,  3438,  3442,  3446,  3450,  3454,  3458,
    3462,  3466,  3470,  3474,  3478,  3482,  3486,  3490,  3494,  3498,
    3502,  3510,  3514,  3518,  3522,  3526,  3530,  3534,  3544,  3554,
    3560,  3566,  3572,  3578,  3584,  3590,  3596,  3603,  3610,  3617,
    3624,  3630,  3636,  3640,  3644,  3648,  3652,  3656,  3660,  3671,
    3682,  3686,  3690,  3694,  3698,  3702,  3706,  3710,  3714,  3718,
    3722,  3726,  3730,  3734,  3738,  3742,  3746,  3750,  3754,  3758,
    3762,  3766,  3770,  3774,  3778,  3782,  3786,  3790,  3794,  3798,
    3802,  3806,  3810,  3817,  3821,  3825,  3829,  3833,  3837,  3841,
    3845,  3849,  3855,  3861,  3865,  3872,  3880,  3884,  3888,  3892,
    3896,  3900,  3904,  3908,  3912,  3916,  3920,  3924,  3928,  3932,
    3936,  3940,  3944,  3948,  3962,  3966,  3970,  3974,  3978,  3982,
    3986,  3990,  3994,  3998,  4002,  4006,  4010,  4021,  4032,  4036,
    4040,  4044,  4048,  4052,  4056,  4060,  4064,  4068,  4072,  4076,
    4080,  4084,  4088,  4092,  4096,  4100,  4104,  4108,  4112,  4116,
    4120,  4124,  4128,  4132,  4136,  4140,  4144,  4148,  4152,  4159,
    4163,  4167,  4171,  4175,  4179,  4183,  4187,  4191,  4197,  4203,
    4211,  4215,  4219,  4223,  4230,  4240,  4246,  4252,  4262,  4274,
    4282,  4286,  4316,  4320,  4324,  4328,  4332,  4336,  4342,  4346,
    4350,  4354,  4358,  4369,  4373,  4377,  4381,  4389,  4393,  4397,
    4403,  4414
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "REAL", "INTEGER",
  "CHAR_TOK", "SIMPLE_STRING", "SIMPLE_IDENTIFIER", "STRING_LITERAL",
  "CUSTOM_LITERAL", "IDENTIFIER", "TYPENAME_IDENTIFIER",
  "TYPEPACK_IDENTIFIER", "SCOPING", "TYPEDEFNAME", "ELLIPSIS", "OROR",
  "ANDAND", "EQCOMPARE", "NECOMPARE", "LECOMPARE", "GECOMPARE",
  "SPACESHIP", "LSHIFT", "RSHIFT", "POINTSAT_STAR", "DOT_STAR", "UNARY",
  "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS", "UNARY_PLUS", "UNARY_STAR",
  "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS", "TIMESEQUAL",
  "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL", "OREQUAL",
  "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "ATTR_LEFT",
  "ATTR_RIGHT", "KW_ALIGNAS", "KW_ALIGNOF", "KW_AUTO", "KW_BEGIN_PUBLISH",
  "KW_BLOCKING", "KW_BOOL", "KW_CATCH", "KW_CHAR", "KW_CHAR8_T",
  "KW_CHAR16_T", "KW_CHAR32_T", "KW_CLASS", "KW_CONST", "KW_CONSTEVAL",
  "KW_CONSTEXPR", "KW_CONSTINIT", "KW_CONST_CAST", "KW_DECLTYPE",
  "KW_DEFAULT", "KW_DELETE", "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE",
  "KW_END_PUBLISH", "KW_ENUM", "KW_EXTENSION", "KW_EXTERN", "KW_EXPLICIT",
  "KW_EXPLICIT_LPAREN", "KW_PUBLISHED", "KW_FALSE", "KW_FINAL", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_HAS_VIRTUAL_DESTRUCTOR", "KW_IF",
  "KW_INLINE", "KW_INT", "KW_IS_ABSTRACT", "KW_IS_BASE_OF", "KW_IS_CLASS",
  "KW_IS_CONSTRUCTIBLE", "KW_IS_CONVERTIBLE_TO", "KW_IS_DESTRUCTIBLE",
  "KW_IS_EMPTY", "KW_IS_ENUM", "KW_IS_FINAL", "KW_IS_FUNDAMENTAL",
  "KW_IS_POD", "KW_IS_POLYMORPHIC", "KW_IS_STANDARD_LAYOUT",
  "KW_IS_TRIVIAL", "KW_IS_TRIVIALLY_COPYABLE", "KW_IS_UNION", "KW_LONG",
  "KW_MAKE_MAP_KEYS_SEQ", "KW_MAKE_MAP_PROPERTY", "KW_MAKE_PROPERTY",
  "KW_MAKE_PROPERTY2", "KW_MAKE_SEQ", "KW_MAKE_SEQ_PROPERTY", "KW_MUTABLE",
  "KW_NAMESPACE", "KW_NEW", "KW_NOEXCEPT", "KW_NOEXCEPT_LPAREN",
  "KW_NULLPTR", "KW_OPERATOR", "KW_OVERRIDE", "KW_PRIVATE", "KW_PROTECTED",
  "KW_PUBLIC", "KW_REGISTER", "KW_REINTERPRET_CAST", "KW_RETURN",
  "KW_SHORT", "KW_SIGNED", "KW_SIZEOF", "KW_STATIC", "KW_STATIC_ASSERT",
  "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THREAD_LOCAL",
  "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPEID",
  "KW_TYPENAME", "KW_UNDERLYING_TYPE", "KW_UNION", "KW_UNSIGNED",
  "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WCHAR_T",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "$@1", "constructor_inits",
  "constructor_init", "extern_c", "$@2", "declaration",
  "friend_declaration", "$@3", "storage_class", "optional_attributes",
  "attribute_specifiers", "attribute_specifier", "type_like_declaration",
  "$@4", "$@5", "multiple_instance_identifiers", "typedef_declaration",
  "$@6", "typedef_instance_identifiers", "constructor_prototype", "$@7",
  "$@8", "$@9", "function_prototype", "$@10", "$@11", "$@12", "$@13",
  "$@14", "function_post", "function_operator",
  "more_template_declaration", "template_declaration", "$@15",
  "template_formal_parameters", "template_nonempty_formal_parameters",
  "typename_keyword", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "$@16",
  "instance_identifier_and_maybe_trailing_return_type",
  "maybe_trailing_return_type", "maybe_comma_identifier",
  "function_parameter_list", "function_parameters",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_constructor_body",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "function_parameter", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "parameter_pack_identifier", "not_paren_empty_instance_identifier",
  "empty_instance_identifier", "type", "type_pack", "type_decl",
  "predefined_type", "var_type_decl", "full_type", "anonymous_struct",
  "$@17", "named_struct", "$@18", "maybe_final", "maybe_class_derivation",
  "class_derivation", "base_specification", "enum", "enum_decl",
  "enum_element_type", "enum_body_trailing_comma", "enum_body",
  "enum_keyword", "struct_keyword", "namespace_declaration", "$@19",
  "$@20", "using_declaration", "simple_type", "simple_int_type",
  "simple_float_type", "simple_void_type", "code", "$@21", "code_block",
  "element", "optional_const_expr", "optional_const_expr_comma",
  "const_expr_comma", "no_angle_bracket_const_expr", "const_expr",
  "const_operand", "formal_const_expr", "formal_const_operand",
  "capture_list", "capture", "class_derivation_name", "name",
  "name_no_final", "string_literal", "empty", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-1076)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-777)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     417, -1076,  4272,  6265,   143,    61, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076,   -89,   -14,    -9,    25,    37,    49,
      76,   -49,   117,   146, -1076, -1076,   145,   148,   152,   154,
     168,   172,   174,   179,   200,   208,   232,   235,   249,   253,
     256,   287,   304,   335,   348,   365,  6529,  4272, -1076, -1076,
     186,   376,   384,  2182,   254, -1076,   386,   395,   400,  4272,
    4272,  4272,  4272,  4272,  2842,   845,  4272,  4149, -1076,   114,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,  6384,
     401, -1076,     8, -1076, -1076,  2327,  4831,  4831, -1076,  5163,
     406, -1076,  4831, -1076, -1076,   478,   478, -1076, -1076, -1076,
   -1076,   427,   245,   245, -1076, -1076, -1076, -1076, -1076,  5119,
     413,   340, -1076,  4272,  4272,  6265,  4272,  4272,  4272,  4272,
    4272,  6265,  4272,  6265,  4272,  6265,  4272,  6265,  6265,  6265,
    6265,  6265,  6265,  6265,  6265,  6265,  6265,  6265,  6265,  6265,
    6265,  6265,  6265,  4272, -1076, -1076,   414,  5163,   422,   430,
     245,   245, -1076,  5381,  6265,  4272,  4272,   435,  2842,   228,
    6265,  2842,  4272,  4272,   228,   228,   228,   228,   228,   -89,
      -9,    25,    37,    49,    76,   117,   145,   152,  3616,  5935,
    6113,  6727,   400,   437,  -101,  4149, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,  5163,  5163,
    -114,   454, -1076, -1076,   228,  4272,  4272,  4272,  4272,  4272,
    4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,
    4272,  4272,  4272,  4272,  4272,  4272,  5163,  3278,  4272, -1076,
   -1076,   478,   478,  3420, -1076, -1076, -1076,  4831, -1076, -1076,
   -1076, -1076,  6265, -1076,   421,   632,   245,   478,   478,   245,
     245,   109,   443, -1076,   447, -1076, -1076,   139,  2016,  5163,
     576,   473,   464,  2989, -1076,  6815,   462,   484, -1076,   467,
     475,   480,   482,   488,   489,   490,   483,   499,   508,   503,
     504,   505,   506,   527,   509,   -81,   529,   514,   515,   518,
     519,   520,   521,   522,   524,   536,   538,   542,   544,  4272,
   -1076,  6265,  4272,  5163,  5163, -1076,   539,   552,   553,  5163,
     556,   567,   559,  5402,   564,   566,  4272,  4272, -1076,   686,
   -1076,  1071,   569,  4272, -1076, -1076,  2317,  5871,  1747,  1747,
     635,   635,  1356,   731,   731, -1076,  5696,  5888,  1569,  1956,
     635,   635,   135,   135,   228,   228,   228, -1076, -1076,   -64,
    2201, -1076, -1076,   571,  5421,   572,   245,   245,   316,   443,
   -1076,   443, -1076,   316,   316, -1076,   245,   245,   245,  6172,
     574,    29, -1076,   575,  4272,  5163,   568, -1076, -1076, -1076,
   -1076, -1076,  2083,   593,    11,   171,   173,   182, -1076, -1076,
   -1076,   604,   245,  5163,  4777,   -89, -1076,   591,  5163,   596,
     597, -1076, -1076, -1076,   245,   245, -1076,  5440, -1076,  6924,
    6924,  6924,  6924,  6924, -1076,  6924,  5934,  6924,  4272,   613,
   -1076,  6920,   600,   601,   603,   605,   606,   607,  6924,    32,
     619,   624,   625,  6924,  6924,   614,  6737,  6924,  6924,  5005,
    6924,  6924, -1076, -1076, -1076,  5050, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,   616,
   -1076,   617, -1076, -1076, -1076, -1076,  6265, -1076,  6265, -1076,
    6265, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076,  5480,   611,   622, -1076, -1076,   618, -1076,
   -1076,   623,  4414,   626, -1076, -1076, -1076, -1076,   228,  4149,
   -1076,  5163,   454,    40,  1061, -1076,  4149,  4272, -1076, -1076,
   -1076, -1076, -1076,   316,   636,   644,  5163,   245,   316,   316,
     245,   245,   640, -1076,   640,   640,   316,   316,   316,  6291,
     245,   257,   537, -1076, -1076,    56,   637,  4149, -1076,   245,
   -1076, -1076, -1076, -1076,  2083, -1076,   710,  5163, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076,   627,   654,   658, -1076,
   -1076,  6529, -1076, -1076,   660,  4919,   661, -1076,   657,  4272,
    4272,  4272,  4272,  2842,  4272,   663,    41, -1076, -1076,  4433,
   -1076,   114,   665,  3562, -1076,  6265,   245,  1565,  2016,   245,
    6065,  6924, -1076, -1076, -1076, -1076, -1076, -1076,  6924, -1076,
   -1076, -1076,  5499, -1076,  6815,  4614, -1076,  5163,  5163,  5163,
    5163,  5163,  5163, -1076, -1076,  5163, -1076, -1076, -1076, -1076,
   -1076,  4272, -1076,  5154, -1076,   672, -1076,  5247, -1076,  5163,
    5163,    84, -1076, -1076,   377,   668,  6410, -1076,  5163, -1076,
     336,   685, -1076,  4272,  4272,   670,   671,   679, -1076, -1076,
   -1076,  4272, -1076,  4272, -1076,   680, -1076, -1076, -1076, -1076,
   -1076, -1076,  4272, -1076,   674, -1076, -1076,   808,  4149,   640,
     245,   245,   316,   640,   640,   316,   316,  4272,   -77,    87,
     104,  6384,   257,   537, -1076,   691,   245,   257,   257,   245,
     245,   257,  -105,   245, -1076,   692,  5163,   245,   537,   537,
     245,   245,   537,   -98,  1061, -1076, -1076,   245,    77,   707,
      51, -1076,   706, -1076,   816,  6265,  6265,  6265,   694,  6265,
     695,  2842,   271,  6265,  2842,   228,   228,   228,   228,   696,
     120,   228, -1076, -1076,  4801,  4272,  4272,  4272,  4272,  4272,
    4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,  4272,
    4272,  4272,  4272,  4272,  4272,  4272,  5163,  3704,  4272,   697,
    5599,   698, -1076, -1076,   711, -1076, -1076, -1076,  6924, -1076,
   -1076,   715,   718,   720,   722,   723,   725,   728,    52,   732,
    5321,  6076,   399,   713,   336, -1076, -1076,   734,   735, -1076,
     729, -1076,    57,  6622,   498, -1076,   716,   130, -1076, -1076,
    3136, -1076, -1076,   712,   126,   144, -1076, -1076, -1076,   158,
     167, -1076,  5658,   494,  6503,   738, -1076,   316, -1076,   640,
     640,   640,   724,   733,   737,   739,   257,   537,  -105,   -98,
     245,   257,   741,   741,   257,   257,   164,  4272, -1076, -1076,
     245,   245,   537,   742,   742,   537,   537,   216,  4272, -1076,
     808,   743, -1076,  4272, -1076,  4755,   756,   740, -1076,   245,
     744,   748,   753,  4272,   755,  5163,   746,   759,   750,  5677,
    4272, -1076, -1076, -1076,  2317,  5871,  1747,  1747,   635,   635,
    1356,   731,   731, -1076,  5715,  5888,  1569,  1956,   635,   635,
     135,   135,   228,   228,   228, -1076, -1076,   187,  2862, -1076,
   -1076, -1076,  2083, -1076,    90, -1076,   918,   921,   922,   923,
     925,   926, -1076, -1076,   177,   781, -1076, -1076, -1076, -1076,
    6139, -1076,   776,   786,  6707, -1076,   118, -1076, -1076,    35,
   -1076,   712, -1076, -1076,  6265,    40,   770,   778,   712,    40,
     498,   780,   245,   498,   498,   245,   245,   183,   245, -1076,
      97, -1076, -1076, -1076,  5163,   328, -1076,   771, -1076,   792,
     793,  3846,  3439,   783,   245,   712,  4985,   712,   245,   245,
     712, -1076,     3,   405,   245, -1076, -1076, -1076, -1076,  1061,
   -1076, -1076,    18,  6529,   478, -1076,   640,   245,    40,    40,
      40,  -105,   -98, -1076, -1076,   257,   741,   741,   741,   782,
     775,   537, -1076,   742,   742,   742,   787,   785, -1076,  3865,
    5241,  6616,  6631,  5163,   333, -1076, -1076,   943, -1076,  4755,
   -1076, -1076,   795,   797,   796,   804,   803,  4414,   806, -1076,
   -1076,   228,  4272, -1076, -1076,   707, -1076, -1076,   824,   192,
     825,   829,   830,   831, -1076,    34, -1076,   118,  6893,  6076,
    5163,   834,   826,   245,   118,   118,   245,   245,   118,   -92,
     742, -1076,   405,   839,   822,   827,   712,   458,   823,   258,
     245,   498,   828,   828,   498,   498, -1076,  4272, -1076, -1076,
      40,   835,   330, -1076,   -65,   842,   844, -1076,  2665, -1076,
   -1076, -1076,  3846,   836,   847,  4149, -1076, -1076,   245,   712,
     392,   995, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,   832,
     837, -1076,   245,   392,   712,   712,   461,  4272, -1076,  4272,
   -1076,  3136,   858, -1076, -1076,   808,   841, -1076,   478, -1076,
     843, -1076,   846,   849,   850, -1076, -1076,   741,    40,   245,
     742,    40,   245, -1076,  6653, -1076,  6653, -1076,  6653, -1076,
   -1076,  6653,  6653,  6653, -1076,    98, -1076,  4272,  4272, -1076,
    4272, -1076,  4272,  4149,   116,  1006,  1009,   865,  1016,   853,
   -1076,  1020,  1021,  1022,   195,   877,   -92,   742, -1076, -1076,
   -1076, -1076, -1076, -1076,  6265,   245,   118,   118,   118,  1246,
   -1076, -1076,   879, -1076, -1076, -1076, -1076,   479,   866, -1076,
   -1076,   498,   828,   828,   828,    40,   860,   867, -1076, -1076,
    5163,  4272,  4272, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076,   869, -1076,  3988,   712,   392,   245, -1076, -1076,
   -1076,   392,   392, -1076,  4149,  4777,   863,  3439,   712,   891,
   -1076, -1076, -1076, -1076, -1076, -1076,   874, -1076,   875, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076,   197,   205,   229,
     239, -1076,   878,   267, -1076,   896,   900,   291,   885,   303,
   -1076, -1076, -1076, -1076,   118,   888,   899,   901,   902,  4556,
     903,  1246,  1246,  1246,  1246,  1246,  2842,  1246,  5758, -1076,
     712,  1061,    40,   895, -1076,  1061,    40,   828,   894,   245,
   -1076,   897, -1076,   905,   910,  2488, -1076,  3846,  4149,   392,
   -1076,   911,   245, -1076, -1076,  1061,  1061,  1061, -1076, -1076,
   -1076, -1076, -1076, -1076,   913,  1065,   915,  1067, -1076,  1076,
     931,   932,  1079,   934,  6265,  6265,  6265,  6265,   920,  2842,
     278,  6265,   278,   278,   278,   278,   278,   919,   308,   278,
    1246,  1246,  1246,  1246,  1246,  1246,  1246,  1246,  1246,  1246,
    1246,  1246,  1246,  1246,  1246,  1246,  1246,  1246,  1246,  5163,
    4130,  4272, -1076, -1076,   924, -1076,    40, -1076,   927, -1076,
   -1076,  1061, -1076, -1076,  1080, -1076,   928, -1076, -1076,   929,
     808,   808,   808,  1061,  1061, -1076,   939, -1076,   933,   942,
   -1076, -1076,   312, -1076,   936,   941,   944,   953,  5163,   946,
     954,  1246, -1076,  5776,  1794,  2223,  2223,  1142,  1142,  1397,
    1122,  1122, -1076,  1850,  5932,  5949,  2424,   301,   301,   278,
     278,   278, -1076, -1076,   324,  3154, -1076,    40,   947, -1076,
     702, -1076, -1076, -1076,  1061, -1076, -1076, -1076, -1076, -1076,
   -1076,  1112,   950,   970,  1119,  1121,   978, -1076,   968,   969,
     971,   976,  4659,   972,   278,  1246, -1076, -1076,  1061,   977,
   -1076,   702, -1076, -1076,   999, -1076,   984,   325, -1076,  4272,
    4272,  4272, -1076,  4272,  5758, -1076, -1076,  1061, -1076,  1003,
    1150,  1005,   326,   342,   364,   369,  1061,   808, -1076,   989,
   -1076, -1076, -1076, -1076, -1076,   808, -1076,  1012, -1076, -1076
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
       0,   781,     0,     0,     0,   781,     5,   667,   663,   666,
     777,   778,   669,   670,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   665,   671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   673,   672,
       0,     0,     0,     0,     0,   664,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   781,     0,     3,   601,   668,
     305,   316,   315,   396,   397,   399,   400,   401,   380,     0,
       0,   412,   377,   411,   406,   403,   402,   405,   381,     0,
       0,   382,   404,   414,   398,   781,   781,     4,   307,   308,
     309,     0,   781,   781,   304,   393,   394,   395,     1,     0,
       0,     7,    63,   781,   781,     0,   781,   781,   781,   781,
     781,     0,   781,     0,   781,     0,   781,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   781,   331,   337,     0,     0,     0,   626,
     781,   781,   330,     0,     0,   781,   781,     0,     0,   623,
       0,     0,   781,   781,   635,   633,   632,   634,   631,   305,
     396,   397,   399,   400,   401,   412,   411,   406,   403,   402,
     405,   404,   398,     0,     0,   559,   762,   763,   764,   772,
     765,   768,   766,   770,   769,   767,   771,   751,   752,     0,
       0,   781,   757,   750,   630,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   779,
     780,   781,   781,     0,   378,   379,   413,   403,   408,   407,
     410,   306,     0,   409,     0,   291,   781,   781,   781,   781,
     781,   781,     0,   340,   290,   342,   781,   366,     0,     0,
       0,    68,    70,     0,     6,   781,     0,   558,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,     0,   781,     0,     0,   659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   662,   755,
     758,     0,   781,     0,   753,   220,   644,   645,   646,   647,
     648,   649,   650,   653,   654,   661,     0,   641,   642,   643,
     651,   652,   639,   640,   636,   637,   638,   660,   658,     0,
       0,   341,   343,     0,     0,     0,   781,   781,   781,     0,
     293,     0,   294,   781,   781,   205,   781,   781,   781,     0,
       0,   206,   209,    63,   781,   374,     0,   371,   773,   774,
     775,   776,     0,   368,   762,   763,   764,   766,   344,   310,
     346,     0,   781,     0,   781,   318,   329,     0,     0,     0,
       0,   320,   321,   322,   781,   781,   317,     0,    22,   781,
     781,   781,   781,   781,    23,   781,   781,   781,     0,     0,
      43,   781,     0,     0,     0,     0,     0,     0,   781,   781,
       0,     0,     0,   781,   781,     0,   781,   781,   781,     0,
     781,   781,    18,     8,    20,     0,    16,    17,    19,    78,
      45,   608,   607,   625,   615,   610,   612,   613,   614,     0,
     621,     0,   620,   676,   609,   677,     0,   679,     0,   680,
       0,   683,   684,   685,   686,   687,   688,   689,   690,   691,
     692,   693,   617,     0,     0,     0,   334,   333,     0,   616,
     619,     0,   622,     0,   628,   629,   618,   611,   602,   560,
     756,     0,   781,   781,   781,   103,   221,     0,   657,   656,
     313,   312,   314,   781,   292,     0,   281,   781,   781,   781,
     781,   781,   297,   280,   296,   295,   781,   781,   781,     0,
     781,   781,     0,   781,   208,   781,     0,   556,   555,   781,
     364,   370,   365,   369,     0,   781,   781,     0,    64,    69,
     743,   739,   742,   745,   746,   212,     0,     0,     0,   741,
     747,     0,   749,   748,     0,     0,     0,   740,     0,     0,
       0,     0,     0,     0,     0,     0,   213,   247,   216,   248,
     694,   744,    63,     0,   319,     0,   781,   366,     0,   781,
     781,   781,    60,    46,    57,    58,    59,    61,   781,    47,
     160,    52,     0,    24,   781,     0,    50,     0,     0,     0,
       0,     0,     0,    56,   781,     0,    27,    26,    25,    54,
      49,     0,   164,     0,   163,     0,    62,     0,    21,     0,
       0,   781,    51,    55,   339,   318,     0,    14,     0,    75,
       0,   338,    72,     0,     0,     0,     0,     0,   335,   336,
     627,     0,   624,     0,   754,     0,   111,   104,   113,   108,
     112,   106,     0,   109,     0,   105,   110,   781,   655,   298,
     781,   781,   781,   283,   284,   781,   781,   781,     0,     0,
       0,     0,   781,     0,   246,     0,   781,   781,   781,   781,
     781,   781,   781,   781,   258,     0,   269,   781,     0,     0,
     781,   781,     0,   781,   781,   207,   210,   781,   375,   311,
     781,   349,   781,   348,     0,     0,     0,     0,   704,     0,
       0,     0,   701,     0,     0,   712,   711,   710,   709,     0,
       0,   708,    71,   215,   781,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    67,   325,   368,   323,    66,    48,   781,    44,
     781,     0,     0,     0,     0,     0,     0,     0,   781,     0,
       0,   781,   339,   318,     0,   338,    81,     0,     0,   389,
       0,    86,    90,     0,   781,   781,     0,     0,   415,   227,
       0,    77,    74,     0,     0,     0,   678,   681,   682,     0,
       0,   781,     0,     0,     0,     0,   199,   781,   282,   287,
     286,   285,     0,     0,     0,     0,   781,     0,   781,   781,
     781,   781,   260,   261,   781,   781,     0,   781,   240,   259,
     781,   781,     0,   271,   272,     0,     0,     0,   781,   243,
     781,   299,   372,     0,   345,     0,     0,   351,   350,   781,
       0,     0,     0,   781,     0,     0,     0,     0,     0,     0,
       0,   738,   214,   217,   721,   722,   723,   724,   725,   726,
     727,   730,   731,   737,     0,   718,   719,   720,   728,   729,
     716,   717,   713,   714,   715,   736,   735,     0,     0,   327,
     326,   328,     0,    53,   781,   385,     0,     0,     0,     0,
       0,     0,   387,   383,     0,     0,   181,   182,   183,   169,
       0,   170,     0,   166,   171,   167,   781,   180,   165,     0,
      83,     0,   392,   391,     0,   781,     0,     0,     0,   781,
     781,     0,   781,   781,   781,   781,   781,     0,   781,   249,
     781,    92,   415,   222,     0,     0,    76,     0,   781,     0,
       0,   781,     0,     0,   781,     0,     0,     0,   781,   781,
       0,    73,   781,   781,   781,   605,   604,   606,   603,   781,
     107,   114,     0,     0,   781,   415,   288,   781,   781,   781,
     781,   781,   781,   241,   244,   781,   264,   263,   262,   268,
       0,     0,   270,   275,   274,   273,   279,     0,   300,   376,
     770,     0,   769,     0,     0,   352,   354,   759,   781,     0,
      65,   703,     0,     0,     0,     0,     0,   700,     0,   706,
     707,   695,     0,   734,   733,   324,   388,   781,     0,     0,
     781,     0,     0,     0,   781,     0,    42,   781,   781,     0,
     174,   172,     0,   781,   781,   781,   781,   781,   781,   781,
     178,    82,   781,     0,     0,     0,     0,     0,     0,     0,
     781,   781,   251,   252,   781,   781,    98,   781,   250,    15,
     781,     0,     0,     9,     0,     0,     0,   228,   416,   417,
     230,   231,   781,     0,   234,   236,   233,   229,   781,     0,
     187,     0,   127,   128,   129,   130,   131,   132,   135,   136,
     137,   152,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   156,   155,   139,   138,   124,   126,
     125,   133,   134,   122,   123,   119,   120,   121,   118,     0,
       0,   117,   781,   188,     0,     0,     0,     0,   195,   781,
     197,     0,     0,    79,   184,   781,     0,   115,   781,   200,
       0,   289,     0,     0,     0,   242,   245,   265,   781,   781,
     276,   781,   781,   373,     0,   357,     0,   356,     0,   355,
     760,     0,     0,     0,   761,   781,   353,     0,     0,   705,
       0,   702,     0,   732,   781,     0,     0,     0,     0,     0,
     202,     0,     0,     0,   781,     0,   781,   179,   159,   157,
     162,   158,   168,   175,     0,   781,   781,   781,   781,     0,
     176,   218,     0,    84,   390,   781,    88,     0,     0,   781,
     100,   781,   255,   254,   253,   781,     0,     0,   223,   415,
       0,   781,   781,   225,   226,   419,   420,   424,   421,   429,
     422,   423,   425,   426,   427,   428,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   504,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   781,   548,
     549,   550,   541,   553,   537,   538,   536,   543,   544,   532,
     533,   534,   535,   542,   540,   547,   545,   551,   546,   539,
     552,   418,     0,   232,   235,     0,   191,   781,   154,   153,
     185,   190,   189,   194,   198,   781,     0,   221,     0,     0,
     116,   201,   674,   781,   781,   781,     0,   266,     0,   277,
     363,   362,   361,   360,   359,   358,   347,     0,     0,     0,
       0,   386,     0,     0,    34,   203,     0,     0,     0,     0,
     384,    41,   177,   173,   781,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   219,   561,
       0,   781,   781,     0,    94,   781,   781,   256,     0,   781,
     781,     0,    10,     0,     0,     0,   237,   781,   238,   192,
     186,     0,   781,    80,   415,   781,   781,   781,   781,   781,
     698,   697,   699,   696,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     568,     0,   576,   574,   573,   575,   572,     0,     0,   571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    85,    87,     0,    96,   781,    91,     0,   781,
     257,   781,   224,    13,    11,   554,     0,   781,   193,     0,
     781,   781,   781,   781,   781,    37,   781,    35,     0,     0,
      38,    40,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,   600,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   599,     0,   582,   583,   584,   580,   581,   577,
     578,   579,   598,   597,     0,     0,   781,   781,     0,   781,
      99,    93,    12,   239,   781,   675,   303,   302,   301,   267,
     278,     0,     0,     0,     0,     0,     0,   570,     0,     0,
       0,     0,   567,     0,   562,     0,   596,   595,   781,     0,
     781,   101,   196,   203,     0,    29,     0,     0,    31,     0,
       0,     0,   569,     0,   594,    89,   781,   781,    36,     0,
       0,     0,     0,     0,     0,     0,   781,   781,    39,     0,
      32,   565,   564,   566,   563,   781,    95,     0,    97,    33
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1076, -1076,  -389, -1076, -1076,   -71, -1076, -1076,   578,  -429,
   -1076,  -222,   779,  -344, -1076,  -427, -1076, -1076,  -226, -1076,
   -1076,  -277, -1076, -1076, -1076, -1076,   558, -1076, -1076, -1076,
   -1076, -1076,  -497, -1076, -1076,  -410, -1076, -1076, -1076, -1076,
     131,   259,  -862, -1076,  -903,  -845,  -370,  -501, -1076,  -208,
   -1076,   -18,  -470, -1076,  -739, -1075, -1076,  -391,   455,  -897,
    -481,  -460,   -66,   -95,   -54,   -58,  -252,  -535,   563,  1372,
    -240, -1076,  -232, -1076, -1076, -1076, -1076,   176,  -225, -1076,
    -514, -1076, -1076,   -22,   -19, -1076, -1076, -1076, -1076,   -27,
      -8, -1076, -1076,  -923, -1076,  -165, -1076,  -620,  -104,   -60,
     590,  1053,   416,   631, -1076, -1076,   881,  -925,  1452,  -223,
    -386,    -1
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     4,     5,   265,  1082,  1083,   442,   795,   443,   444,
     604,   445,   369,   260,   261,   446,   803,   797,   971,   628,
     931,  1061,   639,   935,  1452,   939,   640,  1080,  1536,  1597,
    1235,  1456,   504,  1142,  1210,   447,   625,   922,   923,   924,
     925,   926,   972,  1395,   973,   815,  1199,   370,   371,   575,
     576,  1220,   324,   956,   801,  1093,  1094,   372,   578,   947,
     832,   843,   252,   253,    95,    96,   641,   149,   642,    97,
      98,   545,    99,   546,   712,   856,   857,  1015,   100,   101,
     542,   375,   376,   102,   103,   448,  1044,  1037,   449,   104,
     105,   106,   107,   957,   958,  1088,  1381,   536,   266,   267,
    1624,   185,    68,   579,   580,   200,   201,  1016,  1017,   693,
      69,   112
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
       6,   255,   655,   577,   184,  1008,   600,   622,   581,   624,
     269,   400,   271,   272,   273,   274,   275,  1382,   277,   152,
     279,   232,   281,   401,   150,   231,   718,   151,  1062,  1081,
     709,   402,   654,  1156,   383,   390,   704,   814,   403,   298,
     229,   321,   230,  1069,   534,   930,  1072,  1073,   937,   549,
     692,   307,   308,   323,   317,   365,   733,   822,   314,   315,
     323,    -2,  1160,   322,   203,   113,  1219,   936,   837,   234,
     937,   705,   703,   318,   468,   848,  1067,   238,   239,   240,
     109,   837,   110,   114,   243,  1175,  1177,  1179,   109,  1241,
     110,   317,  -773,   469,   254,   254,   677,   823,   184,   109,
     109,   110,   110,  1100,   109,  1143,   110,  1242,  1146,   109,
     508,   110,   268,   268,   121,   268,   268,   268,   268,   268,
     229,   268,   230,   268,   365,   268,   366,  1150,   378,   379,
     380,  1052,   109,   696,   110,  1053,   351,   352,   109,   684,
     110,   235,   268,   108,   706,   109,   109,   110,   110,   378,
     379,   380,   360,   362,   268,   268,   710,   109,   115,   110,
    1147,   268,   268,   116,   109,  -773,   110,   349,  -773,   214,
     238,   239,   240,   243,  1232,  1148,  1149,  1233,  1234,   581,
    1054,   359,   361,    10,   535,    11,   614,   592,   593,   594,
     595,   596,  1157,   597,   599,   601,   734,   117,   485,   606,
     325,   828,   938,   714,  1227,   401,   613,   833,  1205,   118,
     836,   619,   620,   402,   623,   626,   627,  1000,   632,   633,
     403,   119,   838,   829,   938,   778,   854,   912,  1007,   238,
     254,   254,   852,   849,  1153,   853,   406,  1386,   381,   844,
     789,   404,   847,   109,   405,   110,   254,   254,   120,  1410,
     373,  1411,  -774,  1412,  -775,   377,  1413,  1414,  1415,   381,
     677,   824,   214,  -776,   450,  1036,  1055,   378,   379,   380,
     685,   367,  1079,  1416,   686,   317,   368,   677,   825,   984,
    1056,   317,  1391,  1392,   952,  1057,   953,   954,   955,   122,
    1058,  1421,   522,   109,   871,   110,   382,   524,   525,   317,
     975,   268,   223,   224,   225,   744,   226,   227,   228,   123,
    1399,   532,  1519,   317,   979,   531,  1461,   124,   976,   687,
     125,   505,   317,  1223,   126,  -774,   127,  -775,  -774,   515,
    -775,   516,   977,   517,  1457,  1519,  -776,   837,   999,  -776,
     128,   978,   317,   577,   129,   991,   130,  1196,   581,   154,
     996,   131,   317,   997,   998,  1076,  1077,   523,   993,   994,
     317,  1033,   523,   523,   764,   390,  1197,   992,   599,   606,
    1430,  1480,   132,   538,   543,   785,   767,   381,   518,  1481,
     133,   904,  1003,   401,   317,  1004,  1005,   401,  1035,   848,
    1006,   402,  1546,   582,   317,   402,  1085,  1086,   403,   226,
     227,   228,   403,  1482,   134,   688,   950,   135,   450,   450,
     450,   450,   450,  1483,   450,   450,   450,   160,   406,   689,
     450,   136,  1485,   404,   690,   137,   405,   450,   138,   691,
    1230,  1077,   450,   450,  1064,   450,   450,   450,  1068,   450,
     450,  1486,   756,   757,   758,  1059,  1489,   669,  1158,  1529,
    1530,  1531,   673,   674,  1181,  1182,  1183,  1236,  1492,   139,
     678,   679,   680,   317,   519,  1490,  1060,  1615,  1526,  1527,
    1528,   683,  1529,  1530,  1531,   682,   140,  1493,   520,   317,
    1650,   317,  1572,   521,  1239,  1240,  1616,  1162,  1163,  1164,
     798,   244,   799,   245,   800,   246,   264,   317,  1626,  1651,
    1661,   325,   373,  1152,   186,   187,   188,   141,   378,   379,
     380,   941,   523,   730,  1167,   942,  1662,   523,   523,   317,
     142,  1165,  1166,  1469,   317,   523,   523,   523,  1045,  1396,
     694,  -102,   505,  -102,   152,  -102,   543,   143,  1663,   150,
     247,  1170,   151,  1664,     6,   713,   903,  1062,   155,   791,
     695,  1549,   696,  -102,   697,  -102,   156,  -102,   161,   798,
     943,   799,   189,  1151,  1148,  1149,  1206,   162,     1,     2,
       3,   948,   163,   233,   833,   190,   191,   836,   242,  1237,
     974,   256,   794,   804,   805,   263,   299,  1207,   356,   450,
     450,   809,  1222,   810,   301,   844,   406,   450,   847,   698,
     406,   404,   302,   450,   405,   404,   819,   309,   405,   820,
     821,   316,   323,     6,   192,   193,   374,   194,   381,  1208,
    -280,  1209,   195,   827,   196,   392,   248,   826,   393,  1185,
    1148,  1149,  1228,  1148,  1149,  1393,   394,   451,  1211,   317,
     249,   452,   186,   187,   188,   250,   944,   459,  1194,   453,
     251,  1148,  1149,  1453,   454,  1204,   455,   211,   212,   213,
     945,   730,   456,   457,   458,   946,   816,  1406,   981,   214,
    1408,   523,   461,   460,   523,   523,   538,   462,   463,   464,
     465,   694,   466,   467,   470,   699,   694,   694,   471,   472,
     694,   325,   473,   474,   475,   476,   477,   897,   478,   700,
     189,   500,   325,   488,   701,  1606,  1607,  1608,   974,   702,
     479,   858,   480,   190,   191,   974,   481,   948,   482,   656,
     948,   948,   378,   379,   380,   963,   489,   490,  1451,   964,
     492,   493,  1455,   494,  1458,   996,   997,   998,   496,   940,
     497,   503,   974,   540,   974,   510,   512,   974,   533,  -204,
     544,   986,   192,   193,   927,   194,  1003,  1004,  1005,  1024,
     195,   547,   196,   583,   657,   214,   658,   450,   585,     6,
     603,   586,   607,   608,   965,   609,   616,   610,   611,   612,
     928,   617,   618,   659,   111,   649,   621,   152,   643,   644,
     651,   711,   150,   949,     6,   151,   650,   652,   653,   715,
     221,   222,   223,   224,   225,  -281,   226,   227,   228,  -282,
     505,   670,  1666,   677,   707,   660,   523,   716,   661,   662,
    1668,   717,   663,   719,   723,   694,   623,   325,   325,   724,
     694,   966,   381,   694,   694,   781,   538,   732,   664,  -211,
     792,   802,   814,   974,   806,   807,   813,   538,   948,   816,
     665,   948,   948,   808,   811,   186,   187,   188,   830,   840,
     967,  -367,   268,   855,   666,   859,   863,   865,   902,   905,
     870,   899,   901,   906,   968,   907,   974,   908,   909,   969,
     910,   257,   258,   911,   970,   929,   913,   934,   951,  1159,
     932,   933,   985,   927,   543,  1019,   221,   222,   223,   224,
     225,   987,   226,   227,   228,   988,  1475,  1476,  1477,   989,
    1018,   990,  1022,   189,   837,   848,  -289,  1023,  1021,  1025,
    1027,   974,   974,  1028,  1029,   694,   190,   191,  1038,   303,
     304,  1039,  1040,  1041,   373,  1042,  1043,  1046,   373,   949,
    1048,  1049,   949,   949,  1065,  1066,  1087,  1070,  1090,  1091,
    1098,  1534,  1169,  1167,  1168,  1538,   152,  1089,  1184,  1171,
    1096,   150,  1172,  1541,   151,   192,   193,  1187,   194,  1188,
    1189,   816,   325,   195,  1170,   196,  1190,  1191,  1192,  1195,
    1198,  1553,  1554,   254,  1201,  1202,  1203,   373,   373,   373,
     325,   325,  1214,  1215,   694,  1224,  1225,  1229,  1243,  1226,
    1244,  1077,  1384,   197,   577,  1387,  1388,   198,   948,   581,
    1238,  1383,   199,  1398,  1389,  1400,  1422,     6,  1402,  1423,
    1403,  1424,   927,  1404,  1405,   358,  1425,  1426,   363,   364,
    1427,  1428,  1429,  1431,  1450,  1598,     6,  1459,  1454,  1200,
    1472,  1460,  1600,     6,  1466,  1474,   694,   450,  1478,  1479,
    1604,  1487,  1484,   694,   694,    67,  1488,   694,  1221,  1491,
    1494,   325,  1495,  1401,  1496,  1497,  1501,  1535,  1539,  1555,
     949,  1557,  1542,   949,   949,  1556,   538,  1558,   656,   373,
    1543,   186,   187,   188,  1544,  1547,  1559,  1560,  1561,  1562,
    1563,  1096,  1568,  1571,  1611,  1602,  1629,  1614,  1596,  1628,
     153,  1599,  1631,  1603,  1605,  1618,   159,  1613,  1619,   109,
    1617,   110,   164,   165,   166,   167,   168,  1620,  1623,   204,
    1622,  1630,  1633,   657,  1634,   658,  1635,  1417,  1418,  1636,
    1419,  1637,  1420,  1647,  1638,   513,   514,  1463,  1464,   189,
    1639,  1640,   659,  1641,  1643,   526,   527,   528,   538,  1656,
    1642,  1646,   190,   191,   816,  1648,  1519,   254,  1649,  1658,
    1659,  1660,   974,  1667,  1516,  1517,  1518,   373,  1669,  1462,
     373,   548,  1473,  1532,   660,   974,  1519,   661,   662,  1047,
    1212,   663,   769,   587,   588,   784,  1612,  1471,  1432,   873,
     786,   192,   193,  1465,   194,  1186,   722,   664,     0,   195,
       0,   196,   502,     0,     0,  1221,     0,     0,   615,   665,
       0,     0,     0,     0,   313,   694,   694,   694,     0,     0,
       0,     0,     0,   666,   505,     0,     0,   974,   505,     0,
     949,     0,     0,   501,   373,     0,     0,     0,   199,     0,
     268,   268,     0,     0,     0,     0,     0,     0,     0,     7,
       8,     9,    10,     0,    11,    12,    13,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   350,     0,   667,     0,     0,   354,  1524,  1525,  1526,
    1527,  1528,     0,  1529,  1530,  1531,   672,  1435,     0,   675,
     676,     0,     0,     0,     0,     0,     0,  1524,  1525,  1526,
    1527,  1528,  1436,  1529,  1530,  1531,   407,  1437,   708,     0,
       0,     0,     0,     0,     0,     0,    24,    25,     0,     0,
       0,     0,    27,     0,     0,     0,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,   483,     0,     0,     0,     0,  1089,     0,     0,
       0,     0,     0,     0,    48,   762,    49,     0,   766,   498,
     499,  1438,     0,     0,     0,  1439,   506,     0,  1440,   212,
     213,     0,     0,    55,     0,     0,  1508,     0,     0,     0,
     214,     0,     0,     0,   582,     0,     0,     0,     0,     0,
       0,     0,   505,   505,   505,     0,     0,     0,  1441,     0,
     790,  1442,  1443,  1444,     0,     0,  1445,     0,  1446,    65,
    1517,  1518,  1447,     0,     0,     0,     0,   537,     0,     0,
       0,  1519,     0,   694,     0,     0,   183,     0,     0,  1508,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   817,
     818,   373,     0,     0,     0,   373,     0,     0,     0,   505,
       0,     0,     0,     0,     0,   831,  1096,     0,   834,   835,
    1594,   602,   839,     0,     0,     0,   842,   505,   505,   845,
     846,     0,     0,   850,     0,     0,   851,   270,     0,   111,
       0,     0,     0,   276,     0,   278,     0,   280,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,     0,     0,   202,     0,     0,
       0,   221,   222,   223,   224,   225,   306,   226,   227,   228,
     310,     0,   311,   312,     0,   373,     0,     0,   505,     0,
       0,   241,     0,     0,     0,   498,   505,     0,     0,   816,
     816,   816,     0,     0,     0,  1200,     0,   111,     0,     0,
     668,   262,  1524,  1525,  1526,  1527,  1528,     0,  1529,  1530,
    1531,     0,     0,     0,     0,   384,   385,   386,     0,  1652,
    1653,  1654,     0,  1655,     0,     0,     0,   207,   208,   209,
     210,   211,   212,   213,     0,   505,   373,     0,   505,   300,
       0,     0,     0,   214,     0,     0,     0,     0,     0,   995,
       0,     0,     0,     0,   355,     0,     0,     0,     0,  1001,
    1002,     0,   725,   726,   727,   728,     0,   731,     0,   505,
       0,     0,     0,   189,     0,  1449,   760,     0,  1020,     0,
       0,     0,     0,     0,     0,   505,   190,   191,     0,     0,
     319,   320,     0,     0,     0,     0,   816,     0,     0,     0,
       0,     0,     0,     0,   816,     0,     0,     0,     0,     0,
       0,     0,     0,   484,   780,     0,     0,     0,   347,     0,
       0,     0,     0,   111,     0,   387,   193,     0,   194,     0,
       0,     0,     0,   195,     0,   196,     0,   357,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     389,   391,     0,     0,     0,   812,     0,     0,     0,     0,
       0,  1071,   382,     0,  1074,  1075,     0,  1078,     0,   111,
     537,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,  1099,     0,     0,     0,  1144,  1145,     0,
       0,     0,     0,  1154,     0,   486,   487,     0,  1155,     0,
       0,   491,     0,     0,     0,     0,  1161,   209,   210,   211,
     212,   213,     0,   202,     0,     0,     0,   869,     0,     0,
       0,   214,     0,     0,     0,     0,     0,     0,   874,   875,
     876,   877,   878,   879,   880,   881,   882,   883,   884,   885,
     886,   887,   888,   889,   890,   891,   892,   893,   894,  1448,
       0,   898,  1512,  1513,  1514,  1515,  1516,  1517,  1518,     0,
       0,     0,     0,     0,     0,     0,     0,   539,  1519,     0,
       0,     0,  1216,     0,     0,  1217,  1218,     0,   645,     0,
     646,     0,   647,     0,     0,   262,     0,     0,     0,  1231,
     584,     0,     0,   962,     0,  1449,     0,  1449,  1449,  1449,
    1449,  1449,     0,  1449,     0,     0,  1510,  1511,  1512,  1513,
    1514,  1515,  1516,  1517,  1518,     0,     0,  1385,     0,     0,
       0,     0,     0,     0,  1519,     0,     0,     0,     0,     0,
     537,   631,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   537,     0,     0,     0,     0,  1009,     0,     0,     0,
     219,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,  1390,     0,  1031,     0,     0,  1449,  1449,  1449,  1449,
    1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,
    1449,  1449,  1449,  1449,  1449,   729,     0,     0,  1407,     0,
       0,  1409,     0,   319,  1521,  1522,  1523,   761,     0,  1524,
    1525,  1526,  1527,  1528,   111,  1529,  1530,  1531,   671,     0,
       0,     0,     0,   111,   207,   208,   209,   210,   211,   212,
     213,     0,     0,   111,     0,     0,     0,  1449,     0,     0,
     214,     0,     0,     0,  1434,     0,     0,     0,     0,   262,
       0,     0,     0,     0,     0,     0,     0,  1625,     0,  1520,
    1521,  1522,  1523,     0,  1095,  1524,  1525,  1526,  1527,  1528,
       0,  1529,  1530,  1531,     0,     0,   384,   385,   386,  1500,
       0,  1502,  1503,  1504,  1505,  1506,     0,  1509,  1449,   763,
     765,  1449,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   771,     0,   772,
     773,   774,   775,   776,   777,     0,     0,   779,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1031,   787,   788,     0,   189,  1193,     0,   860,   861,   862,
     796,   864,     0,   866,   541,   867,   868,   190,   191,     0,
    1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
     537,     0,     0,     0,     0,     0,   387,   193,    73,   194,
      74,    75,    76,    77,   195,  1095,   196,     0,   841,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1470,     0,     0,     0,
     388,     0,    84,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     7,     8,     9,    10,   237,
      11,    12,    13,    14,     0,     0,     0,   157,     0,     0,
    1394,     0,   537,     0,  1397,     0,     0,     0,   895,     0,
      86,    87,     0,     0,     0,  1644,     0,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,    92,     0,     0,
    1533,     0,    94,    15,  1537,   214,     0,    16,  1540,    17,
      18,    19,    20,  1514,  1515,  1516,  1517,  1518,    21,     0,
       0,  1548,    22,    23,  1550,  1551,  1552,  1519,     0,     0,
       0,     0,    24,    25,    26,   982,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
       0,     0,     0,     0,     0,     0,     0,    46,     0,    47,
      48,     0,    49,     0,     0,     0,  1063,    50,     0,    51,
      52,    53,     0,     0,    54,     0,     0,  1026,     0,    55,
    1601,     0,    56,     0,     0,     0,    57,     0,     0,     0,
       0,    58,  1609,  1610,   206,   207,   208,   209,   210,   211,
     212,   213,     0,     0,    59,     0,     0,    60,    61,    62,
       0,   214,    63,     0,   158,    65,     0,     0,    66,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,     0,  1051,     0,   509,     0,
       0,     0,    73,  1632,    74,    75,    76,    77,  1524,  1525,
    1526,  1527,  1528,     0,  1529,  1530,  1531,   236,     0,     0,
       0,     0,     0,     0,     0,     0,  1084,  1645,     0,     0,
       0,     0,     0,     0,     0,     0,    84,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1657,     0,     0,     0,
       0,     0,     0,   237,     0,  1665,     0,  1468,     0,     0,
       0,     0,  1512,  1513,  1514,  1515,  1516,  1517,  1518,     0,
       0,     0,     0,     0,    86,    87,     0,     0,  1519,     0,
       0,     0,     0,     0,     0,  1180,     0,     0,     0,     0,
       0,    92,     0,     0,     0,     0,    94,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,  1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,
    1254,  1255,  1213,  1256,  1257,  1258,  1259,  1260,  1261,  1262,
    1263,  1264,  1265,  1266,  1267,     0,     0,     0,     0,     0,
    1095,     0,  1268,  1269,  1270,  1271,  1272,  1273,  1274,  1275,
    1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,
    1286,     0,     0,  1287,  1288,  1289,  1290,  1291,  1292,  1293,
    1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,  1302,  1303,
    1304,     0,  1305,     0,  1306,  1307,  1308,  1309,  1310,  1311,
    1312,  1313,  1314,  1315,     0,  1316,  1317,  1318,     0,     0,
       0,     0,     0,     0,  1595,     0,  1433,     0,     0,  1524,
    1525,  1526,  1527,  1528,  1319,  1529,  1530,  1531,     0,     0,
       0,  1320,  1321,  1322,  1323,  1324,  1325,  1326,  1327,  1328,
    1329,  1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,
    1339,  1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,
    1349,  1350,  1351,  1352,  1353,  1354,  1355,  1356,  1357,     0,
       0,     0,  1358,  1359,  1360,  1361,  1362,  1363,  1364,  1365,
    1366,  1367,  1368,  1369,  1370,  1371,  1372,  1373,  1374,  1375,
    1376,  1377,  1378,  1545,  1379,  1380,     0,     0,  1245,  1246,
    1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,     0,
    1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,  1265,
    1266,  1267,  1084,     0,     0,     0,     0,     0,     0,  1268,
    1269,  1270,  1271,  1272,  1273,  1274,  1275,  1276,  1277,  1278,
    1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,     0,     0,
    1287,  1288,  1289,  1290,  1291,  1292,  1293,  1294,  1295,  1296,
    1297,  1298,  1299,  1300,  1301,  1302,  1303,  1304,     0,  1305,
       0,  1306,  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,
    1315,     0,  1316,  1317,  1318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1319,     0,     0,     0,     0,     0,     0,  1320,  1321,
    1322,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
    1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
    1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1355,  1356,  1357,     0,     0,  1507,  1358,
    1359,  1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,
    1369,  1370,  1371,  1372,  1373,  1374,  1375,  1376,  1377,  1378,
       0,  1379,  1380,     0,     0,     7,     8,     9,    10,     0,
      11,    12,    13,   169,    71,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1564,  1565,  1566,  1567,
       0,  1569,     0,  1570,     0,     0,     0,     0,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,    15,    72,     0,   214,   170,     0,   171,
     172,   173,   174,    78,    79,     0,     0,     0,    21,    80,
       0,     0,   175,    23,     0,     0,    82,     0,     0,     0,
       0,     0,    24,    25,   176,     0,     0,     0,    27,     0,
       0,   177,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,   178,     0,
       0,     0,     0,     0,     0,     0,     0,    46,     0,    47,
      48,     0,    49,     0,     0,     0,     0,    50,     0,   179,
     180,    53,     0,     0,    54,    88,     0,     0,     0,    55,
       0,  1592,    56,    89,    90,    91,   181,     0,     0,    93,
       0,   182,     7,     8,     9,    10,     0,    11,    12,    13,
     395,     0,     0,     0,    59,     0,     0,    60,    61,    62,
       0,     0,    63,     0,    64,    65,     0,     0,    66,     0,
    1621,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,     0,     0,     0,  1034,
      15,   396,     0,     0,   170,     0,   171,   172,   173,   174,
      78,     0,     0,     0,     0,    21,   397,     0,     0,   175,
      23,     0,     0,    82,     0,     0,     0,     0,     0,    24,
      25,   176,     0,     0,     0,    27,     0,     0,   177,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,   178,     0,     0,     0,     0,
       0,     0,     0,     0,    46,     0,    47,    48,     0,    49,
       0,     0,     0,     0,    50,     0,   179,   180,    53,     0,
       0,    54,    88,     0,     0,     0,    55,     0,     0,    56,
     398,   399,    91,   181,     0,     0,    93,     0,   182,     7,
       8,     9,    10,     0,    11,    12,    13,    14,     0,     0,
       0,    59,     0,     0,    60,    61,    62,     0,     0,    63,
       0,    64,    65,     0,     0,    66,     0,     0,     0,     0,
     205,   206,   207,   208,   209,   210,   211,   212,   213,     0,
       0,     0,     0,     0,     0,     0,     0,    15,   214,     0,
       0,    16,     0,    17,    18,    19,    20,     0,     0,     0,
       0,     0,    21,     0,   959,   960,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,    26,     0,
       0,     0,    27,     0,     0,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,    47,    48,     0,    49,     0,     0,     0,
       0,    50,     0,    51,    52,    53,     0,     0,    54,     0,
       0,     0,     0,    55,     0,     0,    56,     0,     0,     0,
      57,     7,     8,     9,    10,    58,    11,    12,    13,    14,
     961,     0,     0,     0,     0,     0,     0,     0,    59,     0,
       0,    60,    61,    62,     0,     0,    63,     0,    64,    65,
       0,     0,    66,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,     0,   226,   227,   228,     0,    15,
       0,  1627,     0,    16,     0,    17,    18,    19,    20,     0,
       0,     0,     0,     0,    21,     0,     0,     0,    22,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
      26,     0,     0,     0,    27,     0,     0,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,    47,    48,     0,    49,     0,
       0,     0,     0,    50,     0,    51,    52,    53,     0,     0,
      54,     0,     0,     0,     0,    55,     0,     0,    56,     0,
       0,     0,    57,     7,     8,     9,    10,    58,    11,    12,
      13,    14,     0,     0,     0,     0,     0,     0,     0,     0,
      59,     0,     0,    60,    61,    62,     0,     0,    63,     0,
      64,    65,   348,     0,    66,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
       0,    15,   353,   214,     0,    16,     0,    17,    18,    19,
      20,     0,     0,     0,     0,     0,    21,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    25,    26,     0,     0,     0,    27,     0,     0,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,     0,     0,     0,
       0,     0,     0,     0,     0,    46,     0,    47,    48,     0,
      49,     0,     0,     0,     0,    50,     0,    51,    52,    53,
       0,     0,    54,     0,     0,     0,     0,    55,     0,     0,
      56,     0,     0,     0,    57,     7,     8,     9,    10,    58,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    59,     0,     0,    60,    61,    62,     0,     0,
      63,     0,    64,    65,     0,  1097,    66,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,    15,   759,     0,     0,    16,     0,    17,
      18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
       0,     0,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
       0,    73,     0,    74,    75,    76,    77,    46,     0,    47,
      48,     0,    49,     0,     0,     0,   236,    50,     0,    51,
      52,    53,     0,     0,    54,     0,     0,     0,     0,    55,
       0,     0,    56,     0,     0,    84,    57,     7,     8,     9,
      10,    58,    11,    12,    13,    14,     0,     0,     0,     0,
       0,     0,   237,     0,    59,     0,     0,    60,    61,    62,
       0,     0,    63,     0,    64,    65,     0,     0,    66,     0,
       0,     0,     0,    86,    87,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    15,     0,     0,     0,    16,
      92,    17,    18,    19,    20,    94,     0,     0,     0,     0,
      21,     0,     0,     0,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,    26,     0,   143,     0,
      27,     0,     0,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,    47,    48,     0,    49,     0,     0,     0,     0,    50,
       0,    51,    52,    53,     0,     0,    54,     0,     0,     0,
       0,    55,     0,     0,    56,     0,     0,     0,    57,     7,
       8,     9,    10,    58,    11,    12,    13,    14,     0,     0,
       0,     0,     0,     0,     0,     0,    59,     0,     0,    60,
      61,    62,     0,     0,    63,     0,    64,    65,   896,     0,
      66,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,     0,    15,     0,   214,
       0,    16,     0,    17,    18,    19,    20,     0,     0,     0,
       0,     0,    21,     0,     0,     0,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,    26,     0,
       0,     0,    27,     0,     0,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,    47,    48,     0,    49,     0,     0,     0,
       0,    50,     0,    51,    52,    53,     0,     0,    54,     0,
       0,     0,     0,    55,     0,     0,    56,     0,     0,     0,
      57,     7,     8,     9,    10,    58,    11,    12,    13,    14,
    1092,     0,     0,     0,     0,     0,     0,     0,    59,     0,
       0,    60,    61,    62,     0,     0,    63,     0,    64,    65,
    1173,     0,    66,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,    15,
       0,     0,     0,    16,     0,    17,    18,    19,    20,     0,
       0,     0,     0,     0,    21,     0,     0,     0,    22,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
      26,     0,     0,     0,    27,     0,     0,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,    47,    48,     0,    49,     0,
       0,     0,     0,    50,     0,    51,    52,    53,     0,     0,
      54,     0,     0,     0,     0,    55,     0,     0,    56,     0,
       0,     0,    57,     7,     8,     9,    10,    58,    11,    12,
      13,    14,  1467,     0,     0,     0,     0,     0,     0,     0,
      59,     0,     0,    60,    61,    62,     0,     0,    63,     0,
      64,    65,     0,     0,    66,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
       0,    15,     0,   214,     0,    16,     0,    17,    18,    19,
      20,     0,     0,     0,     0,     0,    21,     0,     0,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    25,    26,     0,     0,     0,    27,     0,     0,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,     0,     0,     0,
       0,     0,     0,     0,     0,    46,     0,    47,    48,     0,
      49,     0,     0,     0,     0,    50,     0,    51,    52,    53,
       0,     0,    54,     0,     0,     0,     0,    55,     0,     0,
      56,     0,     0,     0,    57,     7,     8,     9,    10,    58,
      11,    12,    13,    14,     0,     0,     0,     0,     0,     0,
       0,     0,    59,     0,     0,    60,    61,    62,     0,     0,
      63,     0,    64,    65,  1593,     0,    66,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,    15,     0,     0,     0,    16,     0,    17,
      18,    19,    20,     0,     0,     0,     0,     0,    21,     0,
       0,     0,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,    26,     0,     0,     0,    27,     0,
       0,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
       0,     0,     0,     0,     0,     0,     0,    46,     0,    47,
      48,     0,    49,     0,     0,     0,     0,    50,     0,    51,
      52,    53,     0,     0,    54,     0,     0,     0,     0,    55,
       0,     0,    56,     0,     0,     0,    57,     7,     8,     9,
      10,    58,    11,    12,    13,    14,     0,     0,     0,     0,
       0,     0,     0,     0,    59,     0,     0,    60,    61,    62,
       0,     0,    63,     0,    64,    65,     0,     0,    66,   735,
     736,   737,   738,   739,   740,   741,   742,   743,     0,     0,
       0,     0,     0,     0,     0,    15,     0,   744,     0,    16,
       0,    17,    18,    19,    20,     0,     0,     0,     0,     0,
      21,     0,     0,     0,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,    26,     0,     0,     0,
      27,     0,     0,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,     0,     0,     0,     0,     0,     0,     0,     0,    46,
       0,    47,    48,     0,    49,     0,     0,     0,     0,    50,
       0,    51,    52,    53,     0,     0,    54,     0,     0,     0,
       0,    55,     0,     0,    56,     0,     0,     0,    57,     7,
       8,     9,    10,    58,    11,    12,    13,     0,     0,     0,
       0,  1498,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    63,     0,    64,    65,     0,     0,
      66,     0,   745,   746,   747,   748,   749,   750,   751,   752,
     753,   754,   755,     0,   756,   757,   758,  1435,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1436,     0,   186,   187,   188,  1437,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,     0,     0,
       0,     0,    27,     0,     0,     0,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,     7,     8,     9,    10,     0,    11,    12,    13,
       0,     0,     0,     0,    48,     0,    49,     0,     0,     0,
       0,  1438,   189,     0,     0,  1439,     0,     0,  1440,     0,
       0,     0,     0,    55,     0,   190,   191,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1435,     0,     0,     0,     0,     0,     0,     0,  1441,     0,
       0,  1442,  1443,  1444,     0,  1436,  1445,     0,  1499,    65,
    1437,     0,  1447,     0,   192,   193,     0,   194,     0,    24,
      25,     0,   195,     0,   196,    27,     0,     0,     0,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,   186,   187,   188,   770,     0,
       0,     0,     0,     0,     0,     0,     0,    48,     0,    49,
     550,   551,   552,    10,  1438,    11,   553,   554,  1439,     0,
       0,  1440,   555,     0,     0,     0,    55,     0,     0,     0,
       0,     0,     0,     0,   550,   551,   552,    10,     0,    11,
     553,   554,     0,     0,     0,     0,   872,     0,     0,     0,
       0,     0,     0,   189,     0,   109,     0,   110,   556,  1445,
       0,  1446,    65,     0,     0,  1447,   190,   191,     0,     0,
       0,     0,     0,   557,     0,     0,     0,     0,   558,   109,
       0,   110,   556,     0,     0,     0,     0,   559,   560,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,   558,     0,     0,   192,  1010,  1011,  1012,     0,
       0,   559,   560,   195,     0,   196,    73,     0,    74,    75,
      76,    77,   561,     0,     0,   562,  1013,   563,     0,     0,
       0,  1014,   564,     0,     0,     0,   565,     0,     0,   566,
       0,     0,     0,     0,   567,     0,   561,   568,     0,   562,
      84,   563,   550,   551,   552,    10,   564,    11,   553,   554,
     565,     0,     0,   566,   720,     0,     0,   237,   567,   569,
       0,   568,   570,   571,     0,     0,     0,   572,     0,   573,
       0,     0,     0,   574,     0,     0,     0,     0,    86,    87,
       0,     0,     0,   569,     0,     0,   570,   571,     0,     0,
     556,   572,     0,   573,     0,    92,     0,   574,     0,     0,
      94,     0,     0,     0,     0,   557,     0,     0,     0,     0,
     558,  1101,     0,     0,     0,     0,     0,     0,     0,   559,
     560,  1102,  1103,  1104,  1105,  1106,  1107,  1108,  1109,  1110,
       0,     0,     0,     0,     0,   186,   187,   188,     0,  1111,
       0,  1112,  1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,
    1121,  1122,  1123,     0,   561,     0,     0,   562,     0,   563,
       0,     0,     0,     0,   564,     0,     0,     0,   565,     0,
       0,   566,     0,     0,  1124,     0,   567,     0,     0,   568,
     634,   635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   189,     0,     0,     0,     0,     0,   629,
       0,   569,     0,     0,   570,   571,   190,   191,     0,   572,
       0,   721,     0,     0,     0,   574,     0,     0,     0,     0,
    1125,     0,   396,     0,     0,    73,     0,    74,    75,    76,
      77,    78,     0,     0,     0,     0,     0,   397,     0,   630,
      81,     0,     0,     0,    82,   192,   193,     0,   194,   186,
     187,   188,    83,   195,     0,   196,     0,     0,     0,    84,
    1126,     0,     0,  1127,     0,  1128,  1129,  1130,  1131,  1132,
    1133,  1134,  1135,  1136,  1137,  1138,    85,  1139,  1140,     0,
       0,  1141,     0,     0,   634,   635,     0,     0,     0,   636,
       0,     0,     0,   186,   187,   188,     0,    86,    87,     0,
       0,     0,     0,    88,     0,     0,     0,   189,     0,     0,
       0,   398,   399,    91,    92,     0,     0,    93,     0,    94,
     190,   191,     0,     0,   637,     0,   396,     0,     0,    73,
       0,    74,    75,    76,    77,    78,     0,     0,     0,     0,
     638,   397,     0,     0,    81,     0,     0,     0,    82,     0,
       0,   189,     0,     0,     0,     0,    83,     0,     0,   192,
     193,     0,   194,    84,   190,   191,     0,   195,     0,   196,
       0,   186,   187,   188,     0,     0,     0,   782,   783,     0,
      85,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,   636,     0,     0,     0,     0,     0,     0,
       0,    86,    87,   192,   193,     0,   194,    88,     0,     0,
       0,   195,     0,   196,     0,   398,   399,    91,    92,   396,
       0,    93,    73,    94,    74,    75,    76,    77,    78,   189,
       0,     0,     0,     0,   397,     0,     0,    81,     0,     0,
       0,    82,   190,   191,   638,     0,     0,     0,     0,    83,
       0,     0,     0,     0,     0,     0,    84,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,     0,    85,     0,   214,     0,     0,     0,     0,
       0,   192,   193,     0,   194,     0,   636,     0,     0,   195,
       0,   196,     0,     0,    86,    87,     0,     0,     0,     0,
      88,     0,  1013,     0,     0,     0,     0,  1174,   398,   399,
      91,    92,     0,     0,    93,     0,    94,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   214,     0,   638,   205,   206,
     207,   208,   209,   210,   211,   212,   213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   214,   205,   206,   207,
     208,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   214,   205,   206,   207,   208,
     209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   214,     0,   914,     0,     0,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   915,   205,   206,   207,   208,
     209,   210,   211,   212,   213,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   214,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   214,     0,     0,     0,     0,     0,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   305,     0,     0,     0,     0,
       0,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   495,     0,     0,     0,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,     0,   226,   227,   228,   511,     0,     0,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   589,   205,   206,   207,   208,   209,
     210,   211,   212,   213,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   214,     0,     0,     0,     0,     0,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
       0,   226,   227,   228,   648,     0,     0,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   768,   205,   206,   207,   208,   209,   210,
     211,   212,   213,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   214,   205,   206,   207,   208,   209,   210,   211,
     212,   213,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   214,   205,   206,   207,   208,   209,   210,   211,   212,
     213,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     214,   205,   206,   207,   208,   209,   210,   211,   212,   213,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   214,
       0,     0,     0,     0,     0,     0,     0,     0,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,     0,
     226,   227,   228,   900,  1510,  1511,  1512,  1513,  1514,  1515,
    1516,  1517,  1518,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1519,  1511,  1512,  1513,  1514,  1515,  1516,  1517,
    1518,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1519,     0,     0,     0,     0,     0,     0,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,     0,   226,
     227,   228,   980,     0,     0,     0,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,     0,   226,   227,
     228,  1030,     0,   507,     0,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,     0,   226,   227,   228,
       0,     0,  1032,     0,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,     0,   226,   227,   228,   207,
     208,   209,   210,   211,   212,   213,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   214,   207,   208,   209,   210,
     211,   212,   213,     0,     0,     0,     0,  1520,  1521,  1522,
    1523,     0,   214,  1524,  1525,  1526,  1527,  1528,     0,  1529,
    1530,  1531,     0,     0,     0,     0,  1521,  1522,  1523,     0,
     598,  1524,  1525,  1526,  1527,  1528,     0,  1529,  1530,  1531,
    1512,  1513,  1514,  1515,  1516,  1517,  1518,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1519,  1512,  1513,  1514,
    1515,  1516,  1517,  1518,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1519,     0,     0,     0,     0,   409,     0,
      73,     0,    74,    75,    76,    77,   410,   411,   412,   413,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   591,     0,    84,     0,     0,     0,     0,     0,
       0,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   237,   226,   227,   228,     0,     0,   428,     0,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   433,   226,
     227,   228,    86,    87,   434,     0,     0,     0,   436,   437,
       0,   598,     0,     0,     0,     0,     0,     0,     0,    92,
     440,     0,   441,     0,    94,     0,   916,   917,   918,     0,
       0,     0,     0,  1522,  1523,     0,     0,  1524,  1525,  1526,
    1527,  1528,     0,  1529,  1530,  1531,     0,   155,     0,     0,
       0,  1523,     0,     0,  1524,  1525,  1526,  1527,  1528,   409,
    1529,  1530,  1531,     0,     0,     0,     0,   410,   411,   412,
     413,    73,     0,    74,    75,    76,    77,   919,   920,     0,
     415,   590,   417,   418,     0,     0,    81,     0,     0,   916,
     917,   918,     0,   591,     0,     0,     0,     0,    83,     0,
       0,     0,     0,     0,     0,    84,     0,     0,    73,     0,
      74,    75,    76,    77,     0,     0,     0,     0,   428,     0,
       0,     0,    85,    70,    71,     0,     0,     0,     0,   433,
       0,     0,     0,     0,    73,   434,    74,    75,    76,    77,
     437,     0,    84,    86,    87,     0,     0,     0,     0,    81,
       0,   440,     0,   441,     0,     0,     0,   921,     0,   237,
      92,    83,     0,    93,    72,    94,     0,    73,    84,    74,
      75,    76,    77,    78,   529,     0,     0,     0,     0,    80,
      86,    87,    81,     0,     0,    85,    82,     0,     0,     0,
       0,     0,     0,     0,    83,     0,     0,    92,     0,     0,
       0,    84,    94,     0,     0,     0,    86,    87,     0,     0,
       0,     0,     0,     0,     0,     0,    70,    71,    85,     0,
       0,     0,     0,    92,     0,   156,    93,     0,    94,     0,
       0,     0,     0,     0,     0,     0,   530,     0,     0,    86,
      87,     0,    70,    71,     0,    88,     0,     0,     0,     0,
       0,     0,     0,    89,    90,    91,    92,    72,     0,    93,
      73,    94,    74,    75,    76,    77,    78,    79,     0,     0,
       0,     0,    80,     0,     0,    81,     0,     0,     0,    82,
       0,     0,     0,    72,     0,     0,    73,    83,    74,    75,
      76,    77,    78,     0,    84,     0,     0,     0,    80,     0,
       0,    81,     0,     0,     0,    82,     0,     0,     0,     0,
       0,    85,     0,    83,     0,     0,     0,     0,     0,     0,
      84,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    86,    87,     0,    70,    71,    85,    88,     0,
       0,     0,     0,     0,     0,     0,    89,    90,    91,    92,
       0,     0,    93,     0,    94,   681,     0,     0,    86,    87,
       0,    70,     0,     0,    88,     0,     0,     0,     0,     0,
       0,     0,    89,    90,    91,    92,    72,     0,    93,    73,
      94,    74,    75,    76,    77,    78,     0,     0,     0,     0,
       0,    80,     0,     0,    81,     0,     0,     0,    82,     0,
       0,     0,    72,     0,     0,    73,    83,    74,    75,    76,
      77,    78,   793,    84,     0,     0,     0,    80,     0,     0,
      81,     0,     0,     0,    82,     0,     0,     0,     0,     0,
      85,     0,    83,     0,     0,     0,     0,     0,     0,    84,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    86,    87,     0,   144,     0,    85,    88,     0,     0,
       0,     0,     0,     0,     0,    89,    90,    91,    92,     0,
       0,    93,     0,    94,     0,     0,     0,    86,    87,     0,
     144,     0,     0,    88,     0,     0,     0,     0,     0,     0,
       0,    89,    90,    91,    92,   145,     0,    93,    73,    94,
      74,    75,    76,    77,    78,   983,     0,     0,     0,     0,
     146,     0,     0,    81,     0,     0,     0,    82,     0,     0,
       0,   145,     0,     0,    73,    83,    74,    75,    76,    77,
      78,     0,    84,     0,     0,     0,   146,     0,     0,    81,
       0,     0,     0,    82,     0,     0,     0,     0,     0,    85,
       0,    83,     0,     0,     0,     0,     0,     0,    84,     0,
       0,     0,     0,     0,     0,     0,   186,   187,   188,     0,
      86,    87,     0,    70,     0,    85,    88,     0,     0,     0,
       0,   186,   187,   188,   147,   148,    91,    92,     0,     0,
      93,     0,    94,     0,     0,     0,    86,    87,     0,     0,
       0,     0,    88,   186,   187,   188,     0,     0,     0,     0,
     147,   148,    91,    92,    72,     0,    93,    73,    94,    74,
      75,    76,    77,    78,   189,     0,     0,     0,     0,    80,
       0,     0,    81,     0,     0,     0,    82,   190,   191,   189,
       0,     0,     0,     0,    83,     0,     0,     0,     0,     0,
       0,    84,   190,   191,     0,     0,     0,   186,   187,   188,
       0,   189,  1050,     0,     0,     0,     0,     0,    85,     0,
       0,     0,     0,     0,   190,   191,   192,   193,     0,   194,
       0,     0,     0,     0,   195,     0,   196,     0,     0,    86,
      87,   192,   193,     0,   194,    88,     0,  1013,     0,   195,
       0,   196,  1176,    89,    90,    91,    92,     0,     0,    93,
       0,    94,  1013,   192,   193,   189,   194,  1178,     0,     0,
       0,   195,    73,   196,    74,    75,    76,    77,   190,   191,
       0,   409,     0,     0,  1013,     0,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   415,   590,   417,   418,    84,     0,     0,     0,
     420,     0,     0,     0,     0,   591,     0,   192,   193,     0,
     194,     0,     0,   237,     0,   195,     0,   196,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     428,     0,     0,     0,    86,    87,     0,     0,     0,     0,
       0,   433,     0,     0,     0,     0,     0,   434,   408,   409,
       0,    92,   437,     0,     0,     0,    94,   410,   411,   412,
     413,     0,   439,   440,     0,   441,     0,     0,   414,     0,
     415,   416,   417,   418,   419,     0,     0,     0,   420,   162,
    -161,     0,     0,   421,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   422,   423,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,     0,     0,   434,   435,   409,     0,   436,
     437,     0,     0,     0,   438,   410,   411,   412,   413,     0,
     439,   440,     0,   441,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,   409,     0,   420,     0,   409,     0,
       0,   591,   410,   411,   412,   413,   410,   411,   412,   413,
       0,     0,     0,     0,     0,   415,   590,   417,   418,   415,
     590,   417,   418,     0,     0,     0,   428,     0,   591,     0,
       0,     0,   591,     0,     0,     0,     0,   433,     0,     0,
       0,     0,     0,   434,     0,     0,     0,   436,   437,     0,
       0,     0,     0,   428,   605,     0,     0,   428,   439,   440,
       0,   441,     0,     0,   433,     0,     0,     0,   433,     0,
     434,     0,     0,     0,   434,   437,     0,     0,     0,   437,
       0,     0,     0,     0,     0,     0,   440,     0,   441,     0,
     440,     0,   441
};

static const yytype_int16 yycheck[] =
{
       1,    96,   503,   394,    64,   850,   416,   436,   394,   436,
     114,   263,   116,   117,   118,   119,   120,  1092,   122,    46,
     124,    79,   126,   263,    46,    79,   561,    46,   931,   952,
     544,   263,   502,    15,   257,   258,   533,    34,   263,   143,
       6,   155,     8,   940,    15,   784,   943,   944,    13,   393,
     531,   155,   156,   158,   155,    15,    15,   677,   162,   163,
     158,     0,   985,   177,    65,   154,   158,    10,   173,    61,
      13,    15,   532,   174,   155,   173,   938,    85,    86,    87,
      48,   173,    50,   172,    92,  1010,  1011,  1012,    48,   154,
      50,   155,    81,   174,    95,    96,   173,   174,   158,    48,
      48,    50,    50,   965,    48,   967,    50,   172,   970,    48,
     174,    50,   113,   114,   163,   116,   117,   118,   119,   120,
       6,   122,     8,   124,    15,   126,    17,   972,    10,    11,
      12,    13,    48,    15,    50,    17,   231,   232,    48,   530,
      50,   133,   143,     0,   535,    48,    48,    50,    50,    10,
      11,    12,   247,   248,   155,   156,   545,    48,   172,    50,
     157,   162,   163,   172,    48,   154,    50,   227,   157,    34,
     178,   179,   180,   181,  1071,   172,   173,  1074,  1075,   565,
      62,   247,   248,     6,   155,     8,   154,   409,   410,   411,
     412,   413,   174,   415,   416,   417,   155,   172,   302,   421,
     201,   682,   167,   547,  1066,   445,   428,   688,   174,   172,
     691,   433,   434,   445,   436,   437,   438,   837,   440,   441,
     445,   172,   692,   683,   167,   614,   175,   175,   848,   237,
     231,   232,   155,   703,   973,   158,   263,  1099,   120,   699,
     156,   263,   702,    48,   263,    50,   247,   248,   172,  1174,
     251,  1176,    81,  1178,    81,   256,  1181,  1182,  1183,   120,
     173,   174,    34,    81,   265,   175,   148,    10,    11,    12,
      13,   162,   175,   175,    17,   155,   167,   173,   174,   814,
     162,   155,  1144,  1145,   154,   167,   156,   157,   158,   172,
     172,   175,   358,    48,   174,    50,   157,   363,   364,   155,
     174,   302,   167,   168,   169,    34,   171,   172,   173,   163,
    1155,   369,    34,   155,   811,   369,  1239,   172,   174,    62,
     172,   322,   155,  1062,   172,   154,   172,   154,   157,    13,
     157,    15,   174,    17,  1231,    34,   154,   173,   174,   157,
     172,   174,   155,   734,   172,   826,   172,   155,   734,   163,
     831,   172,   155,   834,   835,   172,   173,   358,   828,   829,
     155,   174,   363,   364,   587,   588,   174,   827,   590,   591,
     175,   174,   172,   374,   382,   627,   598,   120,    62,   174,
     172,   770,   842,   623,   155,   845,   846,   627,   902,   173,
     174,   623,  1467,   394,   155,   627,    68,    69,   623,   171,
     172,   173,   627,   174,   172,   148,   795,   172,   409,   410,
     411,   412,   413,   174,   415,   416,   417,   163,   445,   162,
     421,   172,   155,   445,   167,   172,   445,   428,   172,   172,
     172,   173,   433,   434,   935,   436,   437,   438,   939,   440,
     441,   174,   171,   172,   173,   926,   155,   513,   983,   171,
     172,   173,   518,   519,   121,   122,   123,  1077,   155,   172,
     526,   527,   528,   155,   148,   174,   926,   155,   167,   168,
     169,   529,   171,   172,   173,   529,   172,   174,   162,   155,
     155,   155,   174,   167,   154,   155,   174,   988,   989,   990,
     154,    13,   156,    15,   158,    17,   156,   155,   174,   174,
     174,   502,   503,   973,    10,    11,    12,   172,    10,    11,
      12,    13,   513,   573,   995,    17,   174,   518,   519,   155,
     172,   991,   992,  1385,   155,   526,   527,   528,   914,  1149,
     531,   154,   533,   156,   561,   158,   544,   172,   174,   561,
      62,  1001,   561,   174,   545,   546,   768,  1450,   172,   172,
      13,  1474,    15,   154,    17,   156,   172,   158,   172,   154,
      62,   156,    68,   158,   172,   173,  1047,   172,   151,   152,
     153,   794,   172,   172,  1055,    81,    82,  1058,   172,  1080,
     803,   154,   636,   643,   644,   172,   172,  1047,   167,   590,
     591,   651,  1062,   653,   172,  1055,   623,   598,  1058,    62,
     627,   623,   172,   604,   623,   627,   672,   172,   627,   675,
     676,   174,   158,   614,   120,   121,   173,   123,   120,  1048,
     173,  1048,   128,   681,   130,    49,   148,   681,   155,  1018,
     172,   173,   174,   172,   173,   174,   172,   175,  1048,   155,
     162,   174,    10,    11,    12,   167,   148,   164,  1037,   174,
     172,   172,   173,   174,   174,  1044,   174,    22,    23,    24,
     162,   721,   174,   174,   174,   167,   667,  1168,   174,    34,
    1171,   672,   164,   174,   675,   676,   677,   174,   174,   174,
     174,   682,   155,   174,   155,   148,   687,   688,   174,   174,
     691,   692,   174,   174,   174,   174,   174,   757,   174,   162,
      68,    15,   703,   164,   167,  1550,  1551,  1552,   931,   172,
     174,   712,   174,    81,    82,   938,   174,   940,   174,    17,
     943,   944,    10,    11,    12,    13,   174,   174,  1225,    17,
     174,   164,  1229,   174,  1235,  1216,  1217,  1218,   174,   793,
     174,   172,   965,   175,   967,   174,   174,   970,   174,   174,
     157,   817,   120,   121,   781,   123,  1216,  1217,  1218,   863,
     128,   157,   130,   172,    62,    34,    64,   768,   172,   770,
     157,   174,   172,   172,    62,   172,   157,   172,   172,   172,
     781,   157,   157,    81,     5,   174,   172,   814,   172,   172,
     172,    81,   814,   794,   795,   814,   174,   174,   172,   172,
     165,   166,   167,   168,   169,   173,   171,   172,   173,   173,
     811,   167,  1657,   173,   177,   113,   817,   163,   116,   117,
    1665,   163,   120,   163,   163,   826,  1048,   828,   829,   172,
     831,   119,   120,   834,   835,   163,   837,   174,   136,   174,
     172,   156,    34,  1066,   174,   174,   172,   848,  1071,   850,
     148,  1074,  1075,   174,   174,    10,    11,    12,   167,   167,
     148,   154,   863,   157,   162,    49,   172,   172,   157,   154,
     174,   174,   174,   155,   162,   155,  1099,   155,   155,   167,
     155,   102,   103,   155,   172,   172,   154,   158,   172,   984,
     156,   156,   154,   920,   902,   155,   165,   166,   167,   168,
     169,   177,   171,   172,   173,   172,  1403,  1404,  1405,   172,
     154,   172,   164,    68,   173,   173,   173,   164,   174,   164,
     174,  1144,  1145,   164,   174,   926,    81,    82,    10,   150,
     151,    10,    10,    10,   935,    10,    10,   156,   939,   940,
     164,   155,   943,   944,   174,   167,   175,   167,   156,   156,
     167,  1452,   177,  1434,   172,  1456,   983,   958,    15,   172,
     961,   983,   177,  1460,   983,   120,   121,   172,   123,   172,
     174,   972,   973,   128,  1434,   130,   172,   174,   172,   155,
     155,  1478,  1479,   984,   155,   155,   155,   988,   989,   990,
     991,   992,   158,   167,   995,   156,   174,   174,   156,   172,
     156,   173,   155,   158,  1395,    10,   174,   162,  1231,  1395,
     175,   175,   167,   155,   177,   174,    10,  1018,   175,    10,
     174,   156,  1049,   174,   174,   246,    10,   174,   249,   250,
      10,    10,    10,   156,   155,  1536,  1037,   177,   172,  1040,
     177,   174,  1539,  1044,   175,   154,  1047,  1048,   174,   174,
    1547,   155,   174,  1054,  1055,     2,   156,  1058,  1059,   174,
     172,  1062,   163,  1158,   163,   163,   163,   172,   174,   156,
    1071,   156,   175,  1074,  1075,    10,  1077,    10,    17,  1080,
     175,    10,    11,    12,   174,   174,    10,   156,   156,    10,
     156,  1092,   172,   174,   155,    15,  1597,   155,   174,  1596,
      47,   174,  1599,   175,   175,   164,    53,   174,   164,    48,
     174,    50,    59,    60,    61,    62,    63,   164,   164,    66,
     174,   174,    10,    62,   174,    64,   156,  1187,  1188,    10,
    1190,    10,  1192,  1630,   156,   356,   357,  1241,  1242,    68,
     172,   172,    81,   172,   172,   366,   367,   368,  1149,  1646,
     174,   174,    81,    82,  1155,   156,    34,  1158,   174,   156,
      10,   156,  1385,   174,    22,    23,    24,  1168,   156,  1240,
    1171,   392,  1398,  1450,   113,  1398,    34,   116,   117,   920,
    1049,   120,   604,   404,   405,   627,  1556,  1395,  1206,   734,
     627,   120,   121,  1358,   123,  1019,   565,   136,    -1,   128,
      -1,   130,   321,    -1,    -1,  1206,    -1,    -1,   429,   148,
      -1,    -1,    -1,    -1,   161,  1216,  1217,  1218,    -1,    -1,
      -1,    -1,    -1,   162,  1225,    -1,    -1,  1450,  1229,    -1,
    1231,    -1,    -1,   162,  1235,    -1,    -1,    -1,   167,    -1,
    1241,  1242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    10,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   504,    -1,    -1,   233,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   517,    51,    -1,   520,
     521,    -1,    -1,    -1,    -1,    -1,    -1,   165,   166,   167,
     168,   169,    66,   171,   172,   173,   263,    71,   539,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   299,    -1,    -1,    -1,    -1,  1358,    -1,    -1,
      -1,    -1,    -1,    -1,   118,   586,   120,    -1,   589,   316,
     317,   125,    -1,    -1,    -1,   129,   323,    -1,   132,    23,
      24,    -1,    -1,   137,    -1,    -1,  1446,    -1,    -1,    -1,
      34,    -1,    -1,    -1,  1395,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1403,  1404,  1405,    -1,    -1,    -1,   162,    -1,
     631,   165,   166,   167,    -1,    -1,   170,    -1,   172,   173,
      23,    24,   176,    -1,    -1,    -1,    -1,   374,    -1,    -1,
      -1,    34,    -1,  1434,    -1,    -1,    64,    -1,    -1,  1499,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   670,
     671,  1452,    -1,    -1,    -1,  1456,    -1,    -1,    -1,  1460,
      -1,    -1,    -1,    -1,    -1,   686,  1467,    -1,   689,   690,
    1530,   418,   693,    -1,    -1,    -1,   697,  1478,  1479,   700,
     701,    -1,    -1,   704,    -1,    -1,   707,   115,    -1,   710,
      -1,    -1,    -1,   121,    -1,   123,    -1,   125,    -1,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,    -1,    -1,    65,    -1,    -1,
      -1,   165,   166,   167,   168,   169,   154,   171,   172,   173,
     158,    -1,   160,   161,    -1,  1536,    -1,    -1,  1539,    -1,
      -1,    89,    -1,    -1,    -1,   492,  1547,    -1,    -1,  1550,
    1551,  1552,    -1,    -1,    -1,  1556,    -1,   778,    -1,    -1,
     507,   109,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,  1639,
    1640,  1641,    -1,  1643,    -1,    -1,    -1,    18,    19,    20,
      21,    22,    23,    24,    -1,  1596,  1597,    -1,  1599,   147,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,   830,
      -1,    -1,    -1,    -1,   242,    -1,    -1,    -1,    -1,   840,
     841,    -1,   569,   570,   571,   572,    -1,   574,    -1,  1630,
      -1,    -1,    -1,    68,    -1,  1219,   583,    -1,   859,    -1,
      -1,    -1,    -1,    -1,    -1,  1646,    81,    82,    -1,    -1,
     198,   199,    -1,    -1,    -1,    -1,  1657,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1665,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   301,   621,    -1,    -1,    -1,   226,    -1,
      -1,    -1,    -1,   904,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,   245,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     258,   259,    -1,    -1,    -1,   662,    -1,    -1,    -1,    -1,
      -1,   942,   157,    -1,   945,   946,    -1,   948,    -1,   950,
     677,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,   964,    -1,    -1,    -1,   968,   969,    -1,
      -1,    -1,    -1,   974,    -1,   303,   304,    -1,   979,    -1,
      -1,   309,    -1,    -1,    -1,    -1,   987,    20,    21,    22,
      23,    24,    -1,   321,    -1,    -1,    -1,   724,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,   735,   736,
     737,   738,   739,   740,   741,   742,   743,   744,   745,   746,
     747,   748,   749,   750,   751,   752,   753,   754,   755,  1219,
      -1,   758,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,    34,    -1,
      -1,    -1,  1053,    -1,    -1,  1056,  1057,    -1,   466,    -1,
     468,    -1,   470,    -1,    -1,   393,    -1,    -1,    -1,  1070,
     398,    -1,    -1,   800,    -1,  1439,    -1,  1441,  1442,  1443,
    1444,  1445,    -1,  1447,    -1,    -1,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,  1098,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
     837,   439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   848,    -1,    -1,    -1,    -1,   853,    -1,    -1,    -1,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,  1142,    -1,   870,    -1,    -1,  1510,  1511,  1512,  1513,
    1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,   573,    -1,    -1,  1169,    -1,
      -1,  1172,    -1,   501,   160,   161,   162,   585,    -1,   165,
     166,   167,   168,   169,  1185,   171,   172,   173,   516,    -1,
      -1,    -1,    -1,  1194,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,  1204,    -1,    -1,    -1,  1571,    -1,    -1,
      34,    -1,    -1,    -1,  1215,    -1,    -1,    -1,    -1,   547,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,
     160,   161,   162,    -1,   961,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,    -1,    -1,    10,    11,    12,  1439,
      -1,  1441,  1442,  1443,  1444,  1445,    -1,  1447,  1622,   587,
     588,  1625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   605,    -1,   607,
     608,   609,   610,   611,   612,    -1,    -1,   615,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1027,   629,   630,    -1,    68,  1032,    -1,   715,   716,   717,
     638,   719,    -1,   721,    11,   723,   724,    81,    82,    -1,
    1510,  1511,  1512,  1513,  1514,  1515,  1516,  1517,  1518,  1519,
    1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1528,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
    1077,    -1,    -1,    -1,    -1,    -1,   120,   121,    55,   123,
      57,    58,    59,    60,   128,  1092,   130,    -1,   696,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1387,    -1,    -1,    -1,
     154,    -1,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,   106,
       8,     9,    10,    11,    -1,    -1,    -1,    15,    -1,    -1,
    1147,    -1,  1149,    -1,  1151,    -1,    -1,    -1,   756,    -1,
     127,   128,    -1,    -1,    -1,  1625,    -1,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,   144,    -1,    -1,
    1451,    -1,   149,    51,  1455,    34,    -1,    55,  1459,    57,
      58,    59,    60,    20,    21,    22,    23,    24,    66,    -1,
      -1,  1472,    70,    71,  1475,  1476,  1477,    34,    -1,    -1,
      -1,    -1,    80,    81,    82,   813,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,    -1,    -1,    -1,   934,   125,    -1,   127,
     128,   129,    -1,    -1,   132,    -1,    -1,   865,    -1,   137,
    1541,    -1,   140,    -1,    -1,    -1,   144,    -1,    -1,    -1,
      -1,   149,  1553,  1554,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,   162,    -1,    -1,   165,   166,   167,
      -1,    34,   170,    -1,   172,   173,    -1,    -1,   176,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,    -1,   924,    -1,   177,    -1,
      -1,    -1,    55,  1604,    57,    58,    59,    60,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,    70,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   954,  1628,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1647,    -1,    -1,    -1,
      -1,    -1,    -1,   106,    -1,  1656,    -1,  1384,    -1,    -1,
      -1,    -1,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,    -1,
      -1,   144,    -1,    -1,    -1,    -1,   149,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,  1050,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,    -1,
    1467,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    -1,    -1,
      -1,    -1,    -1,    -1,  1531,    -1,  1214,    -1,    -1,   165,
     166,   167,   168,   169,   106,   171,   172,   173,    -1,    -1,
      -1,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,    -1,
      -1,    -1,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,  1240,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,    -1,    -1,  1446,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
      -1,   176,   177,    -1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1494,  1495,  1496,  1497,
      -1,  1499,    -1,  1501,    -1,    -1,    -1,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    34,    55,    -1,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    66,    67,
      -1,    -1,    70,    71,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,    -1,    -1,   137,
      -1,  1529,   140,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,     3,     4,     5,     6,    -1,     8,     9,    10,
      11,    -1,    -1,    -1,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,   172,   173,    -1,    -1,   176,    -1,
    1568,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,    -1,    -1,    -1,   177,
      51,    52,    -1,    -1,    55,    -1,    57,    58,    59,    60,
      61,    -1,    -1,    -1,    -1,    66,    67,    -1,    -1,    70,
      71,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,   140,
     141,   142,   143,   144,    -1,    -1,   147,    -1,   149,     3,
       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    -1,
      -1,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
      -1,   172,   173,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    34,    -1,
      -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    68,    69,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,    -1,   127,   128,   129,    -1,    -1,   132,    -1,
      -1,    -1,    -1,   137,    -1,    -1,   140,    -1,    -1,    -1,
     144,     3,     4,     5,     6,   149,     8,     9,    10,    11,
     154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,   172,   173,
      -1,    -1,   176,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,    -1,   171,   172,   173,    -1,    51,
      -1,   177,    -1,    55,    -1,    57,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,
      82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,    -1,   127,   128,   129,    -1,    -1,
     132,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
      -1,    -1,   144,     3,     4,     5,     6,   149,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
     172,   173,   174,    -1,   176,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    52,    34,    -1,    55,    -1,    57,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
     140,    -1,    -1,    -1,   144,     3,     4,     5,     6,   149,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,   172,   173,    -1,   156,   176,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,    51,    52,    -1,    -1,    55,    -1,    57,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,    55,    -1,    57,    58,    59,    60,   115,    -1,   117,
     118,    -1,   120,    -1,    -1,    -1,    70,   125,    -1,   127,
     128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,
      -1,    -1,   140,    -1,    -1,    89,   144,     3,     4,     5,
       6,   149,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,   106,    -1,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,   172,   173,    -1,    -1,   176,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    55,
     144,    57,    58,    59,    60,   149,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    -1,   172,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
      -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,    -1,    -1,   144,     3,
       4,     5,     6,   149,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,    -1,   172,   173,   174,    -1,
     176,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    34,
      -1,    55,    -1,    57,    58,    59,    60,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    70,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,    -1,   127,   128,   129,    -1,    -1,   132,    -1,
      -1,    -1,    -1,   137,    -1,    -1,   140,    -1,    -1,    -1,
     144,     3,     4,     5,     6,   149,     8,     9,    10,    11,
     154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,    -1,   172,   173,
     155,    -1,   176,    -1,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,    51,
      -1,    -1,    -1,    55,    -1,    57,    58,    59,    60,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,
      82,    -1,    -1,    -1,    86,    -1,    -1,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,    -1,   127,   128,   129,    -1,    -1,
     132,    -1,    -1,    -1,    -1,   137,    -1,    -1,   140,    -1,
      -1,    -1,   144,     3,     4,     5,     6,   149,     8,     9,
      10,    11,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,    -1,
     172,   173,    -1,    -1,   176,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    34,    -1,    55,    -1,    57,    58,    59,
      60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      70,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    81,    82,    -1,    -1,    -1,    86,    -1,    -1,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,    -1,   127,   128,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
     140,    -1,    -1,    -1,   144,     3,     4,     5,     6,   149,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,    -1,   172,   173,   174,    -1,   176,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,    51,    -1,    -1,    -1,    55,    -1,    57,
      58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    81,    82,    -1,    -1,    -1,    86,    -1,
      -1,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,   127,
     128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,
      -1,    -1,   140,    -1,    -1,    -1,   144,     3,     4,     5,
       6,   149,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,    -1,   172,   173,    -1,    -1,   176,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    34,    -1,    55,
      -1,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    70,    71,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
      -1,   127,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,    -1,    -1,   144,     3,
       4,     5,     6,   149,     8,     9,    10,    -1,    -1,    -1,
      -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   170,    -1,   172,   173,    -1,    -1,
     176,    -1,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,    -1,   171,   172,   173,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    10,    11,    12,    71,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    -1,    -1,
      -1,    -1,    86,    -1,    -1,    -1,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,     3,     4,     5,     6,    -1,     8,     9,    10,
      -1,    -1,    -1,    -1,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,    68,    -1,    -1,   129,    -1,    -1,   132,    -1,
      -1,    -1,    -1,   137,    -1,    81,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,
      -1,   165,   166,   167,    -1,    66,   170,    -1,   172,   173,
      71,    -1,   176,    -1,   120,   121,    -1,   123,    -1,    80,
      81,    -1,   128,    -1,   130,    86,    -1,    -1,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,    10,    11,    12,   154,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,   120,
       3,     4,     5,     6,   125,     8,     9,    10,   129,    -1,
      -1,   132,    15,    -1,    -1,    -1,   137,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    10,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    48,    -1,    50,    51,   170,
      -1,   172,   173,    -1,    -1,   176,    81,    82,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    71,    48,
      -1,    50,    51,    -1,    -1,    -1,    -1,    80,    81,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    71,    -1,    -1,   120,   121,   122,   123,    -1,
      -1,    80,    81,   128,    -1,   130,    55,    -1,    57,    58,
      59,    60,   115,    -1,    -1,   118,   141,   120,    -1,    -1,
      -1,   146,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,
      -1,    -1,    -1,    -1,   137,    -1,   115,   140,    -1,   118,
      89,   120,     3,     4,     5,     6,   125,     8,     9,    10,
     129,    -1,    -1,   132,    15,    -1,    -1,   106,   137,   162,
      -1,   140,   165,   166,    -1,    -1,    -1,   170,    -1,   172,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   162,    -1,    -1,   165,   166,    -1,    -1,
      51,   170,    -1,   172,    -1,   144,    -1,   176,    -1,    -1,
     149,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      71,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,    34,
      -1,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,   115,    -1,    -1,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,   129,    -1,
      -1,   132,    -1,    -1,    69,    -1,   137,    -1,    -1,   140,
      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,
      -1,   162,    -1,    -1,   165,   166,    81,    82,    -1,   170,
      -1,   172,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
     115,    -1,    52,    -1,    -1,    55,    -1,    57,    58,    59,
      60,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,   114,
      70,    -1,    -1,    -1,    74,   120,   121,    -1,   123,    10,
      11,    12,    82,   128,    -1,   130,    -1,    -1,    -1,    89,
     155,    -1,    -1,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   106,   172,   173,    -1,
      -1,   176,    -1,    -1,    10,    11,    -1,    -1,    -1,   119,
      -1,    -1,    -1,    10,    11,    12,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    68,    -1,    -1,
      -1,   141,   142,   143,   144,    -1,    -1,   147,    -1,   149,
      81,    82,    -1,    -1,   154,    -1,    52,    -1,    -1,    55,
      -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
     170,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,
      -1,    68,    -1,    -1,    -1,    -1,    82,    -1,    -1,   120,
     121,    -1,   123,    89,    81,    82,    -1,   128,    -1,   130,
      -1,    10,    11,    12,    -1,    -1,    -1,    10,    11,    -1,
     106,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   127,   128,   120,   121,    -1,   123,   133,    -1,    -1,
      -1,   128,    -1,   130,    -1,   141,   142,   143,   144,    52,
      -1,   147,    55,   149,    57,    58,    59,    60,    61,    68,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
      -1,    74,    81,    82,   170,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    89,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,    -1,    34,    -1,    -1,    -1,    -1,
      -1,   120,   121,    -1,   123,    -1,   119,    -1,    -1,   128,
      -1,   130,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   141,    -1,    -1,    -1,    -1,   146,   141,   142,
     143,   144,    -1,    -1,   147,    -1,   149,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,   170,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,    -1,    -1,    -1,    -1,
      -1,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,   174,    -1,    -1,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,    -1,   171,   172,   173,   174,    -1,    -1,    -1,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,   174,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      -1,   171,   172,   173,   174,    -1,    -1,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,   174,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,    -1,
     171,   172,   173,   174,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    17,    18,    19,    20,    21,    22,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,    -1,   171,
     172,   173,   174,    -1,    -1,    -1,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,    -1,   171,   172,
     173,   174,    -1,   157,    -1,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   157,    -1,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,    -1,   171,   172,   173,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    18,    19,    20,    21,
      22,    23,    24,    -1,    -1,    -1,    -1,   159,   160,   161,
     162,    -1,    34,   165,   166,   167,   168,   169,    -1,   171,
     172,   173,    -1,    -1,    -1,    -1,   160,   161,   162,    -1,
       6,   165,   166,   167,   168,   169,    -1,   171,   172,   173,
      18,    19,    20,    21,    22,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    18,    19,    20,
      21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    54,    -1,
      55,    -1,    57,    58,    59,    60,    62,    63,    64,    65,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    89,    -1,    -1,    -1,    -1,    -1,
      -1,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   106,   171,   172,   173,    -1,    -1,   113,    -1,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   124,   171,
     172,   173,   127,   128,   130,    -1,    -1,    -1,   134,   135,
      -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
     146,    -1,   148,    -1,   149,    -1,    10,    11,    12,    -1,
      -1,    -1,    -1,   161,   162,    -1,    -1,   165,   166,   167,
     168,   169,    -1,   171,   172,   173,    -1,   172,    -1,    -1,
      -1,   162,    -1,    -1,   165,   166,   167,   168,   169,    54,
     171,   172,   173,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    55,    -1,    57,    58,    59,    60,    61,    62,    -1,
      75,    76,    77,    78,    -1,    -1,    70,    -1,    -1,    10,
      11,    12,    -1,    88,    -1,    -1,    -1,    -1,    82,    -1,
      -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    55,    -1,
      57,    58,    59,    60,    -1,    -1,    -1,    -1,   113,    -1,
      -1,    -1,   106,    11,    12,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    55,   130,    57,    58,    59,    60,
     135,    -1,    89,   127,   128,    -1,    -1,    -1,    -1,    70,
      -1,   146,    -1,   148,    -1,    -1,    -1,   141,    -1,   106,
     144,    82,    -1,   147,    52,   149,    -1,    55,    89,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,    67,
     127,   128,    70,    -1,    -1,   106,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    -1,   144,    -1,    -1,
      -1,    89,   149,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    11,    12,   106,    -1,
      -1,    -1,    -1,   144,    -1,   172,   147,    -1,   149,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,   127,
     128,    -1,    11,    12,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   141,   142,   143,   144,    52,    -1,   147,
      55,   149,    57,    58,    59,    60,    61,    62,    -1,    -1,
      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    52,    -1,    -1,    55,    82,    57,    58,
      59,    60,    61,    -1,    89,    -1,    -1,    -1,    67,    -1,
      -1,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,   106,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,   128,    -1,    11,    12,   106,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   141,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   124,    -1,    -1,   127,   128,
      -1,    11,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,   142,   143,   144,    52,    -1,   147,    55,
     149,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
      -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    52,    -1,    -1,    55,    82,    57,    58,    59,
      60,    61,    62,    89,    -1,    -1,    -1,    67,    -1,    -1,
      70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
     106,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   127,   128,    -1,    11,    -1,   106,   133,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   141,   142,   143,   144,    -1,
      -1,   147,    -1,   149,    -1,    -1,    -1,   127,   128,    -1,
      11,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   141,   142,   143,   144,    52,    -1,   147,    55,   149,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,    -1,
      67,    -1,    -1,    70,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    52,    -1,    -1,    55,    82,    57,    58,    59,    60,
      61,    -1,    89,    -1,    -1,    -1,    67,    -1,    -1,    70,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,   106,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,    -1,
     127,   128,    -1,    11,    -1,   106,   133,    -1,    -1,    -1,
      -1,    10,    11,    12,   141,   142,   143,   144,    -1,    -1,
     147,    -1,   149,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    10,    11,    12,    -1,    -1,    -1,    -1,
     141,   142,   143,   144,    52,    -1,   147,    55,   149,    57,
      58,    59,    60,    61,    68,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    70,    -1,    -1,    -1,    74,    81,    82,    68,
      -1,    -1,    -1,    -1,    82,    -1,    -1,    -1,    -1,    -1,
      -1,    89,    81,    82,    -1,    -1,    -1,    10,    11,    12,
      -1,    68,    15,    -1,    -1,    -1,    -1,    -1,   106,    -1,
      -1,    -1,    -1,    -1,    81,    82,   120,   121,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,   127,
     128,   120,   121,    -1,   123,   133,    -1,   141,    -1,   128,
      -1,   130,   146,   141,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   141,   120,   121,    68,   123,   146,    -1,    -1,
      -1,   128,    55,   130,    57,    58,    59,    60,    81,    82,
      -1,    54,    -1,    -1,   141,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    89,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    88,    -1,   120,   121,    -1,
     123,    -1,    -1,   106,    -1,   128,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,   130,    53,    54,
      -1,   144,   135,    -1,    -1,    -1,   149,    62,    63,    64,
      65,    -1,   145,   146,    -1,   148,    -1,    -1,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,   172,
     163,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,    -1,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,    -1,    -1,   130,   131,    54,    -1,   134,
     135,    -1,    -1,    -1,   139,    62,    63,    64,    65,    -1,
     145,   146,    -1,   148,    -1,    -1,    -1,    -1,    75,    76,
      77,    78,    -1,    -1,    54,    -1,    83,    -1,    54,    -1,
      -1,    88,    62,    63,    64,    65,    62,    63,    64,    65,
      -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    75,
      76,    77,    78,    -1,    -1,    -1,   113,    -1,    88,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,    -1,
      -1,    -1,    -1,   113,   114,    -1,    -1,   113,   145,   146,
      -1,   148,    -1,    -1,   124,    -1,    -1,    -1,   124,    -1,
     130,    -1,    -1,    -1,   130,   135,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,   148,    -1,
     146,    -1,   148
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   151,   152,   153,   179,   180,   289,     3,     4,     5,
       6,     8,     9,    10,    11,    51,    55,    57,    58,    59,
      60,    66,    70,    71,    80,    81,    82,    86,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   115,   117,   118,   120,
     125,   127,   128,   129,   132,   137,   140,   144,   149,   162,
     165,   166,   167,   170,   172,   173,   176,   279,   280,   288,
      11,    12,    52,    55,    57,    58,    59,    60,    61,    62,
      67,    70,    74,    82,    89,   106,   127,   128,   133,   141,
     142,   143,   144,   147,   149,   242,   243,   247,   248,   250,
     256,   257,   261,   262,   267,   268,   269,   270,     0,    48,
      50,   190,   289,   154,   172,   172,   172,   172,   172,   172,
     172,   163,   172,   163,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,    11,    52,    67,   141,   142,   245,
     261,   262,   267,   279,   163,   172,   172,    15,   172,   279,
     163,   172,   172,   172,   279,   279,   279,   279,   279,    11,
      55,    57,    58,    59,    60,    70,    82,    89,   106,   127,
     128,   144,   149,   247,   277,   279,    10,    11,    12,    68,
      81,    82,   120,   121,   123,   128,   130,   158,   162,   167,
     283,   284,   286,   289,   279,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   171,   172,   173,     6,
       8,   242,   243,   172,    61,   133,    70,   106,   268,   268,
     268,   286,   172,   268,    13,    15,    17,    62,   148,   162,
     167,   172,   240,   241,   289,   241,   154,   190,   190,   145,
     191,   192,   286,   172,   156,   181,   276,   277,   289,   276,
     247,   276,   276,   276,   276,   276,   247,   276,   247,   276,
     247,   276,   247,   247,   247,   247,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   247,   276,   172,
     286,   172,   172,   190,   190,   174,   247,   276,   276,   172,
     247,   247,   247,   279,   276,   276,   174,   155,   174,   286,
     286,   155,   177,   158,   230,   289,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   286,   174,   277,
     279,   241,   241,    52,   279,   247,   167,   286,   190,   240,
     241,   240,   241,   190,   190,    15,    17,   162,   167,   190,
     225,   226,   235,   289,   173,   259,   260,   289,    10,    11,
      12,   120,   157,   287,    10,    11,    12,   120,   154,   286,
     287,   286,    49,   155,   172,    11,    52,    67,   141,   142,
     244,   248,   250,   256,   261,   262,   267,   279,    53,    54,
      62,    63,    64,    65,    73,    75,    76,    77,    78,    79,
      83,    88,   107,   108,   109,   110,   111,   112,   113,   114,
     121,   122,   123,   124,   130,   131,   134,   135,   139,   145,
     146,   148,   184,   186,   187,   189,   193,   213,   263,   266,
     289,   175,   174,   174,   174,   174,   174,   174,   174,   164,
     174,   164,   174,   174,   174,   174,   155,   174,   155,   174,
     155,   174,   174,   174,   174,   174,   174,   174,   174,   174,
     174,   174,   174,   279,   247,   276,   286,   286,   164,   174,
     174,   286,   174,   164,   174,   174,   174,   174,   279,   279,
      15,   162,   284,   172,   210,   289,   279,   157,   174,   177,
     174,   174,   174,   190,   190,    13,    15,    17,    62,   148,
     162,   167,   240,   289,   240,   240,   190,   190,   190,    62,
     124,   242,   243,   174,    15,   155,   275,   279,   289,   286,
     175,    11,   258,   268,   157,   249,   251,   157,   190,   191,
       3,     4,     5,     9,    10,    15,    51,    66,    71,    80,
      81,   115,   118,   120,   125,   129,   132,   137,   140,   162,
     165,   166,   170,   172,   176,   227,   228,   235,   236,   281,
     282,   288,   289,   172,   286,   172,   174,   190,   190,   174,
      76,    88,   189,   189,   189,   189,   189,   189,     6,   189,
     213,   189,   279,   157,   188,   114,   189,   172,   172,   172,
     172,   172,   172,   189,   154,   190,   157,   157,   157,   189,
     189,   172,   187,   189,   193,   214,   189,   189,   197,    74,
     114,   286,   189,   189,    10,    11,   119,   154,   170,   200,
     204,   244,   246,   172,   172,   247,   247,   247,   174,   174,
     174,   172,   174,   172,   230,   225,    17,    62,    64,    81,
     113,   116,   117,   120,   136,   148,   162,   190,   279,   240,
     167,   286,   190,   240,   240,   190,   190,   173,   240,   240,
     240,   124,   242,   243,   235,    13,    17,    62,   148,   162,
     167,   172,   238,   287,   289,    13,    15,    17,    62,   148,
     162,   167,   172,   239,   210,    15,   235,   177,   190,   258,
     180,    81,   252,   289,   191,   172,   163,   163,   245,   163,
      15,   172,   281,   163,   172,   279,   279,   279,   279,   247,
     277,   279,   174,    15,   155,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    34,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   171,   172,   173,    52,
     279,   247,   190,   286,   287,   286,   190,   189,   174,   186,
     154,   286,   286,   286,   286,   286,   286,   286,   180,   286,
     279,   163,    10,    11,   204,   244,   246,   286,   286,   156,
     190,   172,   172,    62,   242,   185,   286,   195,   154,   156,
     158,   232,   156,   194,   277,   277,   174,   174,   174,   277,
     277,   174,   279,   172,    34,   223,   289,   190,   190,   240,
     240,   240,   275,   174,   174,   174,   242,   243,   238,   239,
     167,   190,   238,   238,   190,   190,   238,   173,   230,   190,
     167,   286,   190,   239,   239,   190,   190,   239,   173,   230,
     190,   190,   155,   158,   175,   157,   253,   254,   289,    49,
     247,   247,   247,   172,   247,   172,   247,   247,   247,   279,
     174,   174,    15,   236,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   286,   174,   277,   279,   174,
     174,   174,   157,   189,   180,   154,   155,   155,   155,   155,
     155,   155,   175,   154,   155,   174,    10,    11,    12,    61,
      62,   141,   215,   216,   217,   218,   219,   267,   289,   172,
     232,   198,   156,   156,   158,   201,    10,    13,   167,   203,
     242,    13,    17,    62,   148,   162,   167,   237,   287,   289,
     180,   172,   154,   156,   157,   158,   231,   271,   272,    68,
      69,   154,   279,    13,    17,    62,   119,   148,   162,   167,
     172,   196,   220,   222,   287,   174,   174,   174,   174,   210,
     174,   174,   286,    62,   245,   154,   240,   177,   172,   172,
     172,   238,   239,   230,   230,   190,   238,   238,   238,   174,
     275,   190,   190,   239,   239,   239,   174,   275,   223,   279,
     121,   122,   123,   141,   146,   255,   285,   286,   154,   155,
     190,   174,   164,   164,   276,   164,   286,   174,   164,   174,
     174,   279,   157,   174,   177,   258,   175,   265,    10,    10,
      10,    10,    10,    10,   264,   288,   156,   219,   164,   155,
      15,   286,    13,    17,    62,   148,   162,   167,   172,   238,
     239,   199,   222,   247,   225,   174,   167,   220,   225,   237,
     167,   190,   237,   237,   190,   190,   172,   173,   190,   175,
     205,   271,   182,   183,   286,    68,    69,   175,   273,   289,
     156,   156,   154,   233,   234,   279,   289,   156,   167,   190,
     220,     6,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    34,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    69,   115,   155,   158,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   172,
     173,   176,   211,   220,   190,   190,   220,   157,   172,   173,
     223,   158,   230,   232,   190,   190,    15,   174,   245,   241,
     271,   190,   225,   225,   225,   230,   230,   238,   172,   177,
     239,   172,   177,   155,   146,   285,   146,   285,   146,   285,
     286,   121,   122,   123,    15,   180,   255,   172,   172,   174,
     172,   174,   172,   279,   180,   155,   155,   174,   155,   224,
     289,   155,   155,   155,   180,   174,   238,   239,   187,   193,
     212,   213,   218,   286,   158,   167,   190,   190,   190,   158,
     229,   289,   230,   232,   156,   174,   172,   220,   174,   174,
     172,   190,   237,   237,   237,   208,   275,   225,   175,   154,
     155,   154,   172,   156,   156,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    74,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    87,    88,    89,   106,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   176,
     177,   274,   233,   175,   155,   190,   220,    10,   174,   177,
     190,   220,   220,   174,   279,   221,   275,   279,   155,   223,
     174,   241,   175,   174,   174,   174,   225,   190,   225,   190,
     285,   285,   285,   285,   285,   285,   175,   277,   277,   277,
     277,   175,    10,    10,   156,    10,   174,    10,    10,    10,
     175,   156,   229,   247,   190,    51,    66,    71,   125,   129,
     132,   162,   165,   166,   167,   170,   172,   176,   278,   280,
     155,   210,   202,   174,   172,   210,   209,   237,   225,   177,
     174,   271,   183,   276,   276,   273,   175,   154,   279,   220,
     190,   227,   177,   196,   154,   210,   210,   210,   174,   174,
     174,   174,   174,   174,   174,   155,   174,   155,   156,   155,
     174,   174,   155,   174,   172,   163,   163,   163,    15,   172,
     278,   163,   278,   278,   278,   278,   278,   247,   277,   278,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    34,
     159,   160,   161,   162,   165,   166,   167,   168,   169,   171,
     172,   173,   199,   190,   225,   172,   206,   190,   225,   174,
     190,   210,   175,   175,   174,   175,   233,   174,   190,   271,
     190,   190,   190,   210,   210,   156,    10,   156,    10,    10,
     156,   156,    10,   156,   247,   247,   247,   247,   172,   247,
     247,   174,   174,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   286,   174,   277,   279,   174,   207,   225,   174,
     210,   190,    15,   175,   210,   175,   223,   223,   223,   190,
     190,   155,   224,   174,   155,   155,   174,   174,   164,   164,
     164,   286,   174,   164,   278,   157,   174,   177,   210,   225,
     174,   210,   190,    10,   174,   156,    10,    10,   156,   172,
     172,   172,   174,   172,   278,   190,   174,   210,   156,   174,
     155,   174,   277,   277,   277,   277,   210,   190,   156,    10,
     156,   174,   174,   174,   174,   190,   223,   174,   223,   156
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   178,   179,   179,   179,   180,   180,   181,   180,   182,
     182,   183,   183,   183,   185,   184,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
     186,   186,   186,   188,   187,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   190,   190,   190,   190,   190,   191,   191,
     192,   192,   194,   193,   193,   195,   193,   193,   193,   196,
     196,   198,   197,   197,   199,   199,   201,   200,   202,   200,
     203,   200,   205,   204,   206,   204,   207,   204,   208,   204,
     209,   204,   204,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   212,   212,   212,
     213,   214,   213,   213,   213,   215,   215,   216,   216,   217,
     217,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     219,   219,   219,   219,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   221,   220,   222,   222,   223,
     223,   223,   224,   224,   225,   225,   225,   225,   225,   226,
     226,   227,   227,   227,   227,   227,   228,   228,   229,   229,
     230,   230,   231,   231,   231,   231,   231,   232,   232,   232,
     232,   232,   232,   233,   233,   233,   234,   234,   234,   234,
     235,   235,   235,   235,   235,   235,   235,   236,   236,   237,
     237,   237,   237,   237,   237,   237,   237,   237,   238,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   239,
     239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
     240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   243,   244,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   245,   245,   245,   245,   246,   246,
     247,   247,   247,   247,   249,   248,   251,   250,   252,   252,
     253,   253,   254,   254,   255,   255,   255,   255,   255,   255,
     255,   255,   255,   255,   256,   257,   257,   257,   257,   258,
     258,   259,   259,   259,   260,   260,   260,   261,   261,   261,
     262,   262,   262,   264,   263,   265,   263,   263,   263,   266,
     266,   266,   266,   267,   267,   267,   268,   268,   268,   268,
     268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
     268,   269,   269,   269,   270,   272,   271,   273,   273,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   275,   275,   276,   276,   277,
     277,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   281,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     283,   283,   283,   283,   283,   284,   284,   284,   284,   285,
     285,   285,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   287,   287,   287,   287,   288,   288,   288,
     288,   289
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     2,     2,     2,     1,     3,     0,     4,     1,
       3,     4,     5,     4,     0,     5,     1,     1,     1,     1,
       1,     2,     1,     1,     2,     2,     2,     2,     8,    11,
       9,    11,    13,    15,     7,     9,    12,     9,     9,    13,
       9,     7,     5,     0,     3,     1,     2,     2,     3,     2,
       2,     2,     2,     4,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     4,     7,     5,     5,     1,     3,
       1,     4,     0,     4,     3,     0,     4,     3,     1,     2,
       4,     0,     4,     3,     2,     4,     0,     7,     0,    10,
       0,     7,     0,     8,     0,    12,     0,    13,     0,     8,
       0,     9,     1,     1,     2,     2,     2,     4,     2,     2,
       2,     2,     2,     2,     4,     5,     6,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     0,     6,     2,     2,     1,     1,     1,     3,     1,
       1,     1,     2,     4,     2,     3,     3,     4,     2,     3,
       1,     1,     1,     1,     2,     3,     4,     2,     2,     3,
       3,     3,     4,     5,     3,     0,     7,     2,     3,     1,
       3,     4,     1,     2,     1,     1,     1,     3,     2,     1,
       3,     1,     1,     1,     3,     2,     1,     3,     1,     2,
       1,     2,     1,     3,     5,     3,     3,     1,     3,     3,
       3,     3,     4,     1,     1,     2,     1,     3,     3,     5,
       4,     5,     6,     4,     5,     6,     3,     1,     1,     1,
       2,     2,     2,     3,     3,     3,     4,     5,     1,     2,
       2,     2,     3,     3,     3,     4,     5,     8,     3,     1,
       3,     2,     2,     3,     3,     3,     4,     5,     8,     3,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       1,     1,     3,     2,     2,     3,     3,     3,     4,     5,
       6,    11,    11,    11,     1,     1,     2,     1,     1,     1,
       3,     5,     4,     4,     4,     1,     1,     1,     1,     2,
       1,     1,     1,     3,     5,     3,     4,     4,     4,     1,
       1,     1,     2,     3,     3,     4,     4,     1,     1,     1,
       2,     3,     2,     3,     0,     6,     0,     9,     1,     1,
       1,     1,     2,     3,     1,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     4,     4,     2,     5,     3,     1,
       1,     1,     4,     6,     1,     3,     5,     1,     2,     2,
       1,     1,     1,     0,     7,     0,     7,     4,     5,     3,
       6,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     1,     1,     2,     1,     0,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     4,     7,     7,     7,     7,     4,     2,     5,
       4,     2,     2,     2,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     4,     4,     3,     3,     3,
       3,     1,     4,     7,     7,     7,     7,     4,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     2,     5,     4,     2,     5,     4,     4,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     4,     4,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     9,    12,     4,     4,     6,     4,
       4,     6,     6,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     1,     4,     7,     7,     7,     7,
       4,     2,     5,     4,     2,     5,     4,     4,     2,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     4,     4,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     2,     3,     1,     2,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     0
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 3: /* grammar: START_CONST_EXPR const_expr  */
#line 466 "dtool/src/cppparser/cppBison.yxx"
{
  current_expr = (yyvsp[0].u.expr);
}
#line 3915 "built/tmp/cppBison.yxx.c"
    break;

  case 4: /* grammar: START_TYPE full_type  */
#line 470 "dtool/src/cppparser/cppBison.yxx"
{
  current_type = (yyvsp[0].u.type);
}
#line 3923 "built/tmp/cppBison.yxx.c"
    break;

  case 6: /* cpp: cpp optional_attributes ';'  */
#line 478 "dtool/src/cppparser/cppBison.yxx"
{
  if (!(yyvsp[-1].attr_list).is_empty()) {
    current_scope->add_declaration(new CPPDeclaration((yylsp[-1]).file, (yyvsp[-1].attr_list)), global_scope, current_lexer, (yylsp[-1]));
  }
}
#line 3933 "built/tmp/cppBison.yxx.c"
    break;

  case 7: /* $@1: %empty  */
#line 484 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = (yyvsp[0].attr_list);
}
#line 3941 "built/tmp/cppBison.yxx.c"
    break;

  case 8: /* cpp: cpp optional_attributes $@1 declaration  */
#line 488 "dtool/src/cppparser/cppBison.yxx"
{
  current_attributes = CPPAttributeList();
}
#line 3949 "built/tmp/cppBison.yxx.c"
    break;

  case 11: /* constructor_init: name '(' optional_const_expr_comma ')'  */
#line 500 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3957 "built/tmp/cppBison.yxx.c"
    break;

  case 12: /* constructor_init: name '(' optional_const_expr_comma ')' ELLIPSIS  */
#line 504 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-2].u.expr);
}
#line 3965 "built/tmp/cppBison.yxx.c"
    break;

  case 13: /* constructor_init: name '{' optional_const_expr_comma '}'  */
#line 508 "dtool/src/cppparser/cppBison.yxx"
{
  delete (yyvsp[-1].u.expr);
}
#line 3973 "built/tmp/cppBison.yxx.c"
    break;

  case 14: /* $@2: %empty  */
#line 520 "dtool/src/cppparser/cppBison.yxx"
{
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) |
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
#line 3982 "built/tmp/cppBison.yxx.c"
    break;

  case 15: /* extern_c: storage_class '{' $@2 cpp '}'  */
#line 525 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 3990 "built/tmp/cppBison.yxx.c"
    break;

  case 22: /* declaration: KW_BEGIN_PUBLISH  */
#line 538 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
#line 4007 "built/tmp/cppBison.yxx.c"
    break;

  case 23: /* declaration: KW_END_PUBLISH  */
#line 551 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
#line 4020 "built/tmp/cppBison.yxx.c"
    break;

  case 24: /* declaration: KW_PUBLISHED ':'  */
#line 560 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_published);
}
#line 4028 "built/tmp/cppBison.yxx.c"
    break;

  case 25: /* declaration: KW_PUBLIC ':'  */
#line 564 "dtool/src/cppparser/cppBison.yxx"
{
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
#line 4040 "built/tmp/cppBison.yxx.c"
    break;

  case 26: /* declaration: KW_PROTECTED ':'  */
#line 572 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_protected);
}
#line 4048 "built/tmp/cppBison.yxx.c"
    break;

  case 27: /* declaration: KW_PRIVATE ':'  */
#line 576 "dtool/src/cppparser/cppBison.yxx"
{
  current_scope->set_current_vis(V_private);
}
#line 4056 "built/tmp/cppBison.yxx.c"
    break;

  case 28: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 580 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-5].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-7]).file);
    make_property->_get_function = getter->as_function_group();

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_set_function = setter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-7]));
  }
}
#line 4081 "built/tmp/cppBison.yxx.c"
    break;

  case 29: /* declaration: KW_MAKE_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 601 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_normal, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4112 "built/tmp/cppBison.yxx.c"
    break;

  case 30: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 628 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4137 "built/tmp/cppBison.yxx.c"
    break;

  case 31: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 649 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-8].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-10]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-10]));
  }
}
#line 4170 "built/tmp/cppBison.yxx.c"
    break;

  case 32: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 678 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4210 "built/tmp/cppBison.yxx.c"
    break;

  case 33: /* declaration: KW_MAKE_SEQ_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 714 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-10].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-10].u.identifier)->get_fully_scoped_name(), (yylsp[-10]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-12].u.identifier), CPPMakeProperty::T_sequence, current_scope, (yylsp[-14]).file);
    make_property->_get_function = getter->as_function_group();
    make_property->_length_function = length_getter->as_function_group();

    CPPDeclaration *setter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *deleter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_del_function = deleter->as_function_group();
    }

    CPPDeclaration *inserter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (inserter == nullptr || inserter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid append method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_insert_function = inserter->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-14]));
  }
}
#line 4257 "built/tmp/cppBison.yxx.c"
    break;

  case 34: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ')' ';'  */
#line 757 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid item getter method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-4].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-6]).file);
    make_property->_get_function = getter->as_function_group();
    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-6]));
  }
}
#line 4273 "built/tmp/cppBison.yxx.c"
    break;

  case 35: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 769 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4298 "built/tmp/cppBison.yxx.c"
    break;

  case 36: /* declaration: KW_MAKE_MAP_PROPERTY '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER maybe_comma_identifier ')' ';'  */
#line 790 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-5].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));

  } else {
    CPPMakeProperty *make_property = new CPPMakeProperty((yyvsp[-9].u.identifier), CPPMakeProperty::T_mapping, current_scope, (yylsp[-11]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-7].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-7].u.identifier)->get_fully_scoped_name(), (yylsp[-7]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-3].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("Reference to non-existent or invalid setter: " + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    if ((yyvsp[-2].u.identifier) != nullptr) {
      CPPDeclaration *deleter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
      if (deleter == nullptr || deleter->get_subtype() != CPPDeclaration::ST_function_group) {
        yyerror("reference to non-existent or invalid delete method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
      } else {
        make_property->_del_function = deleter->as_function_group();
      }
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-11]));
  }
}
#line 4338 "built/tmp/cppBison.yxx.c"
    break;

  case 37: /* declaration: KW_MAKE_MAP_KEYS_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 826 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    getter = nullptr;
  }

  if (getter != nullptr && length_getter != nullptr) {
    CPPMakeProperty *make_property = nullptr;
    for (size_t i = 0; i < current_scope->_declarations.size(); ++i) {
      make_property = current_scope->_declarations[i]->as_make_property();
      if (make_property != nullptr) {
        if (make_property->get_fully_scoped_name() == (yyvsp[-6].u.identifier)->get_fully_scoped_name()) {
          break;
        } else {
          make_property = nullptr;
        }
      }
    }
    if (make_property != nullptr) {
      make_property->_get_key_function = getter->as_function_group();
      make_property->_length_function = length_getter->as_function_group();
    } else {
      yyerror("reference to non-existent MAKE_MAP_PROPERTY: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
    }
  }
}
#line 4376 "built/tmp/cppBison.yxx.c"
    break;

  case 38: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 860 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-6].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-8]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4402 "built/tmp/cppBison.yxx.c"
    break;

  case 39: /* declaration: KW_MAKE_PROPERTY2 '(' name ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 882 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *getter = (yyvsp[-6].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (getter == nullptr || getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("Reference to non-existent or invalid getter: " + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));

  } else {
    CPPMakeProperty *make_property;
    make_property = new CPPMakeProperty((yyvsp[-10].u.identifier), CPPMakeProperty::T_normal,
                                        current_scope, (yylsp[-12]).file);
    make_property->_get_function = getter->as_function_group();

    CPPDeclaration *hasser = (yyvsp[-8].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (hasser == nullptr || hasser->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid has/find method: " + (yyvsp[-8].u.identifier)->get_fully_scoped_name(), (yylsp[-8]));
    } else {
      make_property->_has_function = hasser->as_function_group();
    }

    CPPDeclaration *setter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (setter == nullptr || setter->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid setter: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    } else {
      make_property->_set_function = setter->as_function_group();
    }

    CPPDeclaration *clearer = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
    if (clearer == nullptr || clearer->get_subtype() != CPPDeclaration::ST_function_group) {
      yyerror("reference to non-existent or invalid clear method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
    } else {
      make_property->_clear_function = clearer->as_function_group();
    }

    current_scope->add_declaration(make_property, global_scope, current_lexer, (yylsp[-12]));
  }
}
#line 4442 "built/tmp/cppBison.yxx.c"
    break;

  case 40: /* declaration: KW_MAKE_SEQ '(' name ',' IDENTIFIER ',' IDENTIFIER ')' ';'  */
#line 918 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *length_getter = (yyvsp[-4].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (length_getter == nullptr || length_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid length method: " + (yyvsp[-4].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    length_getter = nullptr;
  }

  CPPDeclaration *element_getter = (yyvsp[-2].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (element_getter == nullptr || element_getter->get_subtype() != CPPDeclaration::ST_function_group) {
    yyerror("reference to non-existent or invalid element method: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-4]));
    element_getter = nullptr;
  }

  if (length_getter != nullptr && element_getter != nullptr) {
    CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier),
                                          length_getter->as_function_group(),
                                          element_getter->as_function_group(),
                                          current_scope, (yylsp[-8]).file);
    current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
  }
}
#line 4468 "built/tmp/cppBison.yxx.c"
    break;

  case 41: /* declaration: KW_STATIC_ASSERT '(' const_expr ',' string_literal ')' ';'  */
#line 940 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-4].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-4]));
  } else if (!result.as_boolean()) {
    stringstream str;
    str << *(yyvsp[-2].u.expr);
    yywarning("static_assert failed: " + str.str(), (yylsp[-4]));
  }
}
#line 4483 "built/tmp/cppBison.yxx.c"
    break;

  case 42: /* declaration: KW_STATIC_ASSERT '(' const_expr ')' ';'  */
#line 951 "dtool/src/cppparser/cppBison.yxx"
{
  // This alternative version of static_assert was introduced in C++17.
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("static_assert requires a constant expression", (yylsp[-2]));
  } else if (!result.as_boolean()) {
    yywarning("static_assert failed", (yylsp[-2]));
  }
}
#line 4497 "built/tmp/cppBison.yxx.c"
    break;

  case 43: /* $@3: %empty  */
#line 964 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
#line 4507 "built/tmp/cppBison.yxx.c"
    break;

  case 44: /* friend_declaration: KW_FRIEND $@3 declaration  */
#line 970 "dtool/src/cppparser/cppBison.yxx"
{
  delete current_scope;
  pop_scope();
}
#line 4516 "built/tmp/cppBison.yxx.c"
    break;

  case 45: /* storage_class: empty  */
#line 979 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 4524 "built/tmp/cppBison.yxx.c"
    break;

  case 46: /* storage_class: KW_CONST storage_class  */
#line 983 "dtool/src/cppparser/cppBison.yxx"
{
  // This isn't really a storage class, but it helps with parsing.
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_const;
}
#line 4533 "built/tmp/cppBison.yxx.c"
    break;

  case 47: /* storage_class: KW_EXTERN storage_class  */
#line 988 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
}
#line 4541 "built/tmp/cppBison.yxx.c"
    break;

  case 48: /* storage_class: KW_EXTERN SIMPLE_STRING storage_class  */
#line 992 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[-1].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[-1].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[-1].str) + "\"", (yylsp[-1]));
  }
}
#line 4556 "built/tmp/cppBison.yxx.c"
    break;

  case 49: /* storage_class: KW_STATIC storage_class  */
#line 1003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_static;
}
#line 4564 "built/tmp/cppBison.yxx.c"
    break;

  case 50: /* storage_class: KW_INLINE storage_class  */
#line 1007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_inline;
}
#line 4572 "built/tmp/cppBison.yxx.c"
    break;

  case 51: /* storage_class: KW_VIRTUAL storage_class  */
#line 1011 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_virtual;
}
#line 4580 "built/tmp/cppBison.yxx.c"
    break;

  case 52: /* storage_class: KW_EXPLICIT storage_class  */
#line 1015 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
}
#line 4588 "built/tmp/cppBison.yxx.c"
    break;

  case 53: /* storage_class: KW_EXPLICIT_LPAREN const_expr ')' storage_class  */
#line 1019 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-2].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("explicit() requires a constant expression", (yylsp[-2]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_explicit;
  }
}
#line 4601 "built/tmp/cppBison.yxx.c"
    break;

  case 54: /* storage_class: KW_REGISTER storage_class  */
#line 1028 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_register;
}
#line 4609 "built/tmp/cppBison.yxx.c"
    break;

  case 55: /* storage_class: KW_VOLATILE storage_class  */
#line 1032 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_volatile;
}
#line 4617 "built/tmp/cppBison.yxx.c"
    break;

  case 56: /* storage_class: KW_MUTABLE storage_class  */
#line 1036 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_mutable;
}
#line 4625 "built/tmp/cppBison.yxx.c"
    break;

  case 57: /* storage_class: KW_CONSTEVAL storage_class  */
#line 1040 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_consteval;
}
#line 4633 "built/tmp/cppBison.yxx.c"
    break;

  case 58: /* storage_class: KW_CONSTEXPR storage_class  */
#line 1044 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constexpr;
}
#line 4641 "built/tmp/cppBison.yxx.c"
    break;

  case 59: /* storage_class: KW_CONSTINIT storage_class  */
#line 1048 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_constinit;
}
#line 4649 "built/tmp/cppBison.yxx.c"
    break;

  case 60: /* storage_class: KW_BLOCKING storage_class  */
#line 1052 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_blocking;
}
#line 4657 "built/tmp/cppBison.yxx.c"
    break;

  case 61: /* storage_class: KW_EXTENSION storage_class  */
#line 1056 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_extension;
}
#line 4665 "built/tmp/cppBison.yxx.c"
    break;

  case 62: /* storage_class: KW_THREAD_LOCAL storage_class  */
#line 1060 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[0].u.integer) | (int)CPPInstance::SC_thread_local;
}
#line 4673 "built/tmp/cppBison.yxx.c"
    break;

  case 63: /* optional_attributes: empty  */
#line 1067 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
}
#line 4681 "built/tmp/cppBison.yxx.c"
    break;

  case 64: /* optional_attributes: ATTR_LEFT attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1071 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4690 "built/tmp/cppBison.yxx.c"
    break;

  case 65: /* optional_attributes: ATTR_LEFT KW_USING name ':' attribute_specifiers ATTR_RIGHT optional_attributes  */
#line 1076 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  for (CPPAttributeList::Attribute &attr : (yyval.attr_list)._attributes) {
    attr._ident->prepend((yyvsp[-4].u.identifier));
  }
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4702 "built/tmp/cppBison.yxx.c"
    break;

  case 66: /* optional_attributes: KW_ALIGNAS '(' const_expr ')' optional_attributes  */
#line 1084 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.expr)->as_expression());
}
#line 4711 "built/tmp/cppBison.yxx.c"
    break;

  case 67: /* optional_attributes: KW_ALIGNAS '(' type_decl ')' optional_attributes  */
#line 1089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
  (yyval.attr_list).add_alignas((yyvsp[-2].u.decl)->as_type());
}
#line 4720 "built/tmp/cppBison.yxx.c"
    break;

  case 68: /* attribute_specifiers: attribute_specifier  */
#line 1097 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[0].attr_list);
}
#line 4728 "built/tmp/cppBison.yxx.c"
    break;

  case 69: /* attribute_specifiers: attribute_specifier ',' attribute_specifiers  */
#line 1101 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = (yyvsp[-2].attr_list);
  (yyval.attr_list).add_attributes_from((yyvsp[0].attr_list));
}
#line 4737 "built/tmp/cppBison.yxx.c"
    break;

  case 70: /* attribute_specifier: name  */
#line 1109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[0].u.identifier));
}
#line 4746 "built/tmp/cppBison.yxx.c"
    break;

  case 71: /* attribute_specifier: name '(' formal_parameter_list ')'  */
#line 1114 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.attr_list) = CPPAttributeList();
  (yyval.attr_list).add_attribute((yyvsp[-3].u.identifier));
}
#line 4755 "built/tmp/cppBison.yxx.c"
    break;

  case 72: /* $@4: %empty  */
#line 1122 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // type_like_declaration.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4770 "built/tmp/cppBison.yxx.c"
    break;

  case 73: /* type_like_declaration: storage_class var_type_decl $@4 multiple_instance_identifiers  */
#line 1133 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4778 "built/tmp/cppBison.yxx.c"
    break;

  case 74: /* type_like_declaration: storage_class type_decl ';'  */
#line 1138 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
#line 4791 "built/tmp/cppBison.yxx.c"
    break;

  case 75: /* $@5: %empty  */
#line 1147 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[0].u.instance) != nullptr) {
    // Push the scope so that the initializers can make use of things defined
    // in the class body.
    push_scope((yyvsp[0].u.instance)->get_scope(current_scope, global_scope));
    (yyvsp[0].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-1].u.integer));
  }
}
#line 4804 "built/tmp/cppBison.yxx.c"
    break;

  case 76: /* type_like_declaration: storage_class constructor_prototype $@5 maybe_initialize_or_constructor_body  */
#line 1156 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-2].u.instance) != nullptr) {
    pop_scope();
    current_scope->add_declaration((yyvsp[-2].u.instance), global_scope, current_lexer, (yylsp[-2]));
    (yyvsp[-2].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4816 "built/tmp/cppBison.yxx.c"
    break;

  case 77: /* type_like_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1164 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
#line 4828 "built/tmp/cppBison.yxx.c"
    break;

  case 79: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1180 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
#line 4844 "built/tmp/cppBison.yxx.c"
    break;

  case 80: /* multiple_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' multiple_instance_identifiers  */
#line 1192 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
#line 4860 "built/tmp/cppBison.yxx.c"
    break;

  case 81: /* $@6: %empty  */
#line 1208 "dtool/src/cppparser/cppBison.yxx"
{
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
#line 4875 "built/tmp/cppBison.yxx.c"
    break;

  case 82: /* typedef_declaration: storage_class var_type_decl $@6 typedef_instance_identifiers  */
#line 1219 "dtool/src/cppparser/cppBison.yxx"
{
  pop_storage_class();
}
#line 4883 "built/tmp/cppBison.yxx.c"
    break;

  case 83: /* typedef_declaration: storage_class function_prototype maybe_initialize_or_function_body  */
#line 1223 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-1].u.instance) != nullptr) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != nullptr) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      CPPTypedefType *typedef_type = new CPPTypedefType(inst->_type, inst->_ident, current_scope, inst->_attributes);
      current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
#line 4899 "built/tmp/cppBison.yxx.c"
    break;

  case 84: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize_or_function_body  */
#line 1238 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-1].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-1].u.inst_ident), current_scope, (yylsp[-1]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-1]));
}
#line 4913 "built/tmp/cppBison.yxx.c"
    break;

  case 85: /* typedef_instance_identifiers: instance_identifier_and_maybe_trailing_return_type maybe_initialize ',' typedef_instance_identifiers  */
#line 1248 "dtool/src/cppparser/cppBison.yxx"
{
  if (current_storage_class & CPPInstance::SC_const) {
    (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  }
  (yyvsp[-3].u.inst_ident)->add_attributes(current_attributes);
  CPPType *target_type = current_type;
  CPPTypedefType *typedef_type = new CPPTypedefType(target_type, (yyvsp[-3].u.inst_ident), current_scope, (yylsp[-3]).file);
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-3]));
}
#line 4927 "built/tmp/cppBison.yxx.c"
    break;

  case 86: /* $@7: %empty  */
#line 1263 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4944 "built/tmp/cppBison.yxx.c"
    break;

  case 87: /* constructor_prototype: IDENTIFIER '(' $@7 function_parameter_list ')' function_post optional_attributes  */
#line 1276 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-6].u.identifier)->get_scope(current_scope, global_scope);
  CPPType *type;
  std::string simple_name = (yyvsp[-6].u.identifier)->get_simple_name();
  if (!simple_name.empty() && simple_name[0] == '~') {
    // A destructor has no return type.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else if (scope != nullptr && simple_name == scope->get_simple_name()) {
    // Neither does a constructor.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  }
  else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    yywarning("function has no return type, assuming int", (yylsp[-6]));
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }
  pop_scope();

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 4975 "built/tmp/cppBison.yxx.c"
    break;

  case 88: /* $@8: %empty  */
#line 1305 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-2].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 4992 "built/tmp/cppBison.yxx.c"
    break;

  case 89: /* constructor_prototype: TYPENAME_IDENTIFIER '(' IDENTIFIER ')' '(' $@8 function_parameter_list ')' function_post optional_attributes  */
#line 1318 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-9].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-9].u.identifier)->get_fully_scoped_name(), (yylsp[-9]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-7].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-9]).file);
}
#line 5011 "built/tmp/cppBison.yxx.c"
    break;

  case 90: /* $@9: %empty  */
#line 1333 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function.
  CPPScope *scope = new CPPScope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope),
                                 (yyvsp[-1].u.identifier)->_names.back(), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5028 "built/tmp/cppBison.yxx.c"
    break;

  case 91: /* constructor_prototype: TYPENAME_IDENTIFIER '(' $@9 function_parameter_list ')' function_post optional_attributes  */
#line 1346 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type;
  if ((yyvsp[-6].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-6].u.identifier));
  ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  ii->add_attributes(current_attributes);

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
}
#line 5051 "built/tmp/cppBison.yxx.c"
    break;

  case 92: /* $@10: %empty  */
#line 1370 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
#line 5059 "built/tmp/cppBison.yxx.c"
    break;

  case 93: /* function_prototype: '~' name '(' $@10 function_parameter_list ')' function_post optional_attributes  */
#line 1374 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  if ((yyvsp[-6].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-6].u.identifier)->get_fully_scoped_name(), (yylsp[-6]));
  } else {
    CPPIdentifier *ident =
      new CPPIdentifier("~" + (yyvsp[-6].u.identifier)->get_simple_name(), (yylsp[-6]));
    delete (yyvsp[-6].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);

    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
    ii->add_attributes(current_attributes);

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-6]).file);
  }
}
#line 5083 "built/tmp/cppBison.yxx.c"
    break;

  case 94: /* $@11: %empty  */
#line 1401 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5091 "built/tmp/cppBison.yxx.c"
    break;

  case 95: /* function_prototype: TYPENAME_IDENTIFIER '(' '*' instance_identifier ')' '(' $@11 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1405 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-11].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-11].u.identifier)->get_fully_scoped_name(), (yylsp[-11]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-11]).file);
}
#line 5110 "built/tmp/cppBison.yxx.c"
    break;

  case 96: /* $@12: %empty  */
#line 1420 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
#line 5118 "built/tmp/cppBison.yxx.c"
    break;

  case 97: /* function_prototype: TYPENAME_IDENTIFIER '(' SCOPING '*' instance_identifier ')' '(' $@12 function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 1424 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  CPPType *type = (yyvsp[-12].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-12].u.identifier)->get_fully_scoped_name(), (yylsp[-12]));
  }
  assert(type != nullptr);

  CPPInstanceIdentifier *ii = (yyvsp[-8].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-10].u.identifier));
  ii->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), nullptr, (yyvsp[-1].attr_list));
  ii->add_attributes(current_attributes);
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-12]).file);
}
#line 5137 "built/tmp/cppBison.yxx.c"
    break;

  case 98: /* $@13: %empty  */
#line 1441 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-3].u.identifier) != nullptr) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5147 "built/tmp/cppBison.yxx.c"
    break;

  case 99: /* function_prototype: KW_OPERATOR type not_paren_formal_parameter_identifier '(' $@13 function_parameter_list ')' function_post  */
#line 1447 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-7].u.identifier) != nullptr) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier(name, (yylsp[-6]));
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance)->_attributes.add_attributes_from(current_attributes);
}
#line 5177 "built/tmp/cppBison.yxx.c"
    break;

  case 100: /* $@14: %empty  */
#line 1473 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-4].u.identifier) != nullptr) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
#line 5187 "built/tmp/cppBison.yxx.c"
    break;

  case 101: /* function_prototype: KW_OPERATOR KW_CONST type not_paren_formal_parameter_identifier '(' $@14 function_parameter_list ')' function_post  */
#line 1479 "dtool/src/cppparser/cppBison.yxx"
{
  if ((yyvsp[-8].u.identifier) != nullptr) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-5]));
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyvsp[-5].u.inst_ident)->add_attributes(current_attributes);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
#line 5208 "built/tmp/cppBison.yxx.c"
    break;

  case 102: /* function_prototype: IDENTIFIER  */
#line 1500 "dtool/src/cppparser/cppBison.yxx"
{
  CPPDeclaration *decl =
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != nullptr) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = nullptr;
  }
}
#line 5222 "built/tmp/cppBison.yxx.c"
    break;

  case 103: /* function_post: empty  */
#line 1513 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = 0;
}
#line 5230 "built/tmp/cppBison.yxx.c"
    break;

  case 104: /* function_post: function_post KW_CONST  */
#line 1517 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_const_method;
}
#line 5238 "built/tmp/cppBison.yxx.c"
    break;

  case 105: /* function_post: function_post KW_VOLATILE  */
#line 1521 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_volatile_method;
}
#line 5246 "built/tmp/cppBison.yxx.c"
    break;

  case 106: /* function_post: function_post KW_NOEXCEPT  */
#line 1525 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_noexcept;
}
#line 5254 "built/tmp/cppBison.yxx.c"
    break;

  case 107: /* function_post: function_post KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 1529 "dtool/src/cppparser/cppBison.yxx"
{
  CPPExpression::Result result = (yyvsp[-1].u.expr)->evaluate();
  if (result._type == CPPExpression::RT_error) {
    yywarning("noexcept() requires a constant expression", (yylsp[-1]));
  } else if (result.as_boolean()) {
    (yyval.u.integer) = (yyvsp[-3].u.integer) | (int)CPPFunctionType::F_noexcept;
  }
}
#line 5267 "built/tmp/cppBison.yxx.c"
    break;

  case 108: /* function_post: function_post KW_FINAL  */
#line 1538 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_final;
}
#line 5275 "built/tmp/cppBison.yxx.c"
    break;

  case 109: /* function_post: function_post KW_OVERRIDE  */
#line 1542 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_override;
}
#line 5283 "built/tmp/cppBison.yxx.c"
    break;

  case 110: /* function_post: function_post '&'  */
#line 1546 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_lvalue_method;
}
#line 5291 "built/tmp/cppBison.yxx.c"
    break;

  case 111: /* function_post: function_post ANDAND  */
#line 1550 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPFunctionType::F_rvalue_method;
}
#line 5299 "built/tmp/cppBison.yxx.c"
    break;

  case 112: /* function_post: function_post KW_MUTABLE  */
#line 1554 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5308 "built/tmp/cppBison.yxx.c"
    break;

  case 113: /* function_post: function_post KW_CONSTEXPR  */
#line 1559 "dtool/src/cppparser/cppBison.yxx"
{
  // Used for lambdas in C++17, currently ignored.
  (yyval.u.integer) = (yyvsp[-1].u.integer);
}
#line 5317 "built/tmp/cppBison.yxx.c"
    break;

  case 114: /* function_post: function_post KW_THROW '(' ')'  */
#line 1564 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
#line 5325 "built/tmp/cppBison.yxx.c"
    break;

  case 115: /* function_post: function_post KW_THROW '(' name ')'  */
#line 1568 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
#line 5333 "built/tmp/cppBison.yxx.c"
    break;

  case 116: /* function_post: function_post KW_THROW '(' name ELLIPSIS ')'  */
#line 1572 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.integer) = (yyvsp[-5].u.integer);
}
#line 5341 "built/tmp/cppBison.yxx.c"
    break;

  case 117: /* function_operator: '!'  */
#line 1579 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!";
}
#line 5349 "built/tmp/cppBison.yxx.c"
    break;

  case 118: /* function_operator: '~'  */
#line 1583 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "~";
}
#line 5357 "built/tmp/cppBison.yxx.c"
    break;

  case 119: /* function_operator: '*'  */
#line 1587 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*";
}
#line 5365 "built/tmp/cppBison.yxx.c"
    break;

  case 120: /* function_operator: '/'  */
#line 1591 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/";
}
#line 5373 "built/tmp/cppBison.yxx.c"
    break;

  case 121: /* function_operator: '%'  */
#line 1595 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%";
}
#line 5381 "built/tmp/cppBison.yxx.c"
    break;

  case 122: /* function_operator: '+'  */
#line 1599 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+";
}
#line 5389 "built/tmp/cppBison.yxx.c"
    break;

  case 123: /* function_operator: '-'  */
#line 1603 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-";
}
#line 5397 "built/tmp/cppBison.yxx.c"
    break;

  case 124: /* function_operator: '|'  */
#line 1607 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|";
}
#line 5405 "built/tmp/cppBison.yxx.c"
    break;

  case 125: /* function_operator: '&'  */
#line 1611 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&";
}
#line 5413 "built/tmp/cppBison.yxx.c"
    break;

  case 126: /* function_operator: '^'  */
#line 1615 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^";
}
#line 5421 "built/tmp/cppBison.yxx.c"
    break;

  case 127: /* function_operator: OROR  */
#line 1619 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "||";
}
#line 5429 "built/tmp/cppBison.yxx.c"
    break;

  case 128: /* function_operator: ANDAND  */
#line 1623 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&&";
}
#line 5437 "built/tmp/cppBison.yxx.c"
    break;

  case 129: /* function_operator: EQCOMPARE  */
#line 1627 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "==";
}
#line 5445 "built/tmp/cppBison.yxx.c"
    break;

  case 130: /* function_operator: NECOMPARE  */
#line 1631 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "!=";
}
#line 5453 "built/tmp/cppBison.yxx.c"
    break;

  case 131: /* function_operator: LECOMPARE  */
#line 1635 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=";
}
#line 5461 "built/tmp/cppBison.yxx.c"
    break;

  case 132: /* function_operator: GECOMPARE  */
#line 1639 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">=";
}
#line 5469 "built/tmp/cppBison.yxx.c"
    break;

  case 133: /* function_operator: '<'  */
#line 1643 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<";
}
#line 5477 "built/tmp/cppBison.yxx.c"
    break;

  case 134: /* function_operator: '>'  */
#line 1647 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">";
}
#line 5485 "built/tmp/cppBison.yxx.c"
    break;

  case 135: /* function_operator: SPACESHIP  */
#line 1651 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<=>";
}
#line 5493 "built/tmp/cppBison.yxx.c"
    break;

  case 136: /* function_operator: LSHIFT  */
#line 1655 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<";
}
#line 5501 "built/tmp/cppBison.yxx.c"
    break;

  case 137: /* function_operator: RSHIFT  */
#line 1659 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>";
}
#line 5509 "built/tmp/cppBison.yxx.c"
    break;

  case 138: /* function_operator: '='  */
#line 1663 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "=";
}
#line 5517 "built/tmp/cppBison.yxx.c"
    break;

  case 139: /* function_operator: ','  */
#line 1667 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ",";
}
#line 5525 "built/tmp/cppBison.yxx.c"
    break;

  case 140: /* function_operator: PLUSPLUS  */
#line 1671 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "++";
}
#line 5533 "built/tmp/cppBison.yxx.c"
    break;

  case 141: /* function_operator: MINUSMINUS  */
#line 1675 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "--";
}
#line 5541 "built/tmp/cppBison.yxx.c"
    break;

  case 142: /* function_operator: TIMESEQUAL  */
#line 1679 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "*=";
}
#line 5549 "built/tmp/cppBison.yxx.c"
    break;

  case 143: /* function_operator: DIVIDEEQUAL  */
#line 1683 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "/=";
}
#line 5557 "built/tmp/cppBison.yxx.c"
    break;

  case 144: /* function_operator: MODEQUAL  */
#line 1687 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "%=";
}
#line 5565 "built/tmp/cppBison.yxx.c"
    break;

  case 145: /* function_operator: PLUSEQUAL  */
#line 1691 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "+=";
}
#line 5573 "built/tmp/cppBison.yxx.c"
    break;

  case 146: /* function_operator: MINUSEQUAL  */
#line 1695 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "-=";
}
#line 5581 "built/tmp/cppBison.yxx.c"
    break;

  case 147: /* function_operator: OREQUAL  */
#line 1699 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "|=";
}
#line 5589 "built/tmp/cppBison.yxx.c"
    break;

  case 148: /* function_operator: ANDEQUAL  */
#line 1703 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "&=";
}
#line 5597 "built/tmp/cppBison.yxx.c"
    break;

  case 149: /* function_operator: XOREQUAL  */
#line 1707 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "^=";
}
#line 5605 "built/tmp/cppBison.yxx.c"
    break;

  case 150: /* function_operator: LSHIFTEQUAL  */
#line 1711 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "<<=";
}
#line 5613 "built/tmp/cppBison.yxx.c"
    break;

  case 151: /* function_operator: RSHIFTEQUAL  */
#line 1715 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = ">>=";
}
#line 5621 "built/tmp/cppBison.yxx.c"
    break;

  case 152: /* function_operator: POINTSAT  */
#line 1719 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "->";
}
#line 5629 "built/tmp/cppBison.yxx.c"
    break;

  case 153: /* function_operator: '[' ']'  */
#line 1723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "[]";
}
#line 5637 "built/tmp/cppBison.yxx.c"
    break;

  case 154: /* function_operator: '(' ')'  */
#line 1727 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "()";
}
#line 5645 "built/tmp/cppBison.yxx.c"
    break;

  case 155: /* function_operator: KW_NEW  */
#line 1731 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "new";
}
#line 5653 "built/tmp/cppBison.yxx.c"
    break;

  case 156: /* function_operator: KW_DELETE  */
#line 1735 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.str) = "delete";
}
#line 5661 "built/tmp/cppBison.yxx.c"
    break;

  case 161: /* $@15: %empty  */
#line 1749 "dtool/src/cppparser/cppBison.yxx"
{
  push_scope(new CPPTemplateScope(current_scope));
}
#line 5669 "built/tmp/cppBison.yxx.c"
    break;

  case 162: /* template_declaration: KW_TEMPLATE $@15 '<' template_formal_parameters '>' more_template_declaration  */
#line 1753 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 5677 "built/tmp/cppBison.yxx.c"
    break;

  case 167: /* template_nonempty_formal_parameters: template_formal_parameter  */
#line 1767 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5687 "built/tmp/cppBison.yxx.c"
    break;

  case 168: /* template_nonempty_formal_parameters: template_nonempty_formal_parameters ',' template_formal_parameter  */
#line 1773 "dtool/src/cppparser/cppBison.yxx"
{
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != nullptr);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
#line 5697 "built/tmp/cppBison.yxx.c"
    break;

  case 171: /* template_formal_parameter: typename_keyword  */
#line 1787 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter(nullptr));
}
#line 5705 "built/tmp/cppBison.yxx.c"
    break;

  case 172: /* template_formal_parameter: typename_keyword name  */
#line 1791 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
#line 5713 "built/tmp/cppBison.yxx.c"
    break;

  case 173: /* template_formal_parameter: typename_keyword name '=' full_type  */
#line 1795 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
#line 5721 "built/tmp/cppBison.yxx.c"
    break;

  case 174: /* template_formal_parameter: typename_keyword ELLIPSIS  */
#line 1799 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter(nullptr);
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5731 "built/tmp/cppBison.yxx.c"
    break;

  case 175: /* template_formal_parameter: typename_keyword ELLIPSIS name  */
#line 1805 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[0].u.identifier));
  ctp->_packed = true;
  (yyval.u.decl) = CPPType::new_type(ctp);
}
#line 5741 "built/tmp/cppBison.yxx.c"
    break;

  case 176: /* template_formal_parameter: template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1811 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5751 "built/tmp/cppBison.yxx.c"
    break;

  case 177: /* template_formal_parameter: KW_CONST template_formal_parameter_type formal_parameter_identifier template_parameter_maybe_initialize  */
#line 1817 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
#line 5762 "built/tmp/cppBison.yxx.c"
    break;

  case 178: /* template_formal_parameter: template_formal_parameter_type parameter_pack_identifier  */
#line 1824 "dtool/src/cppparser/cppBison.yxx"
{
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5771 "built/tmp/cppBison.yxx.c"
    break;

  case 179: /* template_formal_parameter: KW_CONST template_formal_parameter_type parameter_pack_identifier  */
#line 1829 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[0]).file);
  (yyval.u.decl) = inst;
}
#line 5781 "built/tmp/cppBison.yxx.c"
    break;

  case 180: /* template_formal_parameter_type: simple_type  */
#line 1838 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 5789 "built/tmp/cppBison.yxx.c"
    break;

  case 181: /* template_formal_parameter_type: IDENTIFIER  */
#line 1842 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 5798 "built/tmp/cppBison.yxx.c"
    break;

  case 182: /* template_formal_parameter_type: TYPENAME_IDENTIFIER  */
#line 1847 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5810 "built/tmp/cppBison.yxx.c"
    break;

  case 183: /* template_formal_parameter_type: TYPEPACK_IDENTIFIER  */
#line 1855 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 5822 "built/tmp/cppBison.yxx.c"
    break;

  case 184: /* instance_identifier: name_no_final optional_attributes  */
#line 1867 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 5830 "built/tmp/cppBison.yxx.c"
    break;

  case 185: /* instance_identifier: KW_OPERATOR function_operator optional_attributes  */
#line 1871 "dtool/src/cppparser/cppBison.yxx"
{
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-2].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator "+(yyvsp[-1].str), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator "+(yyvsp[-1].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5848 "built/tmp/cppBison.yxx.c"
    break;

  case 186: /* instance_identifier: KW_OPERATOR SIMPLE_STRING IDENTIFIER optional_attributes  */
#line 1885 "dtool/src/cppparser/cppBison.yxx"
{
  // A C++11 literal operator.
  if (!(yyvsp[-2].str).empty()) {
    yyerror("expected empty string", (yylsp[-2]));
  }
  CPPIdentifier *ident = (yyvsp[-3].u.identifier);
  if (ident == nullptr) {
    ident = new CPPIdentifier("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name(), (yylsp[-1]));
  } else {
    ident->_names.push_back("operator \"\" "+(yyvsp[-1].u.identifier)->get_simple_name());
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident, (yyvsp[0].attr_list));
}
#line 5867 "built/tmp/cppBison.yxx.c"
    break;

  case 187: /* instance_identifier: KW_CONST instance_identifier  */
#line 1900 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 5876 "built/tmp/cppBison.yxx.c"
    break;

  case 188: /* instance_identifier: KW_VOLATILE instance_identifier  */
#line 1905 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 5885 "built/tmp/cppBison.yxx.c"
    break;

  case 189: /* instance_identifier: '*' optional_attributes instance_identifier  */
#line 1910 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 5894 "built/tmp/cppBison.yxx.c"
    break;

  case 190: /* instance_identifier: '&' optional_attributes instance_identifier  */
#line 1915 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 5903 "built/tmp/cppBison.yxx.c"
    break;

  case 191: /* instance_identifier: ANDAND optional_attributes instance_identifier  */
#line 1920 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 5912 "built/tmp/cppBison.yxx.c"
    break;

  case 192: /* instance_identifier: SCOPING '*' optional_attributes instance_identifier  */
#line 1925 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 5921 "built/tmp/cppBison.yxx.c"
    break;

  case 193: /* instance_identifier: instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 1930 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 5930 "built/tmp/cppBison.yxx.c"
    break;

  case 194: /* instance_identifier: '(' instance_identifier ')'  */
#line 1935 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 5939 "built/tmp/cppBison.yxx.c"
    break;

  case 195: /* $@16: %empty  */
#line 1940 "dtool/src/cppparser/cppBison.yxx"
{
  // Create a scope for this function (in case it is a function)
  CPPScope *scope = new CPPScope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope),
                                 CPPNameComponent(""), V_private);

  // It still needs to be able to pick up any template arguments, if this is
  // a definition for a method template.  Add a fake "using" declaration to
  // accomplish this.
  scope->_using.insert(current_scope);

  push_scope(scope);
}
#line 5956 "built/tmp/cppBison.yxx.c"
    break;

  case 196: /* instance_identifier: instance_identifier '(' $@16 formal_parameter_list ')' function_post optional_attributes  */
#line 1953 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  if ((yyvsp[-3].u.param_list)->is_parameter_expr() && (yyvsp[-1].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-3].u.param_list));
  }
  else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
  }
}
#line 5974 "built/tmp/cppBison.yxx.c"
    break;

  case 197: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier maybe_trailing_return_type  */
#line 1971 "dtool/src/cppparser/cppBison.yxx"
{
  // This is handled a bit awkwardly right now.  Ideally it'd be wrapped
  // up in the instance_identifier rule, but then more needs to happen in
  // order to avoid shift/reduce conflicts.
  if ((yyvsp[0].u.type) != nullptr) {
    (yyvsp[-1].u.inst_ident)->add_trailing_return_type((yyvsp[0].u.type));
  }
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
}
#line 5988 "built/tmp/cppBison.yxx.c"
    break;

  case 198: /* instance_identifier_and_maybe_trailing_return_type: instance_identifier ':' const_expr  */
#line 1981 "dtool/src/cppparser/cppBison.yxx"
{
  // Bitfield definition.
  (yyvsp[-2].u.inst_ident)->_bit_width = (yyvsp[0].u.expr);
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
#line 5998 "built/tmp/cppBison.yxx.c"
    break;

  case 199: /* maybe_trailing_return_type: empty  */
#line 1991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = nullptr;
}
#line 6006 "built/tmp/cppBison.yxx.c"
    break;

  case 200: /* maybe_trailing_return_type: POINTSAT predefined_type empty_instance_identifier  */
#line 1995 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6014 "built/tmp/cppBison.yxx.c"
    break;

  case 201: /* maybe_trailing_return_type: POINTSAT KW_CONST predefined_type empty_instance_identifier  */
#line 1999 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 6023 "built/tmp/cppBison.yxx.c"
    break;

  case 202: /* maybe_comma_identifier: empty  */
#line 2008 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = nullptr;
}
#line 6031 "built/tmp/cppBison.yxx.c"
    break;

  case 203: /* maybe_comma_identifier: ',' IDENTIFIER  */
#line 2012 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 6039 "built/tmp/cppBison.yxx.c"
    break;

  case 204: /* function_parameter_list: empty  */
#line 2020 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6047 "built/tmp/cppBison.yxx.c"
    break;

  case 205: /* function_parameter_list: ELLIPSIS  */
#line 2024 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6056 "built/tmp/cppBison.yxx.c"
    break;

  case 206: /* function_parameter_list: function_parameters  */
#line 2029 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6064 "built/tmp/cppBison.yxx.c"
    break;

  case 207: /* function_parameter_list: function_parameters ',' ELLIPSIS  */
#line 2033 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6073 "built/tmp/cppBison.yxx.c"
    break;

  case 208: /* function_parameter_list: function_parameters ELLIPSIS  */
#line 2038 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6082 "built/tmp/cppBison.yxx.c"
    break;

  case 209: /* function_parameters: function_parameter  */
#line 2046 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6091 "built/tmp/cppBison.yxx.c"
    break;

  case 210: /* function_parameters: function_parameters ',' function_parameter  */
#line 2051 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6100 "built/tmp/cppBison.yxx.c"
    break;

  case 211: /* formal_parameter_list: empty  */
#line 2059 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
}
#line 6108 "built/tmp/cppBison.yxx.c"
    break;

  case 212: /* formal_parameter_list: ELLIPSIS  */
#line 2063 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6117 "built/tmp/cppBison.yxx.c"
    break;

  case 213: /* formal_parameter_list: formal_parameters  */
#line 2068 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
#line 6125 "built/tmp/cppBison.yxx.c"
    break;

  case 214: /* formal_parameter_list: formal_parameters ',' ELLIPSIS  */
#line 2072 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6134 "built/tmp/cppBison.yxx.c"
    break;

  case 215: /* formal_parameter_list: formal_parameters ELLIPSIS  */
#line 2077 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
#line 6143 "built/tmp/cppBison.yxx.c"
    break;

  case 216: /* formal_parameters: formal_parameter  */
#line 2085 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6152 "built/tmp/cppBison.yxx.c"
    break;

  case 217: /* formal_parameters: formal_parameters ',' formal_parameter  */
#line 2090 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
#line 6161 "built/tmp/cppBison.yxx.c"
    break;

  case 218: /* template_parameter_maybe_initialize: empty  */
#line 2098 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6169 "built/tmp/cppBison.yxx.c"
    break;

  case 219: /* template_parameter_maybe_initialize: '=' no_angle_bracket_const_expr  */
#line 2102 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6177 "built/tmp/cppBison.yxx.c"
    break;

  case 220: /* maybe_initialize: empty  */
#line 2109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6185 "built/tmp/cppBison.yxx.c"
    break;

  case 221: /* maybe_initialize: '=' const_expr  */
#line 2113 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 6193 "built/tmp/cppBison.yxx.c"
    break;

  case 222: /* maybe_initialize_or_constructor_body: ';'  */
#line 2120 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6201 "built/tmp/cppBison.yxx.c"
    break;

  case 223: /* maybe_initialize_or_constructor_body: '{' code '}'  */
#line 2124 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6209 "built/tmp/cppBison.yxx.c"
    break;

  case 224: /* maybe_initialize_or_constructor_body: ':' constructor_inits '{' code '}'  */
#line 2128 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6217 "built/tmp/cppBison.yxx.c"
    break;

  case 225: /* maybe_initialize_or_constructor_body: '=' KW_DEFAULT ';'  */
#line 2132 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6225 "built/tmp/cppBison.yxx.c"
    break;

  case 226: /* maybe_initialize_or_constructor_body: '=' KW_DELETE ';'  */
#line 2136 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6233 "built/tmp/cppBison.yxx.c"
    break;

  case 227: /* maybe_initialize_or_function_body: ';'  */
#line 2143 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6241 "built/tmp/cppBison.yxx.c"
    break;

  case 228: /* maybe_initialize_or_function_body: '{' code '}'  */
#line 2147 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6249 "built/tmp/cppBison.yxx.c"
    break;

  case 229: /* maybe_initialize_or_function_body: '=' const_expr ';'  */
#line 2151 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 6257 "built/tmp/cppBison.yxx.c"
    break;

  case 230: /* maybe_initialize_or_function_body: '=' KW_DEFAULT ';'  */
#line 2155 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_default());
}
#line 6265 "built/tmp/cppBison.yxx.c"
    break;

  case 231: /* maybe_initialize_or_function_body: '=' KW_DELETE ';'  */
#line 2159 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_delete());
}
#line 6273 "built/tmp/cppBison.yxx.c"
    break;

  case 232: /* maybe_initialize_or_function_body: '=' '{' structure_init '}'  */
#line 2163 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 6281 "built/tmp/cppBison.yxx.c"
    break;

  case 236: /* structure_init_body: const_expr  */
#line 2176 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 6288 "built/tmp/cppBison.yxx.c"
    break;

  case 240: /* function_parameter: optional_attributes type formal_parameter_identifier maybe_initialize  */
#line 2185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6298 "built/tmp/cppBison.yxx.c"
    break;

  case 241: /* function_parameter: optional_attributes KW_CONST type formal_parameter_identifier maybe_initialize  */
#line 2191 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6309 "built/tmp/cppBison.yxx.c"
    break;

  case 242: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type formal_parameter_identifier maybe_initialize  */
#line 2198 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6320 "built/tmp/cppBison.yxx.c"
    break;

  case 243: /* function_parameter: optional_attributes type_pack parameter_pack_identifier maybe_initialize  */
#line 2205 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-3].attr_list));
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6330 "built/tmp/cppBison.yxx.c"
    break;

  case 244: /* function_parameter: optional_attributes KW_CONST type_pack parameter_pack_identifier maybe_initialize  */
#line 2211 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-4].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6341 "built/tmp/cppBison.yxx.c"
    break;

  case 245: /* function_parameter: optional_attributes KW_CONST KW_REGISTER type_pack parameter_pack_identifier maybe_initialize  */
#line 2218 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-1].u.inst_ident)->add_attributes((yyvsp[-5].attr_list));
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6352 "built/tmp/cppBison.yxx.c"
    break;

  case 246: /* function_parameter: optional_attributes KW_REGISTER function_parameter  */
#line 2225 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
  (yyval.u.instance)->_attributes.add_attributes_from((yyvsp[-2].attr_list));
}
#line 6361 "built/tmp/cppBison.yxx.c"
    break;

  case 247: /* formal_parameter: function_parameter  */
#line 2237 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.instance) = (yyvsp[0].u.instance);
}
#line 6369 "built/tmp/cppBison.yxx.c"
    break;

  case 248: /* formal_parameter: formal_const_expr  */
#line 2241 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
#line 6380 "built/tmp/cppBison.yxx.c"
    break;

  case 249: /* not_paren_formal_parameter_identifier: empty  */
#line 2251 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6388 "built/tmp/cppBison.yxx.c"
    break;

  case 250: /* not_paren_formal_parameter_identifier: name_no_final optional_attributes  */
#line 2255 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6396 "built/tmp/cppBison.yxx.c"
    break;

  case 251: /* not_paren_formal_parameter_identifier: KW_CONST not_paren_formal_parameter_identifier  */
#line 2259 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6405 "built/tmp/cppBison.yxx.c"
    break;

  case 252: /* not_paren_formal_parameter_identifier: KW_VOLATILE not_paren_formal_parameter_identifier  */
#line 2264 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6414 "built/tmp/cppBison.yxx.c"
    break;

  case 253: /* not_paren_formal_parameter_identifier: '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2269 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6423 "built/tmp/cppBison.yxx.c"
    break;

  case 254: /* not_paren_formal_parameter_identifier: '&' optional_attributes not_paren_formal_parameter_identifier  */
#line 2274 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6432 "built/tmp/cppBison.yxx.c"
    break;

  case 255: /* not_paren_formal_parameter_identifier: ANDAND optional_attributes not_paren_formal_parameter_identifier  */
#line 2279 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6441 "built/tmp/cppBison.yxx.c"
    break;

  case 256: /* not_paren_formal_parameter_identifier: SCOPING '*' optional_attributes not_paren_formal_parameter_identifier  */
#line 2284 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6450 "built/tmp/cppBison.yxx.c"
    break;

  case 257: /* not_paren_formal_parameter_identifier: not_paren_formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2289 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6459 "built/tmp/cppBison.yxx.c"
    break;

  case 258: /* formal_parameter_identifier: empty  */
#line 2297 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6467 "built/tmp/cppBison.yxx.c"
    break;

  case 259: /* formal_parameter_identifier: name_no_final optional_attributes  */
#line 2301 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
}
#line 6475 "built/tmp/cppBison.yxx.c"
    break;

  case 260: /* formal_parameter_identifier: KW_CONST formal_parameter_identifier  */
#line 2305 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6484 "built/tmp/cppBison.yxx.c"
    break;

  case 261: /* formal_parameter_identifier: KW_VOLATILE formal_parameter_identifier  */
#line 2310 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6493 "built/tmp/cppBison.yxx.c"
    break;

  case 262: /* formal_parameter_identifier: '*' optional_attributes formal_parameter_identifier  */
#line 2315 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6502 "built/tmp/cppBison.yxx.c"
    break;

  case 263: /* formal_parameter_identifier: '&' optional_attributes formal_parameter_identifier  */
#line 2320 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6511 "built/tmp/cppBison.yxx.c"
    break;

  case 264: /* formal_parameter_identifier: ANDAND optional_attributes formal_parameter_identifier  */
#line 2325 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6520 "built/tmp/cppBison.yxx.c"
    break;

  case 265: /* formal_parameter_identifier: SCOPING '*' optional_attributes formal_parameter_identifier  */
#line 2330 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6529 "built/tmp/cppBison.yxx.c"
    break;

  case 266: /* formal_parameter_identifier: formal_parameter_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2335 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6538 "built/tmp/cppBison.yxx.c"
    break;

  case 267: /* formal_parameter_identifier: '(' formal_parameter_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2340 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6548 "built/tmp/cppBison.yxx.c"
    break;

  case 268: /* formal_parameter_identifier: '(' formal_parameter_identifier ')'  */
#line 2346 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6557 "built/tmp/cppBison.yxx.c"
    break;

  case 269: /* parameter_pack_identifier: ELLIPSIS  */
#line 2354 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6566 "built/tmp/cppBison.yxx.c"
    break;

  case 270: /* parameter_pack_identifier: ELLIPSIS name optional_attributes  */
#line 2359 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6575 "built/tmp/cppBison.yxx.c"
    break;

  case 271: /* parameter_pack_identifier: KW_CONST parameter_pack_identifier  */
#line 2364 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6584 "built/tmp/cppBison.yxx.c"
    break;

  case 272: /* parameter_pack_identifier: KW_VOLATILE parameter_pack_identifier  */
#line 2369 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6593 "built/tmp/cppBison.yxx.c"
    break;

  case 273: /* parameter_pack_identifier: '*' optional_attributes parameter_pack_identifier  */
#line 2374 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6602 "built/tmp/cppBison.yxx.c"
    break;

  case 274: /* parameter_pack_identifier: '&' optional_attributes parameter_pack_identifier  */
#line 2379 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6611 "built/tmp/cppBison.yxx.c"
    break;

  case 275: /* parameter_pack_identifier: ANDAND optional_attributes parameter_pack_identifier  */
#line 2384 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6620 "built/tmp/cppBison.yxx.c"
    break;

  case 276: /* parameter_pack_identifier: SCOPING '*' optional_attributes parameter_pack_identifier  */
#line 2389 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6629 "built/tmp/cppBison.yxx.c"
    break;

  case 277: /* parameter_pack_identifier: parameter_pack_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2394 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6638 "built/tmp/cppBison.yxx.c"
    break;

  case 278: /* parameter_pack_identifier: '(' parameter_pack_identifier ')' '(' function_parameter_list ')' function_post optional_attributes  */
#line 2399 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-6].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-3].u.param_list), (yyvsp[-1].u.integer), nullptr, (yyvsp[0].attr_list));
}
#line 6648 "built/tmp/cppBison.yxx.c"
    break;

  case 279: /* parameter_pack_identifier: '(' parameter_pack_identifier ')'  */
#line 2405 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
#line 6657 "built/tmp/cppBison.yxx.c"
    break;

  case 280: /* not_paren_empty_instance_identifier: empty  */
#line 2413 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6665 "built/tmp/cppBison.yxx.c"
    break;

  case 281: /* not_paren_empty_instance_identifier: ELLIPSIS  */
#line 2417 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6674 "built/tmp/cppBison.yxx.c"
    break;

  case 282: /* not_paren_empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2422 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6683 "built/tmp/cppBison.yxx.c"
    break;

  case 283: /* not_paren_empty_instance_identifier: KW_CONST not_paren_empty_instance_identifier  */
#line 2427 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6692 "built/tmp/cppBison.yxx.c"
    break;

  case 284: /* not_paren_empty_instance_identifier: KW_VOLATILE not_paren_empty_instance_identifier  */
#line 2432 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6701 "built/tmp/cppBison.yxx.c"
    break;

  case 285: /* not_paren_empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2437 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6710 "built/tmp/cppBison.yxx.c"
    break;

  case 286: /* not_paren_empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2442 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6719 "built/tmp/cppBison.yxx.c"
    break;

  case 287: /* not_paren_empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2447 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6728 "built/tmp/cppBison.yxx.c"
    break;

  case 288: /* not_paren_empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2452 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6737 "built/tmp/cppBison.yxx.c"
    break;

  case 289: /* not_paren_empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2457 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6746 "built/tmp/cppBison.yxx.c"
    break;

  case 290: /* empty_instance_identifier: empty  */
#line 2465 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
}
#line 6754 "built/tmp/cppBison.yxx.c"
    break;

  case 291: /* empty_instance_identifier: ELLIPSIS  */
#line 2469 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->_packed = true;
}
#line 6763 "built/tmp/cppBison.yxx.c"
    break;

  case 292: /* empty_instance_identifier: ELLIPSIS name optional_attributes  */
#line 2474 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[-1].u.identifier), (yyvsp[0].attr_list));
  (yyval.u.inst_ident)->_packed = true;
}
#line 6772 "built/tmp/cppBison.yxx.c"
    break;

  case 293: /* empty_instance_identifier: KW_CONST empty_instance_identifier  */
#line 2479 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
#line 6781 "built/tmp/cppBison.yxx.c"
    break;

  case 294: /* empty_instance_identifier: KW_VOLATILE empty_instance_identifier  */
#line 2484 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_volatile);
}
#line 6790 "built/tmp/cppBison.yxx.c"
    break;

  case 295: /* empty_instance_identifier: '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2489 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-1].attr_list));
}
#line 6799 "built/tmp/cppBison.yxx.c"
    break;

  case 296: /* empty_instance_identifier: '&' optional_attributes not_paren_empty_instance_identifier  */
#line 2494 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-1].attr_list));
}
#line 6808 "built/tmp/cppBison.yxx.c"
    break;

  case 297: /* empty_instance_identifier: ANDAND optional_attributes not_paren_empty_instance_identifier  */
#line 2499 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-1].attr_list));
}
#line 6817 "built/tmp/cppBison.yxx.c"
    break;

  case 298: /* empty_instance_identifier: SCOPING '*' optional_attributes not_paren_empty_instance_identifier  */
#line 2504 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-3].u.identifier), (yyvsp[-1].attr_list));
}
#line 6826 "built/tmp/cppBison.yxx.c"
    break;

  case 299: /* empty_instance_identifier: not_paren_empty_instance_identifier '[' optional_const_expr ']' optional_attributes  */
#line 2509 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-4].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-2].u.expr), (yyvsp[0].attr_list));
}
#line 6835 "built/tmp/cppBison.yxx.c"
    break;

  case 300: /* empty_instance_identifier: '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2514 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = new CPPInstanceIdentifier(nullptr);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6845 "built/tmp/cppBison.yxx.c"
    break;

  case 301: /* empty_instance_identifier: '(' '*' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2520 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6856 "built/tmp/cppBison.yxx.c"
    break;

  case 302: /* empty_instance_identifier: '(' '&' optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2527 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6867 "built/tmp/cppBison.yxx.c"
    break;

  case 303: /* empty_instance_identifier: '(' ANDAND optional_attributes not_paren_empty_instance_identifier ')' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type  */
#line 2534 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.inst_ident) = (yyvsp[-7].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_rvalue_reference, (yyvsp[-8].attr_list));
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-4].u.param_list), (yyvsp[-2].u.integer), (yyvsp[0].u.type), (yyvsp[-1].attr_list));
}
#line 6878 "built/tmp/cppBison.yxx.c"
    break;

  case 304: /* type: simple_type  */
#line 2544 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 6886 "built/tmp/cppBison.yxx.c"
    break;

  case 305: /* type: TYPENAME_IDENTIFIER  */
#line 2548 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 6898 "built/tmp/cppBison.yxx.c"
    break;

  case 306: /* type: KW_TYPENAME name  */
#line 2556 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 6906 "built/tmp/cppBison.yxx.c"
    break;

  case 307: /* type: anonymous_struct  */
#line 2560 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6914 "built/tmp/cppBison.yxx.c"
    break;

  case 308: /* type: named_struct  */
#line 2564 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 6922 "built/tmp/cppBison.yxx.c"
    break;

  case 309: /* type: enum  */
#line 2568 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
#line 6930 "built/tmp/cppBison.yxx.c"
    break;

  case 310: /* type: struct_keyword optional_attributes name  */
#line 2572 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6950 "built/tmp/cppBison.yxx.c"
    break;

  case 311: /* type: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2588 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 6970 "built/tmp/cppBison.yxx.c"
    break;

  case 312: /* type: KW_DECLTYPE '(' const_expr ')'  */
#line 2604 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 6983 "built/tmp/cppBison.yxx.c"
    break;

  case 313: /* type: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2613 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 6991 "built/tmp/cppBison.yxx.c"
    break;

  case 314: /* type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2617 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7005 "built/tmp/cppBison.yxx.c"
    break;

  case 315: /* type: KW_AUTO  */
#line 2627 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7013 "built/tmp/cppBison.yxx.c"
    break;

  case 316: /* type_pack: TYPEPACK_IDENTIFIER  */
#line 2634 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7025 "built/tmp/cppBison.yxx.c"
    break;

  case 317: /* type_decl: simple_type  */
#line 2645 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7033 "built/tmp/cppBison.yxx.c"
    break;

  case 318: /* type_decl: TYPENAME_IDENTIFIER  */
#line 2649 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.decl) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.decl) != nullptr);
}
#line 7045 "built/tmp/cppBison.yxx.c"
    break;

  case 319: /* type_decl: KW_TYPENAME name  */
#line 2657 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7053 "built/tmp/cppBison.yxx.c"
    break;

  case 320: /* type_decl: anonymous_struct  */
#line 2661 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
#line 7061 "built/tmp/cppBison.yxx.c"
    break;

  case 321: /* type_decl: named_struct  */
#line 2665 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
#line 7069 "built/tmp/cppBison.yxx.c"
    break;

  case 322: /* type_decl: enum  */
#line 2669 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
#line 7077 "built/tmp/cppBison.yxx.c"
    break;

  case 323: /* type_decl: struct_keyword optional_attributes name  */
#line 2673 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7097 "built/tmp/cppBison.yxx.c"
    break;

  case 324: /* type_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2689 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[-2].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), current_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[-2].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7117 "built/tmp/cppBison.yxx.c"
    break;

  case 325: /* type_decl: enum_keyword optional_attributes name  */
#line 2705 "dtool/src/cppparser/cppBison.yxx"
{
  yywarning(string("C++ does not permit forward declaration of untyped enum ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));

  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
#line 7139 "built/tmp/cppBison.yxx.c"
    break;

  case 326: /* type_decl: KW_DECLTYPE '(' const_expr ')'  */
#line 2723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.decl) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7152 "built/tmp/cppBison.yxx.c"
    break;

  case 327: /* type_decl: KW_DECLTYPE '(' KW_AUTO ')'  */
#line 2732 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7160 "built/tmp/cppBison.yxx.c"
    break;

  case 328: /* type_decl: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2736 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.decl) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.decl) = enum_type->get_underlying_type();
  }
}
#line 7174 "built/tmp/cppBison.yxx.c"
    break;

  case 329: /* type_decl: KW_AUTO  */
#line 2746 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7182 "built/tmp/cppBison.yxx.c"
    break;

  case 330: /* predefined_type: simple_type  */
#line 2753 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7190 "built/tmp/cppBison.yxx.c"
    break;

  case 331: /* predefined_type: TYPENAME_IDENTIFIER  */
#line 2757 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if ((yyval.u.type) == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  }
  assert((yyval.u.type) != nullptr);
}
#line 7202 "built/tmp/cppBison.yxx.c"
    break;

  case 332: /* predefined_type: KW_TYPENAME name  */
#line 2765 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 7210 "built/tmp/cppBison.yxx.c"
    break;

  case 333: /* predefined_type: struct_keyword optional_attributes name  */
#line 2769 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7230 "built/tmp/cppBison.yxx.c"
    break;

  case 334: /* predefined_type: enum_keyword optional_attributes name  */
#line 2785 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != nullptr) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et =
      CPPType::new_type(new CPPExtensionType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list)))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != nullptr) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
#line 7250 "built/tmp/cppBison.yxx.c"
    break;

  case 335: /* predefined_type: KW_DECLTYPE '(' const_expr ')'  */
#line 2801 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[-1].u.expr)->determine_type();
  if ((yyval.u.type) == nullptr) {
    stringstream str;
    str << *(yyvsp[-1].u.expr);
    yyerror("could not determine type of " + str.str(), (yylsp[-1]));
  }
}
#line 7263 "built/tmp/cppBison.yxx.c"
    break;

  case 336: /* predefined_type: KW_UNDERLYING_TYPE '(' full_type ')'  */
#line 2810 "dtool/src/cppparser/cppBison.yxx"
{
  CPPEnumType *enum_type = (yyvsp[-1].u.type)->as_enum_type();
  if (enum_type == nullptr) {
    yyerror("an enumeration type is required", (yylsp[-1]));
    (yyval.u.type) = (yyvsp[-1].u.type);
  } else {
    (yyval.u.type) = enum_type->get_underlying_type();
  }
}
#line 7277 "built/tmp/cppBison.yxx.c"
    break;

  case 337: /* predefined_type: KW_AUTO  */
#line 2820 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_auto));
}
#line 7285 "built/tmp/cppBison.yxx.c"
    break;

  case 338: /* var_type_decl: type_decl  */
#line 2827 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.decl) = (yyvsp[0].u.decl);
}
#line 7293 "built/tmp/cppBison.yxx.c"
    break;

  case 339: /* var_type_decl: IDENTIFIER  */
#line 2831 "dtool/src/cppparser/cppBison.yxx"
{
  yyerror(string("unknown type '") + (yyvsp[0].u.identifier)->get_fully_scoped_name() + "'", (yylsp[0]));

  (yyval.u.decl) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
#line 7303 "built/tmp/cppBison.yxx.c"
    break;

  case 340: /* full_type: type empty_instance_identifier  */
#line 2839 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7311 "built/tmp/cppBison.yxx.c"
    break;

  case 341: /* full_type: KW_CONST type empty_instance_identifier  */
#line 2843 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7320 "built/tmp/cppBison.yxx.c"
    break;

  case 342: /* full_type: type_pack empty_instance_identifier  */
#line 2848 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7328 "built/tmp/cppBison.yxx.c"
    break;

  case 343: /* full_type: KW_CONST type_pack empty_instance_identifier  */
#line 2852 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.type) = (yyvsp[0].u.inst_ident)->unroll_type((yyvsp[-1].u.type));
}
#line 7337 "built/tmp/cppBison.yxx.c"
    break;

  case 344: /* $@17: %empty  */
#line 2860 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), nullptr, current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7355 "built/tmp/cppBison.yxx.c"
    break;

  case 345: /* anonymous_struct: struct_keyword optional_attributes '{' $@17 cpp '}'  */
#line 2874 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7366 "built/tmp/cppBison.yxx.c"
    break;

  case 346: /* $@18: %empty  */
#line 2884 "dtool/src/cppparser/cppBison.yxx"
{
  CPPVisibility starting_vis =
  ((yyvsp[-2].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);

  push_scope(new_scope);
  push_struct(st);
}
#line 7390 "built/tmp/cppBison.yxx.c"
    break;

  case 347: /* named_struct: struct_keyword optional_attributes name_no_final $@18 maybe_final maybe_class_derivation '{' cpp '}'  */
#line 2904 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
#line 7401 "built/tmp/cppBison.yxx.c"
    break;

  case 349: /* maybe_final: KW_FINAL  */
#line 2915 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->_final = true;
}
#line 7409 "built/tmp/cppBison.yxx.c"
    break;

  case 354: /* base_specification: class_derivation_name  */
#line 2932 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_unknown, false);
}
#line 7417 "built/tmp/cppBison.yxx.c"
    break;

  case 355: /* base_specification: KW_PUBLIC class_derivation_name  */
#line 2936 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
#line 7425 "built/tmp/cppBison.yxx.c"
    break;

  case 356: /* base_specification: KW_PROTECTED class_derivation_name  */
#line 2940 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
#line 7433 "built/tmp/cppBison.yxx.c"
    break;

  case 357: /* base_specification: KW_PRIVATE class_derivation_name  */
#line 2944 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
#line 7441 "built/tmp/cppBison.yxx.c"
    break;

  case 358: /* base_specification: KW_VIRTUAL KW_PUBLIC class_derivation_name  */
#line 2948 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7449 "built/tmp/cppBison.yxx.c"
    break;

  case 359: /* base_specification: KW_VIRTUAL KW_PROTECTED class_derivation_name  */
#line 2952 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7457 "built/tmp/cppBison.yxx.c"
    break;

  case 360: /* base_specification: KW_VIRTUAL KW_PRIVATE class_derivation_name  */
#line 2956 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7465 "built/tmp/cppBison.yxx.c"
    break;

  case 361: /* base_specification: KW_PUBLIC KW_VIRTUAL class_derivation_name  */
#line 2960 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
#line 7473 "built/tmp/cppBison.yxx.c"
    break;

  case 362: /* base_specification: KW_PROTECTED KW_VIRTUAL class_derivation_name  */
#line 2964 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
#line 7481 "built/tmp/cppBison.yxx.c"
    break;

  case 363: /* base_specification: KW_PRIVATE KW_VIRTUAL class_derivation_name  */
#line 2968 "dtool/src/cppparser/cppBison.yxx"
{
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
#line 7489 "built/tmp/cppBison.yxx.c"
    break;

  case 364: /* enum: enum_decl '{' enum_body '}'  */
#line 2975 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.enum_type) = current_enum;
  current_enum = nullptr;
}
#line 7498 "built/tmp/cppBison.yxx.c"
    break;

  case 365: /* enum_decl: enum_keyword optional_attributes ':' enum_element_type  */
#line 2983 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-3].u.extension_enum), nullptr, (yyvsp[0].u.type), current_scope, nullptr, (yylsp[-3]).file, (yyvsp[-2].attr_list));
}
#line 7506 "built/tmp/cppBison.yxx.c"
    break;

  case 366: /* enum_decl: enum_keyword optional_attributes  */
#line 2987 "dtool/src/cppparser/cppBison.yxx"
{
  current_enum = new CPPEnumType((yyvsp[-1].u.extension_enum), nullptr, current_scope, nullptr, (yylsp[-1]).file, (yyvsp[0].attr_list));
}
#line 7514 "built/tmp/cppBison.yxx.c"
    break;

  case 367: /* enum_decl: enum_keyword optional_attributes name_no_final ':' enum_element_type  */
#line 2991 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[-2].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-4].u.extension_enum), (yyvsp[-2].u.identifier), (yyvsp[0].u.type), current_scope, new_scope, (yylsp[-4]).file, (yyvsp[-3].attr_list));
}
#line 7523 "built/tmp/cppBison.yxx.c"
    break;

  case 368: /* enum_decl: enum_keyword optional_attributes name_no_final  */
#line 2996 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *new_scope = new CPPScope(current_scope, (yyvsp[0].u.identifier)->_names.back(), V_public);
  current_enum = new CPPEnumType((yyvsp[-2].u.extension_enum), (yyvsp[0].u.identifier), current_scope, new_scope, (yylsp[-2]).file, (yyvsp[-1].attr_list));
}
#line 7532 "built/tmp/cppBison.yxx.c"
    break;

  case 369: /* enum_element_type: simple_int_type  */
#line 3004 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
#line 7540 "built/tmp/cppBison.yxx.c"
    break;

  case 370: /* enum_element_type: TYPENAME_IDENTIFIER  */
#line 3008 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
}
#line 7548 "built/tmp/cppBison.yxx.c"
    break;

  case 372: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes ','  */
#line 3016 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-2]), (yyvsp[-1].attr_list));
}
#line 7557 "built/tmp/cppBison.yxx.c"
    break;

  case 373: /* enum_body_trailing_comma: enum_body_trailing_comma name optional_attributes '=' const_expr ','  */
#line 3021 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-4].u.identifier)->get_simple_name(), (yyvsp[-1].u.expr), current_lexer, (yylsp[-4]), (yyvsp[-3].attr_list));
}
#line 7566 "built/tmp/cppBison.yxx.c"
    break;

  case 375: /* enum_body: enum_body_trailing_comma name optional_attributes  */
#line 3029 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-1].u.identifier)->get_simple_name(), nullptr, current_lexer, (yylsp[-1]), (yyvsp[0].attr_list));
}
#line 7575 "built/tmp/cppBison.yxx.c"
    break;

  case 376: /* enum_body: enum_body_trailing_comma name optional_attributes '=' const_expr  */
#line 3034 "dtool/src/cppparser/cppBison.yxx"
{
  assert(current_enum != nullptr);
  current_enum->add_element((yyvsp[-3].u.identifier)->get_simple_name(), (yyvsp[0].u.expr), current_lexer, (yylsp[-3]), (yyvsp[-2].attr_list));
}
#line 7584 "built/tmp/cppBison.yxx.c"
    break;

  case 377: /* enum_keyword: KW_ENUM  */
#line 3042 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
#line 7592 "built/tmp/cppBison.yxx.c"
    break;

  case 378: /* enum_keyword: KW_ENUM KW_CLASS  */
#line 3046 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_class;
}
#line 7600 "built/tmp/cppBison.yxx.c"
    break;

  case 379: /* enum_keyword: KW_ENUM KW_STRUCT  */
#line 3050 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_enum_struct;
}
#line 7608 "built/tmp/cppBison.yxx.c"
    break;

  case 380: /* struct_keyword: KW_CLASS  */
#line 3057 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
#line 7616 "built/tmp/cppBison.yxx.c"
    break;

  case 381: /* struct_keyword: KW_STRUCT  */
#line 3061 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
#line 7624 "built/tmp/cppBison.yxx.c"
    break;

  case 382: /* struct_keyword: KW_UNION  */
#line 3065 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
#line 7632 "built/tmp/cppBison.yxx.c"
    break;

  case 383: /* $@19: %empty  */
#line 3072 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-3]).file, (yyvsp[-2].attr_list));
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-3]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7654 "built/tmp/cppBison.yxx.c"
    break;

  case 384: /* namespace_declaration: KW_NAMESPACE optional_attributes name '{' $@19 cpp '}'  */
#line 3090 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7662 "built/tmp/cppBison.yxx.c"
    break;

  case 385: /* $@20: %empty  */
#line 3094 "dtool/src/cppparser/cppBison.yxx"
{
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == nullptr) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope =
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == nullptr) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  nspace->_is_inline = true;
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
#line 7685 "built/tmp/cppBison.yxx.c"
    break;

  case 386: /* namespace_declaration: KW_INLINE KW_NAMESPACE name '{' $@20 cpp '}'  */
#line 3113 "dtool/src/cppparser/cppBison.yxx"
{
  pop_scope();
}
#line 7693 "built/tmp/cppBison.yxx.c"
    break;

  case 389: /* using_declaration: KW_USING name ';'  */
#line 3122 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7703 "built/tmp/cppBison.yxx.c"
    break;

  case 390: /* using_declaration: KW_USING name optional_attributes '=' full_type ';'  */
#line 3128 "dtool/src/cppparser/cppBison.yxx"
{
  // This is really just an alternative way to declare a typedef.
  CPPTypedefType *typedef_type = new CPPTypedefType((yyvsp[-1].u.type), (yyvsp[-4].u.identifier), current_scope, (yyvsp[-3].attr_list));
  typedef_type->_using = true;
  current_scope->add_declaration(CPPType::new_type(typedef_type), global_scope, current_lexer, (yylsp[-5]));
}
#line 7714 "built/tmp/cppBison.yxx.c"
    break;

  case 391: /* using_declaration: KW_USING KW_NAMESPACE name ';'  */
#line 3135 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), true, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7724 "built/tmp/cppBison.yxx.c"
    break;

  case 392: /* using_declaration: KW_USING KW_ENUM name ';'  */
#line 3141 "dtool/src/cppparser/cppBison.yxx"
{
  CPPUsing *using_decl = new CPPUsing((yyvsp[-1].u.identifier), false, (yylsp[-3]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-3]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
#line 7734 "built/tmp/cppBison.yxx.c"
    break;

  case 396: /* simple_int_type: KW_BOOL  */
#line 3156 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
#line 7742 "built/tmp/cppBison.yxx.c"
    break;

  case 397: /* simple_int_type: KW_CHAR  */
#line 3160 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
#line 7750 "built/tmp/cppBison.yxx.c"
    break;

  case 398: /* simple_int_type: KW_WCHAR_T  */
#line 3164 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
#line 7758 "built/tmp/cppBison.yxx.c"
    break;

  case 399: /* simple_int_type: KW_CHAR8_T  */
#line 3168 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char8_t);
}
#line 7766 "built/tmp/cppBison.yxx.c"
    break;

  case 400: /* simple_int_type: KW_CHAR16_T  */
#line 3172 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char16_t);
}
#line 7774 "built/tmp/cppBison.yxx.c"
    break;

  case 401: /* simple_int_type: KW_CHAR32_T  */
#line 3176 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char32_t);
}
#line 7782 "built/tmp/cppBison.yxx.c"
    break;

  case 402: /* simple_int_type: KW_SHORT  */
#line 3180 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
#line 7791 "built/tmp/cppBison.yxx.c"
    break;

  case 403: /* simple_int_type: KW_LONG  */
#line 3185 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
#line 7800 "built/tmp/cppBison.yxx.c"
    break;

  case 404: /* simple_int_type: KW_UNSIGNED  */
#line 3190 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
#line 7809 "built/tmp/cppBison.yxx.c"
    break;

  case 405: /* simple_int_type: KW_SIGNED  */
#line 3195 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
#line 7818 "built/tmp/cppBison.yxx.c"
    break;

  case 406: /* simple_int_type: KW_INT  */
#line 3200 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
#line 7826 "built/tmp/cppBison.yxx.c"
    break;

  case 407: /* simple_int_type: KW_SHORT simple_int_type  */
#line 3204 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
#line 7835 "built/tmp/cppBison.yxx.c"
    break;

  case 408: /* simple_int_type: KW_LONG simple_int_type  */
#line 3209 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
#line 7848 "built/tmp/cppBison.yxx.c"
    break;

  case 409: /* simple_int_type: KW_UNSIGNED simple_int_type  */
#line 3218 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
#line 7857 "built/tmp/cppBison.yxx.c"
    break;

  case 410: /* simple_int_type: KW_SIGNED simple_int_type  */
#line 3223 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
#line 7866 "built/tmp/cppBison.yxx.c"
    break;

  case 411: /* simple_float_type: KW_FLOAT  */
#line 3231 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
#line 7874 "built/tmp/cppBison.yxx.c"
    break;

  case 412: /* simple_float_type: KW_DOUBLE  */
#line 3235 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
#line 7882 "built/tmp/cppBison.yxx.c"
    break;

  case 413: /* simple_float_type: KW_LONG KW_DOUBLE  */
#line 3239 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
#line 7891 "built/tmp/cppBison.yxx.c"
    break;

  case 414: /* simple_void_type: KW_VOID  */
#line 3247 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
#line 7899 "built/tmp/cppBison.yxx.c"
    break;

  case 415: /* $@21: %empty  */
#line 3256 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = false;
}
#line 7907 "built/tmp/cppBison.yxx.c"
    break;

  case 416: /* code: $@21 code_block  */
#line 3260 "dtool/src/cppparser/cppBison.yxx"
{
  current_lexer->_resolve_identifiers = true;
}
#line 7915 "built/tmp/cppBison.yxx.c"
    break;

  case 531: /* element: KW_WHILE  */
#line 3305 "dtool/src/cppparser/cppBison.yxx"
{
}
#line 7922 "built/tmp/cppBison.yxx.c"
    break;

  case 555: /* optional_const_expr: empty  */
#line 3314 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7930 "built/tmp/cppBison.yxx.c"
    break;

  case 556: /* optional_const_expr: const_expr  */
#line 3318 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7938 "built/tmp/cppBison.yxx.c"
    break;

  case 557: /* optional_const_expr_comma: empty  */
#line 3325 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = nullptr;
}
#line 7946 "built/tmp/cppBison.yxx.c"
    break;

  case 558: /* optional_const_expr_comma: const_expr_comma  */
#line 3329 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7954 "built/tmp/cppBison.yxx.c"
    break;

  case 559: /* const_expr_comma: const_expr  */
#line 3336 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7962 "built/tmp/cppBison.yxx.c"
    break;

  case 560: /* const_expr_comma: const_expr_comma ',' const_expr  */
#line 3340 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 7970 "built/tmp/cppBison.yxx.c"
    break;

  case 561: /* no_angle_bracket_const_expr: const_operand  */
#line 3347 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 7978 "built/tmp/cppBison.yxx.c"
    break;

  case 562: /* no_angle_bracket_const_expr: '(' full_type ')' no_angle_bracket_const_expr  */
#line 3351 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 7986 "built/tmp/cppBison.yxx.c"
    break;

  case 563: /* no_angle_bracket_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3355 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 7994 "built/tmp/cppBison.yxx.c"
    break;

  case 564: /* no_angle_bracket_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3359 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8002 "built/tmp/cppBison.yxx.c"
    break;

  case 565: /* no_angle_bracket_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3363 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8010 "built/tmp/cppBison.yxx.c"
    break;

  case 566: /* no_angle_bracket_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3367 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8018 "built/tmp/cppBison.yxx.c"
    break;

  case 567: /* no_angle_bracket_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3371 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8026 "built/tmp/cppBison.yxx.c"
    break;

  case 568: /* no_angle_bracket_const_expr: KW_SIZEOF no_angle_bracket_const_expr  */
#line 3375 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8034 "built/tmp/cppBison.yxx.c"
    break;

  case 569: /* no_angle_bracket_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3379 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8042 "built/tmp/cppBison.yxx.c"
    break;

  case 570: /* no_angle_bracket_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3383 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8050 "built/tmp/cppBison.yxx.c"
    break;

  case 571: /* no_angle_bracket_const_expr: '!' no_angle_bracket_const_expr  */
#line 3387 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8058 "built/tmp/cppBison.yxx.c"
    break;

  case 572: /* no_angle_bracket_const_expr: '~' no_angle_bracket_const_expr  */
#line 3391 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8066 "built/tmp/cppBison.yxx.c"
    break;

  case 573: /* no_angle_bracket_const_expr: '-' no_angle_bracket_const_expr  */
#line 3395 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8074 "built/tmp/cppBison.yxx.c"
    break;

  case 574: /* no_angle_bracket_const_expr: '+' no_angle_bracket_const_expr  */
#line 3399 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8082 "built/tmp/cppBison.yxx.c"
    break;

  case 575: /* no_angle_bracket_const_expr: '*' no_angle_bracket_const_expr  */
#line 3403 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8090 "built/tmp/cppBison.yxx.c"
    break;

  case 576: /* no_angle_bracket_const_expr: '&' no_angle_bracket_const_expr  */
#line 3407 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8098 "built/tmp/cppBison.yxx.c"
    break;

  case 577: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '*' no_angle_bracket_const_expr  */
#line 3411 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8106 "built/tmp/cppBison.yxx.c"
    break;

  case 578: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '/' no_angle_bracket_const_expr  */
#line 3415 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8114 "built/tmp/cppBison.yxx.c"
    break;

  case 579: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '%' no_angle_bracket_const_expr  */
#line 3419 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8122 "built/tmp/cppBison.yxx.c"
    break;

  case 580: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '+' no_angle_bracket_const_expr  */
#line 3423 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8130 "built/tmp/cppBison.yxx.c"
    break;

  case 581: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '-' no_angle_bracket_const_expr  */
#line 3427 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8138 "built/tmp/cppBison.yxx.c"
    break;

  case 582: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '|' no_angle_bracket_const_expr  */
#line 3431 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8146 "built/tmp/cppBison.yxx.c"
    break;

  case 583: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '^' no_angle_bracket_const_expr  */
#line 3435 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8154 "built/tmp/cppBison.yxx.c"
    break;

  case 584: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '&' no_angle_bracket_const_expr  */
#line 3439 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8162 "built/tmp/cppBison.yxx.c"
    break;

  case 585: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr OROR no_angle_bracket_const_expr  */
#line 3443 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8170 "built/tmp/cppBison.yxx.c"
    break;

  case 586: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr ANDAND no_angle_bracket_const_expr  */
#line 3447 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8178 "built/tmp/cppBison.yxx.c"
    break;

  case 587: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr EQCOMPARE no_angle_bracket_const_expr  */
#line 3451 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8186 "built/tmp/cppBison.yxx.c"
    break;

  case 588: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr NECOMPARE no_angle_bracket_const_expr  */
#line 3455 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8194 "built/tmp/cppBison.yxx.c"
    break;

  case 589: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LECOMPARE no_angle_bracket_const_expr  */
#line 3459 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8202 "built/tmp/cppBison.yxx.c"
    break;

  case 590: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr GECOMPARE no_angle_bracket_const_expr  */
#line 3463 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8210 "built/tmp/cppBison.yxx.c"
    break;

  case 591: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr SPACESHIP no_angle_bracket_const_expr  */
#line 3467 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8218 "built/tmp/cppBison.yxx.c"
    break;

  case 592: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr LSHIFT no_angle_bracket_const_expr  */
#line 3471 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8226 "built/tmp/cppBison.yxx.c"
    break;

  case 593: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr RSHIFT no_angle_bracket_const_expr  */
#line 3475 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8234 "built/tmp/cppBison.yxx.c"
    break;

  case 594: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '?' no_angle_bracket_const_expr ':' no_angle_bracket_const_expr  */
#line 3479 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8242 "built/tmp/cppBison.yxx.c"
    break;

  case 595: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '[' const_expr ']'  */
#line 3483 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8250 "built/tmp/cppBison.yxx.c"
    break;

  case 596: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' const_expr_comma ')'  */
#line 3487 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8258 "built/tmp/cppBison.yxx.c"
    break;

  case 597: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '(' ')'  */
#line 3491 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8266 "built/tmp/cppBison.yxx.c"
    break;

  case 598: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr '.' name  */
#line 3495 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8274 "built/tmp/cppBison.yxx.c"
    break;

  case 599: /* no_angle_bracket_const_expr: no_angle_bracket_const_expr POINTSAT no_angle_bracket_const_expr  */
#line 3499 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8282 "built/tmp/cppBison.yxx.c"
    break;

  case 600: /* no_angle_bracket_const_expr: '(' const_expr_comma ')'  */
#line 3503 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8290 "built/tmp/cppBison.yxx.c"
    break;

  case 601: /* const_expr: const_operand  */
#line 3511 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8298 "built/tmp/cppBison.yxx.c"
    break;

  case 602: /* const_expr: '(' full_type ')' const_expr  */
#line 3515 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 8306 "built/tmp/cppBison.yxx.c"
    break;

  case 603: /* const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3519 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 8314 "built/tmp/cppBison.yxx.c"
    break;

  case 604: /* const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3523 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 8322 "built/tmp/cppBison.yxx.c"
    break;

  case 605: /* const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3527 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 8330 "built/tmp/cppBison.yxx.c"
    break;

  case 606: /* const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3531 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 8338 "built/tmp/cppBison.yxx.c"
    break;

  case 607: /* const_expr: TYPENAME_IDENTIFIER '(' optional_const_expr_comma ')'  */
#line 3535 "dtool/src/cppparser/cppBison.yxx"
{
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8352 "built/tmp/cppBison.yxx.c"
    break;

  case 608: /* const_expr: TYPENAME_IDENTIFIER '{' optional_const_expr_comma '}'  */
#line 3545 "dtool/src/cppparser/cppBison.yxx"
{
  // Aggregate initialization.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type == nullptr) {
    yyerror(string("internal error resolving type ") + (yyvsp[-3].u.identifier)->get_fully_scoped_name(), (yylsp[-3]));
  }
  assert(type != nullptr);
  (yyval.u.expr) = new CPPExpression(CPPExpression::aggregate_init_op(type, (yyvsp[-1].u.expr)));
}
#line 8366 "built/tmp/cppBison.yxx.c"
    break;

  case 609: /* const_expr: KW_INT '(' optional_const_expr_comma ')'  */
#line 3555 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8376 "built/tmp/cppBison.yxx.c"
    break;

  case 610: /* const_expr: KW_CHAR '(' optional_const_expr_comma ')'  */
#line 3561 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8386 "built/tmp/cppBison.yxx.c"
    break;

  case 611: /* const_expr: KW_WCHAR_T '(' optional_const_expr_comma ')'  */
#line 3567 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8396 "built/tmp/cppBison.yxx.c"
    break;

  case 612: /* const_expr: KW_CHAR8_T '(' optional_const_expr_comma ')'  */
#line 3573 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char8_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8406 "built/tmp/cppBison.yxx.c"
    break;

  case 613: /* const_expr: KW_CHAR16_T '(' optional_const_expr_comma ')'  */
#line 3579 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char16_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8416 "built/tmp/cppBison.yxx.c"
    break;

  case 614: /* const_expr: KW_CHAR32_T '(' optional_const_expr_comma ')'  */
#line 3585 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char32_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8426 "built/tmp/cppBison.yxx.c"
    break;

  case 615: /* const_expr: KW_BOOL '(' optional_const_expr_comma ')'  */
#line 3591 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8436 "built/tmp/cppBison.yxx.c"
    break;

  case 616: /* const_expr: KW_SHORT '(' optional_const_expr_comma ')'  */
#line 3597 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8447 "built/tmp/cppBison.yxx.c"
    break;

  case 617: /* const_expr: KW_LONG '(' optional_const_expr_comma ')'  */
#line 3604 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8458 "built/tmp/cppBison.yxx.c"
    break;

  case 618: /* const_expr: KW_UNSIGNED '(' optional_const_expr_comma ')'  */
#line 3611 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8469 "built/tmp/cppBison.yxx.c"
    break;

  case 619: /* const_expr: KW_SIGNED '(' optional_const_expr_comma ')'  */
#line 3618 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8480 "built/tmp/cppBison.yxx.c"
    break;

  case 620: /* const_expr: KW_FLOAT '(' optional_const_expr_comma ')'  */
#line 3625 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8490 "built/tmp/cppBison.yxx.c"
    break;

  case 621: /* const_expr: KW_DOUBLE '(' optional_const_expr_comma ')'  */
#line 3631 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
#line 8500 "built/tmp/cppBison.yxx.c"
    break;

  case 622: /* const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3637 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 8508 "built/tmp/cppBison.yxx.c"
    break;

  case 623: /* const_expr: KW_SIZEOF const_expr  */
#line 3641 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 8516 "built/tmp/cppBison.yxx.c"
    break;

  case 624: /* const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3645 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 8524 "built/tmp/cppBison.yxx.c"
    break;

  case 625: /* const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3649 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 8532 "built/tmp/cppBison.yxx.c"
    break;

  case 626: /* const_expr: KW_NEW predefined_type  */
#line 3653 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 8540 "built/tmp/cppBison.yxx.c"
    break;

  case 627: /* const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 3657 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 8548 "built/tmp/cppBison.yxx.c"
    break;

  case 628: /* const_expr: KW_TYPEID '(' full_type ')'  */
#line 3661 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 8563 "built/tmp/cppBison.yxx.c"
    break;

  case 629: /* const_expr: KW_TYPEID '(' const_expr ')'  */
#line 3672 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 8578 "built/tmp/cppBison.yxx.c"
    break;

  case 630: /* const_expr: '!' const_expr  */
#line 3683 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 8586 "built/tmp/cppBison.yxx.c"
    break;

  case 631: /* const_expr: '~' const_expr  */
#line 3687 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 8594 "built/tmp/cppBison.yxx.c"
    break;

  case 632: /* const_expr: '-' const_expr  */
#line 3691 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 8602 "built/tmp/cppBison.yxx.c"
    break;

  case 633: /* const_expr: '+' const_expr  */
#line 3695 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 8610 "built/tmp/cppBison.yxx.c"
    break;

  case 634: /* const_expr: '*' const_expr  */
#line 3699 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
#line 8618 "built/tmp/cppBison.yxx.c"
    break;

  case 635: /* const_expr: '&' const_expr  */
#line 3703 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 8626 "built/tmp/cppBison.yxx.c"
    break;

  case 636: /* const_expr: const_expr '*' const_expr  */
#line 3707 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8634 "built/tmp/cppBison.yxx.c"
    break;

  case 637: /* const_expr: const_expr '/' const_expr  */
#line 3711 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8642 "built/tmp/cppBison.yxx.c"
    break;

  case 638: /* const_expr: const_expr '%' const_expr  */
#line 3715 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8650 "built/tmp/cppBison.yxx.c"
    break;

  case 639: /* const_expr: const_expr '+' const_expr  */
#line 3719 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8658 "built/tmp/cppBison.yxx.c"
    break;

  case 640: /* const_expr: const_expr '-' const_expr  */
#line 3723 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8666 "built/tmp/cppBison.yxx.c"
    break;

  case 641: /* const_expr: const_expr '|' const_expr  */
#line 3727 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8674 "built/tmp/cppBison.yxx.c"
    break;

  case 642: /* const_expr: const_expr '^' const_expr  */
#line 3731 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8682 "built/tmp/cppBison.yxx.c"
    break;

  case 643: /* const_expr: const_expr '&' const_expr  */
#line 3735 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8690 "built/tmp/cppBison.yxx.c"
    break;

  case 644: /* const_expr: const_expr OROR const_expr  */
#line 3739 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8698 "built/tmp/cppBison.yxx.c"
    break;

  case 645: /* const_expr: const_expr ANDAND const_expr  */
#line 3743 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8706 "built/tmp/cppBison.yxx.c"
    break;

  case 646: /* const_expr: const_expr EQCOMPARE const_expr  */
#line 3747 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8714 "built/tmp/cppBison.yxx.c"
    break;

  case 647: /* const_expr: const_expr NECOMPARE const_expr  */
#line 3751 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8722 "built/tmp/cppBison.yxx.c"
    break;

  case 648: /* const_expr: const_expr LECOMPARE const_expr  */
#line 3755 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8730 "built/tmp/cppBison.yxx.c"
    break;

  case 649: /* const_expr: const_expr GECOMPARE const_expr  */
#line 3759 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8738 "built/tmp/cppBison.yxx.c"
    break;

  case 650: /* const_expr: const_expr SPACESHIP const_expr  */
#line 3763 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8746 "built/tmp/cppBison.yxx.c"
    break;

  case 651: /* const_expr: const_expr '<' const_expr  */
#line 3767 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8754 "built/tmp/cppBison.yxx.c"
    break;

  case 652: /* const_expr: const_expr '>' const_expr  */
#line 3771 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8762 "built/tmp/cppBison.yxx.c"
    break;

  case 653: /* const_expr: const_expr LSHIFT const_expr  */
#line 3775 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8770 "built/tmp/cppBison.yxx.c"
    break;

  case 654: /* const_expr: const_expr RSHIFT const_expr  */
#line 3779 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8778 "built/tmp/cppBison.yxx.c"
    break;

  case 655: /* const_expr: const_expr '?' const_expr ':' const_expr  */
#line 3783 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8786 "built/tmp/cppBison.yxx.c"
    break;

  case 656: /* const_expr: const_expr '[' const_expr ']'  */
#line 3787 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8794 "built/tmp/cppBison.yxx.c"
    break;

  case 657: /* const_expr: const_expr '(' const_expr_comma ')'  */
#line 3791 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 8802 "built/tmp/cppBison.yxx.c"
    break;

  case 658: /* const_expr: const_expr '(' ')'  */
#line 3795 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 8810 "built/tmp/cppBison.yxx.c"
    break;

  case 659: /* const_expr: KW_NOEXCEPT_LPAREN const_expr ')'  */
#line 3799 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(KW_NOEXCEPT, (yyvsp[-1].u.expr));
}
#line 8818 "built/tmp/cppBison.yxx.c"
    break;

  case 660: /* const_expr: const_expr '.' name  */
#line 3803 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 8826 "built/tmp/cppBison.yxx.c"
    break;

  case 661: /* const_expr: const_expr POINTSAT const_expr  */
#line 3807 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 8834 "built/tmp/cppBison.yxx.c"
    break;

  case 662: /* const_expr: '(' const_expr_comma ')'  */
#line 3811 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 8842 "built/tmp/cppBison.yxx.c"
    break;

  case 663: /* const_operand: INTEGER  */
#line 3818 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8850 "built/tmp/cppBison.yxx.c"
    break;

  case 664: /* const_operand: KW_TRUE  */
#line 3822 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 8858 "built/tmp/cppBison.yxx.c"
    break;

  case 665: /* const_operand: KW_FALSE  */
#line 3826 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 8866 "built/tmp/cppBison.yxx.c"
    break;

  case 666: /* const_operand: CHAR_TOK  */
#line 3830 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 8874 "built/tmp/cppBison.yxx.c"
    break;

  case 667: /* const_operand: REAL  */
#line 3834 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 8882 "built/tmp/cppBison.yxx.c"
    break;

  case 668: /* const_operand: string_literal  */
#line 3838 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8890 "built/tmp/cppBison.yxx.c"
    break;

  case 669: /* const_operand: CUSTOM_LITERAL  */
#line 3842 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 8898 "built/tmp/cppBison.yxx.c"
    break;

  case 670: /* const_operand: IDENTIFIER  */
#line 3846 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 8906 "built/tmp/cppBison.yxx.c"
    break;

  case 671: /* const_operand: KW_FINAL  */
#line 3850 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8916 "built/tmp/cppBison.yxx.c"
    break;

  case 672: /* const_operand: KW_OVERRIDE  */
#line 3856 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 8926 "built/tmp/cppBison.yxx.c"
    break;

  case 673: /* const_operand: KW_NULLPTR  */
#line 3862 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 8934 "built/tmp/cppBison.yxx.c"
    break;

  case 674: /* const_operand: '[' capture_list ']' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3866 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-7].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-7].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-7].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-7].u.closure_type)));
}
#line 8945 "built/tmp/cppBison.yxx.c"
    break;

  case 675: /* const_operand: '[' capture_list ']' '(' function_parameter_list ')' function_post optional_attributes maybe_trailing_return_type '{' code '}'  */
#line 3873 "dtool/src/cppparser/cppBison.yxx"
{
  (yyvsp[-10].u.closure_type)->_parameters = (yyvsp[-7].u.param_list);
  (yyvsp[-10].u.closure_type)->_flags = (yyvsp[-5].u.integer);
  (yyvsp[-10].u.closure_type)->_attributes = (yyvsp[-4].attr_list);
  (yyvsp[-10].u.closure_type)->_return_type = (yyvsp[-3].u.type);
  (yyval.u.expr) = new CPPExpression(CPPExpression::lambda((yyvsp[-10].u.closure_type)));
}
#line 8957 "built/tmp/cppBison.yxx.c"
    break;

  case 676: /* const_operand: KW_HAS_VIRTUAL_DESTRUCTOR '(' full_type ')'  */
#line 3881 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_HAS_VIRTUAL_DESTRUCTOR, (yyvsp[-1].u.type)));
}
#line 8965 "built/tmp/cppBison.yxx.c"
    break;

  case 677: /* const_operand: KW_IS_ABSTRACT '(' full_type ')'  */
#line 3885 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ABSTRACT, (yyvsp[-1].u.type)));
}
#line 8973 "built/tmp/cppBison.yxx.c"
    break;

  case 678: /* const_operand: KW_IS_BASE_OF '(' full_type ',' full_type ')'  */
#line 3889 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 8981 "built/tmp/cppBison.yxx.c"
    break;

  case 679: /* const_operand: KW_IS_CLASS '(' full_type ')'  */
#line 3893 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CLASS, (yyvsp[-1].u.type)));
}
#line 8989 "built/tmp/cppBison.yxx.c"
    break;

  case 680: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ')'  */
#line 3897 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 8997 "built/tmp/cppBison.yxx.c"
    break;

  case 681: /* const_operand: KW_IS_CONSTRUCTIBLE '(' full_type ',' full_type ')'  */
#line 3901 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONSTRUCTIBLE, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9005 "built/tmp/cppBison.yxx.c"
    break;

  case 682: /* const_operand: KW_IS_CONVERTIBLE_TO '(' full_type ',' full_type ')'  */
#line 3905 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_CONVERTIBLE_TO, (yyvsp[-3].u.type), (yyvsp[-1].u.type)));
}
#line 9013 "built/tmp/cppBison.yxx.c"
    break;

  case 683: /* const_operand: KW_IS_DESTRUCTIBLE '(' full_type ')'  */
#line 3909 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_DESTRUCTIBLE, (yyvsp[-1].u.type)));
}
#line 9021 "built/tmp/cppBison.yxx.c"
    break;

  case 684: /* const_operand: KW_IS_EMPTY '(' full_type ')'  */
#line 3913 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_EMPTY, (yyvsp[-1].u.type)));
}
#line 9029 "built/tmp/cppBison.yxx.c"
    break;

  case 685: /* const_operand: KW_IS_ENUM '(' full_type ')'  */
#line 3917 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_ENUM, (yyvsp[-1].u.type)));
}
#line 9037 "built/tmp/cppBison.yxx.c"
    break;

  case 686: /* const_operand: KW_IS_FINAL '(' full_type ')'  */
#line 3921 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FINAL, (yyvsp[-1].u.type)));
}
#line 9045 "built/tmp/cppBison.yxx.c"
    break;

  case 687: /* const_operand: KW_IS_FUNDAMENTAL '(' full_type ')'  */
#line 3925 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_FUNDAMENTAL, (yyvsp[-1].u.type)));
}
#line 9053 "built/tmp/cppBison.yxx.c"
    break;

  case 688: /* const_operand: KW_IS_POD '(' full_type ')'  */
#line 3929 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POD, (yyvsp[-1].u.type)));
}
#line 9061 "built/tmp/cppBison.yxx.c"
    break;

  case 689: /* const_operand: KW_IS_POLYMORPHIC '(' full_type ')'  */
#line 3933 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_POLYMORPHIC, (yyvsp[-1].u.type)));
}
#line 9069 "built/tmp/cppBison.yxx.c"
    break;

  case 690: /* const_operand: KW_IS_STANDARD_LAYOUT '(' full_type ')'  */
#line 3937 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_STANDARD_LAYOUT, (yyvsp[-1].u.type)));
}
#line 9077 "built/tmp/cppBison.yxx.c"
    break;

  case 691: /* const_operand: KW_IS_TRIVIAL '(' full_type ')'  */
#line 3941 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIAL, (yyvsp[-1].u.type)));
}
#line 9085 "built/tmp/cppBison.yxx.c"
    break;

  case 692: /* const_operand: KW_IS_TRIVIALLY_COPYABLE '(' full_type ')'  */
#line 3945 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_TRIVIALLY_COPYABLE, (yyvsp[-1].u.type)));
}
#line 9093 "built/tmp/cppBison.yxx.c"
    break;

  case 693: /* const_operand: KW_IS_UNION '(' full_type ')'  */
#line 3949 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::type_trait(KW_IS_UNION, (yyvsp[-1].u.type)));
}
#line 9101 "built/tmp/cppBison.yxx.c"
    break;

  case 694: /* formal_const_expr: formal_const_operand  */
#line 3963 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9109 "built/tmp/cppBison.yxx.c"
    break;

  case 695: /* formal_const_expr: '(' full_type ')' const_expr  */
#line 3967 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
#line 9117 "built/tmp/cppBison.yxx.c"
    break;

  case 696: /* formal_const_expr: KW_STATIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3971 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_static_cast));
}
#line 9125 "built/tmp/cppBison.yxx.c"
    break;

  case 697: /* formal_const_expr: KW_DYNAMIC_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3975 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_dynamic_cast));
}
#line 9133 "built/tmp/cppBison.yxx.c"
    break;

  case 698: /* formal_const_expr: KW_CONST_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3979 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_const_cast));
}
#line 9141 "built/tmp/cppBison.yxx.c"
    break;

  case 699: /* formal_const_expr: KW_REINTERPRET_CAST '<' full_type '>' '(' const_expr_comma ')'  */
#line 3983 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr), CPPExpression::T_reinterpret_cast));
}
#line 9149 "built/tmp/cppBison.yxx.c"
    break;

  case 700: /* formal_const_expr: KW_SIZEOF '(' full_type ')'  */
#line 3987 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
#line 9157 "built/tmp/cppBison.yxx.c"
    break;

  case 701: /* formal_const_expr: KW_SIZEOF formal_const_expr  */
#line 3991 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[0].u.expr)));
}
#line 9165 "built/tmp/cppBison.yxx.c"
    break;

  case 702: /* formal_const_expr: KW_SIZEOF ELLIPSIS '(' name ')'  */
#line 3995 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_ellipsis_func((yyvsp[-1].u.identifier)));
}
#line 9173 "built/tmp/cppBison.yxx.c"
    break;

  case 703: /* formal_const_expr: KW_ALIGNOF '(' full_type ')'  */
#line 3999 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::alignof_func((yyvsp[-1].u.type)));
}
#line 9181 "built/tmp/cppBison.yxx.c"
    break;

  case 704: /* formal_const_expr: KW_NEW predefined_type  */
#line 4003 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
#line 9189 "built/tmp/cppBison.yxx.c"
    break;

  case 705: /* formal_const_expr: KW_NEW predefined_type '(' optional_const_expr_comma ')'  */
#line 4007 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
#line 9197 "built/tmp/cppBison.yxx.c"
    break;

  case 706: /* formal_const_expr: KW_TYPEID '(' full_type ')'  */
#line 4011 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.type), std_type_info));
}
#line 9212 "built/tmp/cppBison.yxx.c"
    break;

  case 707: /* formal_const_expr: KW_TYPEID '(' const_expr ')'  */
#line 4022 "dtool/src/cppparser/cppBison.yxx"
{
  CPPIdentifier ident("");
  ident.add_name("std");
  ident.add_name("type_info");
  CPPType *std_type_info = ident.find_type(current_scope, global_scope, false, current_lexer);
  if (!std_type_info) {
    yywarning("cannot use typeid before including <typeinfo>", (yylsp[-3]));
  }
  (yyval.u.expr) = new CPPExpression(CPPExpression::typeid_op((yyvsp[-1].u.expr), std_type_info));
}
#line 9227 "built/tmp/cppBison.yxx.c"
    break;

  case 708: /* formal_const_expr: '!' const_expr  */
#line 4033 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
#line 9235 "built/tmp/cppBison.yxx.c"
    break;

  case 709: /* formal_const_expr: '~' const_expr  */
#line 4037 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
#line 9243 "built/tmp/cppBison.yxx.c"
    break;

  case 710: /* formal_const_expr: '-' const_expr  */
#line 4041 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
}
#line 9251 "built/tmp/cppBison.yxx.c"
    break;

  case 711: /* formal_const_expr: '+' const_expr  */
#line 4045 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_PLUS, (yyvsp[0].u.expr));
}
#line 9259 "built/tmp/cppBison.yxx.c"
    break;

  case 712: /* formal_const_expr: '&' const_expr  */
#line 4049 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
#line 9267 "built/tmp/cppBison.yxx.c"
    break;

  case 713: /* formal_const_expr: formal_const_expr '*' const_expr  */
#line 4053 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9275 "built/tmp/cppBison.yxx.c"
    break;

  case 714: /* formal_const_expr: formal_const_expr '/' const_expr  */
#line 4057 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9283 "built/tmp/cppBison.yxx.c"
    break;

  case 715: /* formal_const_expr: formal_const_expr '%' const_expr  */
#line 4061 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9291 "built/tmp/cppBison.yxx.c"
    break;

  case 716: /* formal_const_expr: formal_const_expr '+' const_expr  */
#line 4065 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9299 "built/tmp/cppBison.yxx.c"
    break;

  case 717: /* formal_const_expr: formal_const_expr '-' const_expr  */
#line 4069 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9307 "built/tmp/cppBison.yxx.c"
    break;

  case 718: /* formal_const_expr: formal_const_expr '|' const_expr  */
#line 4073 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9315 "built/tmp/cppBison.yxx.c"
    break;

  case 719: /* formal_const_expr: formal_const_expr '^' const_expr  */
#line 4077 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('^', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9323 "built/tmp/cppBison.yxx.c"
    break;

  case 720: /* formal_const_expr: formal_const_expr '&' const_expr  */
#line 4081 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9331 "built/tmp/cppBison.yxx.c"
    break;

  case 721: /* formal_const_expr: formal_const_expr OROR const_expr  */
#line 4085 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9339 "built/tmp/cppBison.yxx.c"
    break;

  case 722: /* formal_const_expr: formal_const_expr ANDAND const_expr  */
#line 4089 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9347 "built/tmp/cppBison.yxx.c"
    break;

  case 723: /* formal_const_expr: formal_const_expr EQCOMPARE const_expr  */
#line 4093 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9355 "built/tmp/cppBison.yxx.c"
    break;

  case 724: /* formal_const_expr: formal_const_expr NECOMPARE const_expr  */
#line 4097 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9363 "built/tmp/cppBison.yxx.c"
    break;

  case 725: /* formal_const_expr: formal_const_expr LECOMPARE const_expr  */
#line 4101 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9371 "built/tmp/cppBison.yxx.c"
    break;

  case 726: /* formal_const_expr: formal_const_expr GECOMPARE const_expr  */
#line 4105 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9379 "built/tmp/cppBison.yxx.c"
    break;

  case 727: /* formal_const_expr: formal_const_expr SPACESHIP const_expr  */
#line 4109 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(SPACESHIP, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9387 "built/tmp/cppBison.yxx.c"
    break;

  case 728: /* formal_const_expr: formal_const_expr '<' const_expr  */
#line 4113 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9395 "built/tmp/cppBison.yxx.c"
    break;

  case 729: /* formal_const_expr: formal_const_expr '>' const_expr  */
#line 4117 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9403 "built/tmp/cppBison.yxx.c"
    break;

  case 730: /* formal_const_expr: formal_const_expr LSHIFT const_expr  */
#line 4121 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9411 "built/tmp/cppBison.yxx.c"
    break;

  case 731: /* formal_const_expr: formal_const_expr RSHIFT const_expr  */
#line 4125 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9419 "built/tmp/cppBison.yxx.c"
    break;

  case 732: /* formal_const_expr: formal_const_expr '?' const_expr ':' const_expr  */
#line 4129 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9427 "built/tmp/cppBison.yxx.c"
    break;

  case 733: /* formal_const_expr: formal_const_expr '[' const_expr ']'  */
#line 4133 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9435 "built/tmp/cppBison.yxx.c"
    break;

  case 734: /* formal_const_expr: formal_const_expr '(' const_expr_comma ')'  */
#line 4137 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
#line 9443 "built/tmp/cppBison.yxx.c"
    break;

  case 735: /* formal_const_expr: formal_const_expr '(' ')'  */
#line 4141 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
#line 9451 "built/tmp/cppBison.yxx.c"
    break;

  case 736: /* formal_const_expr: formal_const_expr '.' name  */
#line 4145 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer));
}
#line 9459 "built/tmp/cppBison.yxx.c"
    break;

  case 737: /* formal_const_expr: formal_const_expr POINTSAT const_expr  */
#line 4149 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
#line 9467 "built/tmp/cppBison.yxx.c"
    break;

  case 738: /* formal_const_expr: '(' const_expr_comma ')'  */
#line 4153 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
#line 9475 "built/tmp/cppBison.yxx.c"
    break;

  case 739: /* formal_const_operand: INTEGER  */
#line 4160 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9483 "built/tmp/cppBison.yxx.c"
    break;

  case 740: /* formal_const_operand: KW_TRUE  */
#line 4164 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(true);
}
#line 9491 "built/tmp/cppBison.yxx.c"
    break;

  case 741: /* formal_const_operand: KW_FALSE  */
#line 4168 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(false);
}
#line 9499 "built/tmp/cppBison.yxx.c"
    break;

  case 742: /* formal_const_operand: CHAR_TOK  */
#line 4172 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
#line 9507 "built/tmp/cppBison.yxx.c"
    break;

  case 743: /* formal_const_operand: REAL  */
#line 4176 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
#line 9515 "built/tmp/cppBison.yxx.c"
    break;

  case 744: /* formal_const_operand: string_literal  */
#line 4180 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9523 "built/tmp/cppBison.yxx.c"
    break;

  case 745: /* formal_const_operand: CUSTOM_LITERAL  */
#line 4184 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9531 "built/tmp/cppBison.yxx.c"
    break;

  case 746: /* formal_const_operand: IDENTIFIER  */
#line 4188 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
#line 9539 "built/tmp/cppBison.yxx.c"
    break;

  case 747: /* formal_const_operand: KW_FINAL  */
#line 4192 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "final".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("final", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9549 "built/tmp/cppBison.yxx.c"
    break;

  case 748: /* formal_const_operand: KW_OVERRIDE  */
#line 4198 "dtool/src/cppparser/cppBison.yxx"
{
  // A variable named "override".  C++11 explicitly permits this.
  CPPIdentifier *ident = new CPPIdentifier("override", (yylsp[0]));
  (yyval.u.expr) = new CPPExpression(ident, current_scope, global_scope, current_lexer);
}
#line 9559 "built/tmp/cppBison.yxx.c"
    break;

  case 749: /* formal_const_operand: KW_NULLPTR  */
#line 4204 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression(CPPExpression::get_nullptr());
}
#line 9567 "built/tmp/cppBison.yxx.c"
    break;

  case 750: /* capture_list: empty  */
#line 4212 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
}
#line 9575 "built/tmp/cppBison.yxx.c"
    break;

  case 751: /* capture_list: '='  */
#line 4216 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_value);
}
#line 9583 "built/tmp/cppBison.yxx.c"
    break;

  case 752: /* capture_list: '&'  */
#line 4220 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType(CPPClosureType::CT_by_reference);
}
#line 9591 "built/tmp/cppBison.yxx.c"
    break;

  case 753: /* capture_list: capture maybe_initialize  */
#line 4224 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = new CPPClosureType();
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9602 "built/tmp/cppBison.yxx.c"
    break;

  case 754: /* capture_list: capture_list ',' capture maybe_initialize  */
#line 4231 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.closure_type) = (yyvsp[-3].u.closure_type);
  (yyvsp[-1].u.capture)->_initializer = (yyvsp[0].u.expr);
  (yyval.u.closure_type)->_captures.push_back(*(yyvsp[-1].u.capture));
  delete (yyvsp[-1].u.capture);
}
#line 9613 "built/tmp/cppBison.yxx.c"
    break;

  case 755: /* capture: '&' name  */
#line 4241 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9623 "built/tmp/cppBison.yxx.c"
    break;

  case 756: /* capture: '&' name ELLIPSIS  */
#line 4247 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[-1].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
}
#line 9633 "built/tmp/cppBison.yxx.c"
    break;

  case 757: /* capture: name  */
#line 4253 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  if ((yyval.u.capture)->_name == "this") {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_reference;
  } else {
    (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  }
}
#line 9647 "built/tmp/cppBison.yxx.c"
    break;

  case 758: /* capture: '*' name  */
#line 4263 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.capture) = new CPPClosureType::Capture;
  (yyval.u.capture)->_name = (yyvsp[0].u.identifier)->get_simple_name();
  (yyval.u.capture)->_type = CPPClosureType::CT_by_value;
  if ((yyval.u.capture)->_name != "this") {
    yywarning("only capture name 'this' may be preceded by an asterisk", (yylsp[0]));
  }
}
#line 9660 "built/tmp/cppBison.yxx.c"
    break;

  case 759: /* class_derivation_name: name  */
#line 4275 "dtool/src/cppparser/cppBison.yxx"
{
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == nullptr) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
#line 9672 "built/tmp/cppBison.yxx.c"
    break;

  case 760: /* class_derivation_name: KW_TYPENAME name  */
#line 4283 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
#line 9680 "built/tmp/cppBison.yxx.c"
    break;

  case 761: /* class_derivation_name: name ELLIPSIS  */
#line 4287 "dtool/src/cppparser/cppBison.yxx"
{
  CPPClassTemplateParameter *ctp = new CPPClassTemplateParameter((yyvsp[-1].u.identifier));
  ctp->_packed = true;
  (yyval.u.type) = CPPType::new_type(ctp);
}
#line 9690 "built/tmp/cppBison.yxx.c"
    break;

  case 762: /* name: IDENTIFIER  */
#line 4317 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9698 "built/tmp/cppBison.yxx.c"
    break;

  case 763: /* name: TYPENAME_IDENTIFIER  */
#line 4321 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9706 "built/tmp/cppBison.yxx.c"
    break;

  case 764: /* name: TYPEPACK_IDENTIFIER  */
#line 4325 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9714 "built/tmp/cppBison.yxx.c"
    break;

  case 765: /* name: KW_FINAL  */
#line 4329 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("final", (yylsp[0]));
}
#line 9722 "built/tmp/cppBison.yxx.c"
    break;

  case 766: /* name: KW_OVERRIDE  */
#line 4333 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9730 "built/tmp/cppBison.yxx.c"
    break;

  case 767: /* name: KW_SIGNED  */
#line 4337 "dtool/src/cppparser/cppBison.yxx"
{
  // This is not a keyword in Python, so it is useful to be able to use this
  // in MAKE_PROPERTY definitions, etc.
  (yyval.u.identifier) = new CPPIdentifier("signed", (yylsp[0]));
}
#line 9740 "built/tmp/cppBison.yxx.c"
    break;

  case 768: /* name: KW_FLOAT  */
#line 4343 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("float", (yylsp[0]));
}
#line 9748 "built/tmp/cppBison.yxx.c"
    break;

  case 769: /* name: KW_PUBLIC  */
#line 4347 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("public", (yylsp[0]));
}
#line 9756 "built/tmp/cppBison.yxx.c"
    break;

  case 770: /* name: KW_PRIVATE  */
#line 4351 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("private", (yylsp[0]));
}
#line 9764 "built/tmp/cppBison.yxx.c"
    break;

  case 771: /* name: KW_STATIC  */
#line 4355 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("static", (yylsp[0]));
}
#line 9772 "built/tmp/cppBison.yxx.c"
    break;

  case 772: /* name: KW_DEFAULT  */
#line 4359 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("default", (yylsp[0]));
}
#line 9780 "built/tmp/cppBison.yxx.c"
    break;

  case 773: /* name_no_final: IDENTIFIER  */
#line 4370 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9788 "built/tmp/cppBison.yxx.c"
    break;

  case 774: /* name_no_final: TYPENAME_IDENTIFIER  */
#line 4374 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9796 "built/tmp/cppBison.yxx.c"
    break;

  case 775: /* name_no_final: TYPEPACK_IDENTIFIER  */
#line 4378 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
#line 9804 "built/tmp/cppBison.yxx.c"
    break;

  case 776: /* name_no_final: KW_OVERRIDE  */
#line 4382 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.identifier) = new CPPIdentifier("override", (yylsp[0]));
}
#line 9812 "built/tmp/cppBison.yxx.c"
    break;

  case 777: /* string_literal: SIMPLE_STRING  */
#line 4390 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
#line 9820 "built/tmp/cppBison.yxx.c"
    break;

  case 778: /* string_literal: STRING_LITERAL  */
#line 4394 "dtool/src/cppparser/cppBison.yxx"
{
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
#line 9828 "built/tmp/cppBison.yxx.c"
    break;

  case 779: /* string_literal: string_literal SIMPLE_STRING  */
#line 4398 "dtool/src/cppparser/cppBison.yxx"
{
  // The right string takes on the literal type of the left.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  (yyval.u.expr)->_str += (yyvsp[0].str);
}
#line 9838 "built/tmp/cppBison.yxx.c"
    break;

  case 780: /* string_literal: string_literal STRING_LITERAL  */
#line 4404 "dtool/src/cppparser/cppBison.yxx"
{
  // We have to check that the two literal types match up.
  (yyval.u.expr) = (yyvsp[-1].u.expr);
  if ((yyvsp[0].u.expr)->_type != CPPExpression::T_string && (yyvsp[0].u.expr)->_type != (yyvsp[-1].u.expr)->_type) {
    yywarning("cannot concatenate two string literals of different types", (yyloc));
  }
  (yyval.u.expr)->_str += (yyvsp[0].u.expr)->_str;
}
#line 9851 "built/tmp/cppBison.yxx.c"
    break;


#line 9855 "built/tmp/cppBison.yxx.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

